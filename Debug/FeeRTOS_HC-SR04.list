
FeeRTOS_HC-SR04.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000057c4  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08005954  08005954  00015954  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080059c4  080059c4  00020014  2**0
                  CONTENTS
  4 .ARM          00000008  080059c4  080059c4  000159c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080059cc  080059cc  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080059cc  080059cc  000159cc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080059d0  080059d0  000159d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080059d4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000040a0  20000014  080059e8  00020014  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200040b4  080059e8  000240b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   000116c2  00000000  00000000  00020044  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00002704  00000000  00000000  00031706  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00000f20  00000000  00000000  00033e10  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000df8  00000000  00000000  00034d30  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  000217a9  00000000  00000000  00035b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   0000ba60  00000000  00000000  000572d1  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000cebdc  00000000  00000000  00062d31  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  0013190d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003e30  00000000  00000000  00131988  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000014 	.word	0x20000014
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800593c 	.word	0x0800593c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000018 	.word	0x20000018
 80001cc:	0800593c 	.word	0x0800593c

080001d0 <__aeabi_uldivmod>:
 80001d0:	b953      	cbnz	r3, 80001e8 <__aeabi_uldivmod+0x18>
 80001d2:	b94a      	cbnz	r2, 80001e8 <__aeabi_uldivmod+0x18>
 80001d4:	2900      	cmp	r1, #0
 80001d6:	bf08      	it	eq
 80001d8:	2800      	cmpeq	r0, #0
 80001da:	bf1c      	itt	ne
 80001dc:	f04f 31ff 	movne.w	r1, #4294967295
 80001e0:	f04f 30ff 	movne.w	r0, #4294967295
 80001e4:	f000 b972 	b.w	80004cc <__aeabi_idiv0>
 80001e8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001ec:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f0:	f000 f806 	bl	8000200 <__udivmoddi4>
 80001f4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001fc:	b004      	add	sp, #16
 80001fe:	4770      	bx	lr

08000200 <__udivmoddi4>:
 8000200:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000204:	9e08      	ldr	r6, [sp, #32]
 8000206:	4604      	mov	r4, r0
 8000208:	4688      	mov	r8, r1
 800020a:	2b00      	cmp	r3, #0
 800020c:	d14b      	bne.n	80002a6 <__udivmoddi4+0xa6>
 800020e:	428a      	cmp	r2, r1
 8000210:	4615      	mov	r5, r2
 8000212:	d967      	bls.n	80002e4 <__udivmoddi4+0xe4>
 8000214:	fab2 f282 	clz	r2, r2
 8000218:	b14a      	cbz	r2, 800022e <__udivmoddi4+0x2e>
 800021a:	f1c2 0720 	rsb	r7, r2, #32
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	fa20 f707 	lsr.w	r7, r0, r7
 8000226:	4095      	lsls	r5, r2
 8000228:	ea47 0803 	orr.w	r8, r7, r3
 800022c:	4094      	lsls	r4, r2
 800022e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000232:	0c23      	lsrs	r3, r4, #16
 8000234:	fbb8 f7fe 	udiv	r7, r8, lr
 8000238:	fa1f fc85 	uxth.w	ip, r5
 800023c:	fb0e 8817 	mls	r8, lr, r7, r8
 8000240:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000244:	fb07 f10c 	mul.w	r1, r7, ip
 8000248:	4299      	cmp	r1, r3
 800024a:	d909      	bls.n	8000260 <__udivmoddi4+0x60>
 800024c:	18eb      	adds	r3, r5, r3
 800024e:	f107 30ff 	add.w	r0, r7, #4294967295
 8000252:	f080 811b 	bcs.w	800048c <__udivmoddi4+0x28c>
 8000256:	4299      	cmp	r1, r3
 8000258:	f240 8118 	bls.w	800048c <__udivmoddi4+0x28c>
 800025c:	3f02      	subs	r7, #2
 800025e:	442b      	add	r3, r5
 8000260:	1a5b      	subs	r3, r3, r1
 8000262:	b2a4      	uxth	r4, r4
 8000264:	fbb3 f0fe 	udiv	r0, r3, lr
 8000268:	fb0e 3310 	mls	r3, lr, r0, r3
 800026c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000270:	fb00 fc0c 	mul.w	ip, r0, ip
 8000274:	45a4      	cmp	ip, r4
 8000276:	d909      	bls.n	800028c <__udivmoddi4+0x8c>
 8000278:	192c      	adds	r4, r5, r4
 800027a:	f100 33ff 	add.w	r3, r0, #4294967295
 800027e:	f080 8107 	bcs.w	8000490 <__udivmoddi4+0x290>
 8000282:	45a4      	cmp	ip, r4
 8000284:	f240 8104 	bls.w	8000490 <__udivmoddi4+0x290>
 8000288:	3802      	subs	r0, #2
 800028a:	442c      	add	r4, r5
 800028c:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000290:	eba4 040c 	sub.w	r4, r4, ip
 8000294:	2700      	movs	r7, #0
 8000296:	b11e      	cbz	r6, 80002a0 <__udivmoddi4+0xa0>
 8000298:	40d4      	lsrs	r4, r2
 800029a:	2300      	movs	r3, #0
 800029c:	e9c6 4300 	strd	r4, r3, [r6]
 80002a0:	4639      	mov	r1, r7
 80002a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a6:	428b      	cmp	r3, r1
 80002a8:	d909      	bls.n	80002be <__udivmoddi4+0xbe>
 80002aa:	2e00      	cmp	r6, #0
 80002ac:	f000 80eb 	beq.w	8000486 <__udivmoddi4+0x286>
 80002b0:	2700      	movs	r7, #0
 80002b2:	e9c6 0100 	strd	r0, r1, [r6]
 80002b6:	4638      	mov	r0, r7
 80002b8:	4639      	mov	r1, r7
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	fab3 f783 	clz	r7, r3
 80002c2:	2f00      	cmp	r7, #0
 80002c4:	d147      	bne.n	8000356 <__udivmoddi4+0x156>
 80002c6:	428b      	cmp	r3, r1
 80002c8:	d302      	bcc.n	80002d0 <__udivmoddi4+0xd0>
 80002ca:	4282      	cmp	r2, r0
 80002cc:	f200 80fa 	bhi.w	80004c4 <__udivmoddi4+0x2c4>
 80002d0:	1a84      	subs	r4, r0, r2
 80002d2:	eb61 0303 	sbc.w	r3, r1, r3
 80002d6:	2001      	movs	r0, #1
 80002d8:	4698      	mov	r8, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d0e0      	beq.n	80002a0 <__udivmoddi4+0xa0>
 80002de:	e9c6 4800 	strd	r4, r8, [r6]
 80002e2:	e7dd      	b.n	80002a0 <__udivmoddi4+0xa0>
 80002e4:	b902      	cbnz	r2, 80002e8 <__udivmoddi4+0xe8>
 80002e6:	deff      	udf	#255	; 0xff
 80002e8:	fab2 f282 	clz	r2, r2
 80002ec:	2a00      	cmp	r2, #0
 80002ee:	f040 808f 	bne.w	8000410 <__udivmoddi4+0x210>
 80002f2:	1b49      	subs	r1, r1, r5
 80002f4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 80002f8:	fa1f f885 	uxth.w	r8, r5
 80002fc:	2701      	movs	r7, #1
 80002fe:	fbb1 fcfe 	udiv	ip, r1, lr
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fb0e 111c 	mls	r1, lr, ip, r1
 8000308:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800030c:	fb08 f10c 	mul.w	r1, r8, ip
 8000310:	4299      	cmp	r1, r3
 8000312:	d907      	bls.n	8000324 <__udivmoddi4+0x124>
 8000314:	18eb      	adds	r3, r5, r3
 8000316:	f10c 30ff 	add.w	r0, ip, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x122>
 800031c:	4299      	cmp	r1, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2bc>
 8000322:	4684      	mov	ip, r0
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	b2a3      	uxth	r3, r4
 8000328:	fbb1 f0fe 	udiv	r0, r1, lr
 800032c:	fb0e 1410 	mls	r4, lr, r0, r1
 8000330:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000334:	fb08 f800 	mul.w	r8, r8, r0
 8000338:	45a0      	cmp	r8, r4
 800033a:	d907      	bls.n	800034c <__udivmoddi4+0x14c>
 800033c:	192c      	adds	r4, r5, r4
 800033e:	f100 33ff 	add.w	r3, r0, #4294967295
 8000342:	d202      	bcs.n	800034a <__udivmoddi4+0x14a>
 8000344:	45a0      	cmp	r8, r4
 8000346:	f200 80b6 	bhi.w	80004b6 <__udivmoddi4+0x2b6>
 800034a:	4618      	mov	r0, r3
 800034c:	eba4 0408 	sub.w	r4, r4, r8
 8000350:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000354:	e79f      	b.n	8000296 <__udivmoddi4+0x96>
 8000356:	f1c7 0c20 	rsb	ip, r7, #32
 800035a:	40bb      	lsls	r3, r7
 800035c:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000360:	ea4e 0e03 	orr.w	lr, lr, r3
 8000364:	fa01 f407 	lsl.w	r4, r1, r7
 8000368:	fa20 f50c 	lsr.w	r5, r0, ip
 800036c:	fa21 f30c 	lsr.w	r3, r1, ip
 8000370:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000374:	4325      	orrs	r5, r4
 8000376:	fbb3 f9f8 	udiv	r9, r3, r8
 800037a:	0c2c      	lsrs	r4, r5, #16
 800037c:	fb08 3319 	mls	r3, r8, r9, r3
 8000380:	fa1f fa8e 	uxth.w	sl, lr
 8000384:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000388:	fb09 f40a 	mul.w	r4, r9, sl
 800038c:	429c      	cmp	r4, r3
 800038e:	fa02 f207 	lsl.w	r2, r2, r7
 8000392:	fa00 f107 	lsl.w	r1, r0, r7
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b0>
 8000398:	eb1e 0303 	adds.w	r3, lr, r3
 800039c:	f109 30ff 	add.w	r0, r9, #4294967295
 80003a0:	f080 8087 	bcs.w	80004b2 <__udivmoddi4+0x2b2>
 80003a4:	429c      	cmp	r4, r3
 80003a6:	f240 8084 	bls.w	80004b2 <__udivmoddi4+0x2b2>
 80003aa:	f1a9 0902 	sub.w	r9, r9, #2
 80003ae:	4473      	add	r3, lr
 80003b0:	1b1b      	subs	r3, r3, r4
 80003b2:	b2ad      	uxth	r5, r5
 80003b4:	fbb3 f0f8 	udiv	r0, r3, r8
 80003b8:	fb08 3310 	mls	r3, r8, r0, r3
 80003bc:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 80003c0:	fb00 fa0a 	mul.w	sl, r0, sl
 80003c4:	45a2      	cmp	sl, r4
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1da>
 80003c8:	eb1e 0404 	adds.w	r4, lr, r4
 80003cc:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d0:	d26b      	bcs.n	80004aa <__udivmoddi4+0x2aa>
 80003d2:	45a2      	cmp	sl, r4
 80003d4:	d969      	bls.n	80004aa <__udivmoddi4+0x2aa>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4474      	add	r4, lr
 80003da:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 80003de:	fba0 8902 	umull	r8, r9, r0, r2
 80003e2:	eba4 040a 	sub.w	r4, r4, sl
 80003e6:	454c      	cmp	r4, r9
 80003e8:	46c2      	mov	sl, r8
 80003ea:	464b      	mov	r3, r9
 80003ec:	d354      	bcc.n	8000498 <__udivmoddi4+0x298>
 80003ee:	d051      	beq.n	8000494 <__udivmoddi4+0x294>
 80003f0:	2e00      	cmp	r6, #0
 80003f2:	d069      	beq.n	80004c8 <__udivmoddi4+0x2c8>
 80003f4:	ebb1 050a 	subs.w	r5, r1, sl
 80003f8:	eb64 0403 	sbc.w	r4, r4, r3
 80003fc:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000400:	40fd      	lsrs	r5, r7
 8000402:	40fc      	lsrs	r4, r7
 8000404:	ea4c 0505 	orr.w	r5, ip, r5
 8000408:	e9c6 5400 	strd	r5, r4, [r6]
 800040c:	2700      	movs	r7, #0
 800040e:	e747      	b.n	80002a0 <__udivmoddi4+0xa0>
 8000410:	f1c2 0320 	rsb	r3, r2, #32
 8000414:	fa20 f703 	lsr.w	r7, r0, r3
 8000418:	4095      	lsls	r5, r2
 800041a:	fa01 f002 	lsl.w	r0, r1, r2
 800041e:	fa21 f303 	lsr.w	r3, r1, r3
 8000422:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000426:	4338      	orrs	r0, r7
 8000428:	0c01      	lsrs	r1, r0, #16
 800042a:	fbb3 f7fe 	udiv	r7, r3, lr
 800042e:	fa1f f885 	uxth.w	r8, r5
 8000432:	fb0e 3317 	mls	r3, lr, r7, r3
 8000436:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800043a:	fb07 f308 	mul.w	r3, r7, r8
 800043e:	428b      	cmp	r3, r1
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d907      	bls.n	8000456 <__udivmoddi4+0x256>
 8000446:	1869      	adds	r1, r5, r1
 8000448:	f107 3cff 	add.w	ip, r7, #4294967295
 800044c:	d22f      	bcs.n	80004ae <__udivmoddi4+0x2ae>
 800044e:	428b      	cmp	r3, r1
 8000450:	d92d      	bls.n	80004ae <__udivmoddi4+0x2ae>
 8000452:	3f02      	subs	r7, #2
 8000454:	4429      	add	r1, r5
 8000456:	1acb      	subs	r3, r1, r3
 8000458:	b281      	uxth	r1, r0
 800045a:	fbb3 f0fe 	udiv	r0, r3, lr
 800045e:	fb0e 3310 	mls	r3, lr, r0, r3
 8000462:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000466:	fb00 f308 	mul.w	r3, r0, r8
 800046a:	428b      	cmp	r3, r1
 800046c:	d907      	bls.n	800047e <__udivmoddi4+0x27e>
 800046e:	1869      	adds	r1, r5, r1
 8000470:	f100 3cff 	add.w	ip, r0, #4294967295
 8000474:	d217      	bcs.n	80004a6 <__udivmoddi4+0x2a6>
 8000476:	428b      	cmp	r3, r1
 8000478:	d915      	bls.n	80004a6 <__udivmoddi4+0x2a6>
 800047a:	3802      	subs	r0, #2
 800047c:	4429      	add	r1, r5
 800047e:	1ac9      	subs	r1, r1, r3
 8000480:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000484:	e73b      	b.n	80002fe <__udivmoddi4+0xfe>
 8000486:	4637      	mov	r7, r6
 8000488:	4630      	mov	r0, r6
 800048a:	e709      	b.n	80002a0 <__udivmoddi4+0xa0>
 800048c:	4607      	mov	r7, r0
 800048e:	e6e7      	b.n	8000260 <__udivmoddi4+0x60>
 8000490:	4618      	mov	r0, r3
 8000492:	e6fb      	b.n	800028c <__udivmoddi4+0x8c>
 8000494:	4541      	cmp	r1, r8
 8000496:	d2ab      	bcs.n	80003f0 <__udivmoddi4+0x1f0>
 8000498:	ebb8 0a02 	subs.w	sl, r8, r2
 800049c:	eb69 020e 	sbc.w	r2, r9, lr
 80004a0:	3801      	subs	r0, #1
 80004a2:	4613      	mov	r3, r2
 80004a4:	e7a4      	b.n	80003f0 <__udivmoddi4+0x1f0>
 80004a6:	4660      	mov	r0, ip
 80004a8:	e7e9      	b.n	800047e <__udivmoddi4+0x27e>
 80004aa:	4618      	mov	r0, r3
 80004ac:	e795      	b.n	80003da <__udivmoddi4+0x1da>
 80004ae:	4667      	mov	r7, ip
 80004b0:	e7d1      	b.n	8000456 <__udivmoddi4+0x256>
 80004b2:	4681      	mov	r9, r0
 80004b4:	e77c      	b.n	80003b0 <__udivmoddi4+0x1b0>
 80004b6:	3802      	subs	r0, #2
 80004b8:	442c      	add	r4, r5
 80004ba:	e747      	b.n	800034c <__udivmoddi4+0x14c>
 80004bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80004c0:	442b      	add	r3, r5
 80004c2:	e72f      	b.n	8000324 <__udivmoddi4+0x124>
 80004c4:	4638      	mov	r0, r7
 80004c6:	e708      	b.n	80002da <__udivmoddi4+0xda>
 80004c8:	4637      	mov	r7, r6
 80004ca:	e6e9      	b.n	80002a0 <__udivmoddi4+0xa0>

080004cc <__aeabi_idiv0>:
 80004cc:	4770      	bx	lr
 80004ce:	bf00      	nop

080004d0 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];
  
void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 80004d0:	b480      	push	{r7}
 80004d2:	b085      	sub	sp, #20
 80004d4:	af00      	add	r7, sp, #0
 80004d6:	60f8      	str	r0, [r7, #12]
 80004d8:	60b9      	str	r1, [r7, #8]
 80004da:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 80004dc:	68fb      	ldr	r3, [r7, #12]
 80004de:	4a07      	ldr	r2, [pc, #28]	; (80004fc <vApplicationGetIdleTaskMemory+0x2c>)
 80004e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 80004e2:	68bb      	ldr	r3, [r7, #8]
 80004e4:	4a06      	ldr	r2, [pc, #24]	; (8000500 <vApplicationGetIdleTaskMemory+0x30>)
 80004e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	2280      	movs	r2, #128	; 0x80
 80004ec:	601a      	str	r2, [r3, #0]
  /* place for user code */
}                   
 80004ee:	bf00      	nop
 80004f0:	3714      	adds	r7, #20
 80004f2:	46bd      	mov	sp, r7
 80004f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop
 80004fc:	20000030 	.word	0x20000030
 8000500:	20000084 	.word	0x20000084

08000504 <HAL_TIM_IC_CaptureCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim) {
 8000504:	b580      	push	{r7, lr}
 8000506:	b082      	sub	sp, #8
 8000508:	af00      	add	r7, sp, #0
 800050a:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2) {
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	7f1b      	ldrb	r3, [r3, #28]
 8000510:	2b02      	cmp	r3, #2
 8000512:	d160      	bne.n	80005d6 <HAL_TIM_IC_CaptureCallback+0xd2>
		HAL_TIM_OC_Stop_IT(&htim2, TIM_CHANNEL_1);
 8000514:	2100      	movs	r1, #0
 8000516:	4832      	ldr	r0, [pc, #200]	; (80005e0 <HAL_TIM_IC_CaptureCallback+0xdc>)
 8000518:	f001 fce2 	bl	8001ee0 <HAL_TIM_OC_Stop_IT>
		if (isFirstCaptured) {
 800051c:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800051e:	781b      	ldrb	r3, [r3, #0]
 8000520:	b2db      	uxtb	r3, r3
 8000522:	2b00      	cmp	r3, #0
 8000524:	d00a      	beq.n	800053c <HAL_TIM_IC_CaptureCallback+0x38>
			icValue1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000526:	2104      	movs	r1, #4
 8000528:	6878      	ldr	r0, [r7, #4]
 800052a:	f002 f93d 	bl	80027a8 <HAL_TIM_ReadCapturedValue>
 800052e:	4602      	mov	r2, r0
 8000530:	4b2d      	ldr	r3, [pc, #180]	; (80005e8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000532:	601a      	str	r2, [r3, #0]
			isFirstCaptured = false;
 8000534:	4b2b      	ldr	r3, [pc, #172]	; (80005e4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 8000536:	2200      	movs	r2, #0
 8000538:	701a      	strb	r2, [r3, #0]
			isFirstCaptured = true;
			HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
			if(distance > 30) osSemaphoreRelease(checkDisSemHandle);
		}
	}
}
 800053a:	e04c      	b.n	80005d6 <HAL_TIM_IC_CaptureCallback+0xd2>
		else if (!isFirstCaptured) {
 800053c:	4b29      	ldr	r3, [pc, #164]	; (80005e4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 800053e:	781b      	ldrb	r3, [r3, #0]
 8000540:	b2db      	uxtb	r3, r3
 8000542:	f083 0301 	eor.w	r3, r3, #1
 8000546:	b2db      	uxtb	r3, r3
 8000548:	2b00      	cmp	r3, #0
 800054a:	d044      	beq.n	80005d6 <HAL_TIM_IC_CaptureCallback+0xd2>
			frequency = 84000000 / (htim3.Instance->PSC + 1);
 800054c:	4b27      	ldr	r3, [pc, #156]	; (80005ec <HAL_TIM_IC_CaptureCallback+0xe8>)
 800054e:	681b      	ldr	r3, [r3, #0]
 8000550:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000552:	3301      	adds	r3, #1
 8000554:	4a26      	ldr	r2, [pc, #152]	; (80005f0 <HAL_TIM_IC_CaptureCallback+0xec>)
 8000556:	fbb2 f3f3 	udiv	r3, r2, r3
 800055a:	4a26      	ldr	r2, [pc, #152]	; (80005f4 <HAL_TIM_IC_CaptureCallback+0xf0>)
 800055c:	6013      	str	r3, [r2, #0]
			icValue2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 800055e:	2104      	movs	r1, #4
 8000560:	6878      	ldr	r0, [r7, #4]
 8000562:	f002 f921 	bl	80027a8 <HAL_TIM_ReadCapturedValue>
 8000566:	4602      	mov	r2, r0
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800056a:	601a      	str	r2, [r3, #0]
			if (icValue2 >= icValue1) difference = icValue2 - icValue1;
 800056c:	4b22      	ldr	r3, [pc, #136]	; (80005f8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800056e:	681a      	ldr	r2, [r3, #0]
 8000570:	4b1d      	ldr	r3, [pc, #116]	; (80005e8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000572:	681b      	ldr	r3, [r3, #0]
 8000574:	429a      	cmp	r2, r3
 8000576:	d307      	bcc.n	8000588 <HAL_TIM_IC_CaptureCallback+0x84>
 8000578:	4b1f      	ldr	r3, [pc, #124]	; (80005f8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 800057a:	681a      	ldr	r2, [r3, #0]
 800057c:	4b1a      	ldr	r3, [pc, #104]	; (80005e8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 800057e:	681b      	ldr	r3, [r3, #0]
 8000580:	1ad3      	subs	r3, r2, r3
 8000582:	4a1e      	ldr	r2, [pc, #120]	; (80005fc <HAL_TIM_IC_CaptureCallback+0xf8>)
 8000584:	6013      	str	r3, [r2, #0]
 8000586:	e00a      	b.n	800059e <HAL_TIM_IC_CaptureCallback+0x9a>
			else difference = (htim3.Instance->ARR - icValue1) + icValue2;
 8000588:	4b18      	ldr	r3, [pc, #96]	; (80005ec <HAL_TIM_IC_CaptureCallback+0xe8>)
 800058a:	681b      	ldr	r3, [r3, #0]
 800058c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800058e:	4b16      	ldr	r3, [pc, #88]	; (80005e8 <HAL_TIM_IC_CaptureCallback+0xe4>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	1ad2      	subs	r2, r2, r3
 8000594:	4b18      	ldr	r3, [pc, #96]	; (80005f8 <HAL_TIM_IC_CaptureCallback+0xf4>)
 8000596:	681b      	ldr	r3, [r3, #0]
 8000598:	4413      	add	r3, r2
 800059a:	4a18      	ldr	r2, [pc, #96]	; (80005fc <HAL_TIM_IC_CaptureCallback+0xf8>)
 800059c:	6013      	str	r3, [r2, #0]
			distance = (difference * 17000) / frequency;
 800059e:	4b17      	ldr	r3, [pc, #92]	; (80005fc <HAL_TIM_IC_CaptureCallback+0xf8>)
 80005a0:	681b      	ldr	r3, [r3, #0]
 80005a2:	f244 2268 	movw	r2, #17000	; 0x4268
 80005a6:	fb02 f203 	mul.w	r2, r2, r3
 80005aa:	4b12      	ldr	r3, [pc, #72]	; (80005f4 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80005ac:	681b      	ldr	r3, [r3, #0]
 80005ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80005b2:	4a13      	ldr	r2, [pc, #76]	; (8000600 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80005b4:	6013      	str	r3, [r2, #0]
			isFirstCaptured = true;
 80005b6:	4b0b      	ldr	r3, [pc, #44]	; (80005e4 <HAL_TIM_IC_CaptureCallback+0xe0>)
 80005b8:	2201      	movs	r2, #1
 80005ba:	701a      	strb	r2, [r3, #0]
			HAL_TIM_IC_Stop_IT(&htim3, TIM_CHANNEL_2);
 80005bc:	2104      	movs	r1, #4
 80005be:	480b      	ldr	r0, [pc, #44]	; (80005ec <HAL_TIM_IC_CaptureCallback+0xe8>)
 80005c0:	f001 fdc6 	bl	8002150 <HAL_TIM_IC_Stop_IT>
			if(distance > 30) osSemaphoreRelease(checkDisSemHandle);
 80005c4:	4b0e      	ldr	r3, [pc, #56]	; (8000600 <HAL_TIM_IC_CaptureCallback+0xfc>)
 80005c6:	681b      	ldr	r3, [r3, #0]
 80005c8:	2b1e      	cmp	r3, #30
 80005ca:	d904      	bls.n	80005d6 <HAL_TIM_IC_CaptureCallback+0xd2>
 80005cc:	4b0d      	ldr	r3, [pc, #52]	; (8000604 <HAL_TIM_IC_CaptureCallback+0x100>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	4618      	mov	r0, r3
 80005d2:	f002 ff27 	bl	8003424 <osSemaphoreRelease>
}
 80005d6:	bf00      	nop
 80005d8:	3708      	adds	r7, #8
 80005da:	46bd      	mov	sp, r7
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20004030 	.word	0x20004030
 80005e4:	20000000 	.word	0x20000000
 80005e8:	20000284 	.word	0x20000284
 80005ec:	20003ff0 	.word	0x20003ff0
 80005f0:	0501bd00 	.word	0x0501bd00
 80005f4:	20000290 	.word	0x20000290
 80005f8:	20000288 	.word	0x20000288
 80005fc:	2000028c 	.word	0x2000028c
 8000600:	20000294 	.word	0x20000294
 8000604:	20003fe4 	.word	0x20003fe4

08000608 <checkDistance>:
void checkDistance() {
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
	icValue1 = 0;
 800060c:	4b0a      	ldr	r3, [pc, #40]	; (8000638 <checkDistance+0x30>)
 800060e:	2200      	movs	r2, #0
 8000610:	601a      	str	r2, [r3, #0]
	icValue2 = 0;
 8000612:	4b0a      	ldr	r3, [pc, #40]	; (800063c <checkDistance+0x34>)
 8000614:	2200      	movs	r2, #0
 8000616:	601a      	str	r2, [r3, #0]
	distance = 0;
 8000618:	4b09      	ldr	r3, [pc, #36]	; (8000640 <checkDistance+0x38>)
 800061a:	2200      	movs	r2, #0
 800061c:	601a      	str	r2, [r3, #0]
	isFirstCaptured = true;
 800061e:	4b09      	ldr	r3, [pc, #36]	; (8000644 <checkDistance+0x3c>)
 8000620:	2201      	movs	r2, #1
 8000622:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000624:	2104      	movs	r1, #4
 8000626:	4808      	ldr	r0, [pc, #32]	; (8000648 <checkDistance+0x40>)
 8000628:	f001 fd2a 	bl	8002080 <HAL_TIM_IC_Start_IT>
	HAL_TIM_OC_Start_IT(&htim2, TIM_CHANNEL_1);
 800062c:	2100      	movs	r1, #0
 800062e:	4807      	ldr	r0, [pc, #28]	; (800064c <checkDistance+0x44>)
 8000630:	f001 fbd2 	bl	8001dd8 <HAL_TIM_OC_Start_IT>
}
 8000634:	bf00      	nop
 8000636:	bd80      	pop	{r7, pc}
 8000638:	20000284 	.word	0x20000284
 800063c:	20000288 	.word	0x20000288
 8000640:	20000294 	.word	0x20000294
 8000644:	20000000 	.word	0x20000000
 8000648:	20003ff0 	.word	0x20003ff0
 800064c:	20004030 	.word	0x20004030

08000650 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000650:	b5b0      	push	{r4, r5, r7, lr}
 8000652:	b090      	sub	sp, #64	; 0x40
 8000654:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000656:	f000 fbc9 	bl	8000dec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800065a:	f000 f845 	bl	80006e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800065e:	f000 f993 	bl	8000988 <MX_GPIO_Init>
  MX_TIM2_Init();
 8000662:	f000 f8ab 	bl	80007bc <MX_TIM2_Init>
  MX_TIM3_Init();
 8000666:	f000 f91d 	bl	80008a4 <MX_TIM3_Init>
  /* add mutexes, ... */
  /* USER CODE END RTOS_MUTEX */

  /* Create the semaphores(s) */
  /* definition and creation of checkDisSem */
  osSemaphoreDef(checkDisSem);
 800066a:	2300      	movs	r3, #0
 800066c:	63bb      	str	r3, [r7, #56]	; 0x38
 800066e:	2300      	movs	r3, #0
 8000670:	63fb      	str	r3, [r7, #60]	; 0x3c
  checkDisSemHandle = osSemaphoreCreate(osSemaphore(checkDisSem), 1);
 8000672:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000676:	2101      	movs	r1, #1
 8000678:	4618      	mov	r0, r3
 800067a:	f002 fe52 	bl	8003322 <osSemaphoreCreate>
 800067e:	4602      	mov	r2, r0
 8000680:	4b14      	ldr	r3, [pc, #80]	; (80006d4 <main+0x84>)
 8000682:	601a      	str	r2, [r3, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of main */
  osThreadDef(main, StartMain, osPriorityNormal, 0, 128);
 8000684:	4b14      	ldr	r3, [pc, #80]	; (80006d8 <main+0x88>)
 8000686:	f107 041c 	add.w	r4, r7, #28
 800068a:	461d      	mov	r5, r3
 800068c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800068e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000690:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000694:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  mainHandle = osThreadCreate(osThread(main), NULL);
 8000698:	f107 031c 	add.w	r3, r7, #28
 800069c:	2100      	movs	r1, #0
 800069e:	4618      	mov	r0, r3
 80006a0:	f002 fddf 	bl	8003262 <osThreadCreate>
 80006a4:	4602      	mov	r2, r0
 80006a6:	4b0d      	ldr	r3, [pc, #52]	; (80006dc <main+0x8c>)
 80006a8:	601a      	str	r2, [r3, #0]

  /* definition and creation of checkDistance */
  osThreadDef(checkDistance, StartCheckDistance, osPriorityBelowNormal, 0, 128);
 80006aa:	4b0d      	ldr	r3, [pc, #52]	; (80006e0 <main+0x90>)
 80006ac:	463c      	mov	r4, r7
 80006ae:	461d      	mov	r5, r3
 80006b0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80006b2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80006b4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 80006b8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  checkDistanceHandle = osThreadCreate(osThread(checkDistance), NULL);
 80006bc:	463b      	mov	r3, r7
 80006be:	2100      	movs	r1, #0
 80006c0:	4618      	mov	r0, r3
 80006c2:	f002 fdce 	bl	8003262 <osThreadCreate>
 80006c6:	4602      	mov	r2, r0
 80006c8:	4b06      	ldr	r3, [pc, #24]	; (80006e4 <main+0x94>)
 80006ca:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80006cc:	f002 fdc2 	bl	8003254 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80006d0:	e7fe      	b.n	80006d0 <main+0x80>
 80006d2:	bf00      	nop
 80006d4:	20003fe4 	.word	0x20003fe4
 80006d8:	0800595c 	.word	0x0800595c
 80006dc:	20003fe8 	.word	0x20003fe8
 80006e0:	08005988 	.word	0x08005988
 80006e4:	20003fec 	.word	0x20003fec

080006e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006e8:	b580      	push	{r7, lr}
 80006ea:	b094      	sub	sp, #80	; 0x50
 80006ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ee:	f107 0320 	add.w	r3, r7, #32
 80006f2:	2230      	movs	r2, #48	; 0x30
 80006f4:	2100      	movs	r1, #0
 80006f6:	4618      	mov	r0, r3
 80006f8:	f005 f917 	bl	800592a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006fc:	f107 030c 	add.w	r3, r7, #12
 8000700:	2200      	movs	r2, #0
 8000702:	601a      	str	r2, [r3, #0]
 8000704:	605a      	str	r2, [r3, #4]
 8000706:	609a      	str	r2, [r3, #8]
 8000708:	60da      	str	r2, [r3, #12]
 800070a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800070c:	2300      	movs	r3, #0
 800070e:	60bb      	str	r3, [r7, #8]
 8000710:	4b28      	ldr	r3, [pc, #160]	; (80007b4 <SystemClock_Config+0xcc>)
 8000712:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000714:	4a27      	ldr	r2, [pc, #156]	; (80007b4 <SystemClock_Config+0xcc>)
 8000716:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800071a:	6413      	str	r3, [r2, #64]	; 0x40
 800071c:	4b25      	ldr	r3, [pc, #148]	; (80007b4 <SystemClock_Config+0xcc>)
 800071e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000720:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000724:	60bb      	str	r3, [r7, #8]
 8000726:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000728:	2300      	movs	r3, #0
 800072a:	607b      	str	r3, [r7, #4]
 800072c:	4b22      	ldr	r3, [pc, #136]	; (80007b8 <SystemClock_Config+0xd0>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a21      	ldr	r2, [pc, #132]	; (80007b8 <SystemClock_Config+0xd0>)
 8000732:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000736:	6013      	str	r3, [r2, #0]
 8000738:	4b1f      	ldr	r3, [pc, #124]	; (80007b8 <SystemClock_Config+0xd0>)
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000740:	607b      	str	r3, [r7, #4]
 8000742:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000744:	2302      	movs	r3, #2
 8000746:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000748:	2301      	movs	r3, #1
 800074a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800074c:	2310      	movs	r3, #16
 800074e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000750:	2302      	movs	r3, #2
 8000752:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000754:	2300      	movs	r3, #0
 8000756:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000758:	2308      	movs	r3, #8
 800075a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800075c:	23a8      	movs	r3, #168	; 0xa8
 800075e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000760:	2302      	movs	r3, #2
 8000762:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000764:	2304      	movs	r3, #4
 8000766:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000768:	f107 0320 	add.w	r3, r7, #32
 800076c:	4618      	mov	r0, r3
 800076e:	f000 fe2f 	bl	80013d0 <HAL_RCC_OscConfig>
 8000772:	4603      	mov	r3, r0
 8000774:	2b00      	cmp	r3, #0
 8000776:	d001      	beq.n	800077c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000778:	f000 f98e 	bl	8000a98 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800077c:	230f      	movs	r3, #15
 800077e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000780:	2302      	movs	r3, #2
 8000782:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000784:	2300      	movs	r3, #0
 8000786:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000788:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800078c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800078e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000792:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000794:	f107 030c 	add.w	r3, r7, #12
 8000798:	2105      	movs	r1, #5
 800079a:	4618      	mov	r0, r3
 800079c:	f001 f888 	bl	80018b0 <HAL_RCC_ClockConfig>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d001      	beq.n	80007aa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80007a6:	f000 f977 	bl	8000a98 <Error_Handler>
  }
}
 80007aa:	bf00      	nop
 80007ac:	3750      	adds	r7, #80	; 0x50
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bd80      	pop	{r7, pc}
 80007b2:	bf00      	nop
 80007b4:	40023800 	.word	0x40023800
 80007b8:	40007000 	.word	0x40007000

080007bc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80007bc:	b580      	push	{r7, lr}
 80007be:	b08e      	sub	sp, #56	; 0x38
 80007c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80007c2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c6:	2200      	movs	r2, #0
 80007c8:	601a      	str	r2, [r3, #0]
 80007ca:	605a      	str	r2, [r3, #4]
 80007cc:	609a      	str	r2, [r3, #8]
 80007ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80007d0:	f107 0320 	add.w	r3, r7, #32
 80007d4:	2200      	movs	r2, #0
 80007d6:	601a      	str	r2, [r3, #0]
 80007d8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80007da:	1d3b      	adds	r3, r7, #4
 80007dc:	2200      	movs	r2, #0
 80007de:	601a      	str	r2, [r3, #0]
 80007e0:	605a      	str	r2, [r3, #4]
 80007e2:	609a      	str	r2, [r3, #8]
 80007e4:	60da      	str	r2, [r3, #12]
 80007e6:	611a      	str	r2, [r3, #16]
 80007e8:	615a      	str	r2, [r3, #20]
 80007ea:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80007ec:	4b2c      	ldr	r3, [pc, #176]	; (80008a0 <MX_TIM2_Init+0xe4>)
 80007ee:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80007f2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1 - 1;
 80007f4:	4b2a      	ldr	r3, [pc, #168]	; (80008a0 <MX_TIM2_Init+0xe4>)
 80007f6:	2200      	movs	r2, #0
 80007f8:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80007fa:	4b29      	ldr	r3, [pc, #164]	; (80008a0 <MX_TIM2_Init+0xe4>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 84 - 1;
 8000800:	4b27      	ldr	r3, [pc, #156]	; (80008a0 <MX_TIM2_Init+0xe4>)
 8000802:	2253      	movs	r2, #83	; 0x53
 8000804:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000806:	4b26      	ldr	r3, [pc, #152]	; (80008a0 <MX_TIM2_Init+0xe4>)
 8000808:	2200      	movs	r2, #0
 800080a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800080c:	4b24      	ldr	r3, [pc, #144]	; (80008a0 <MX_TIM2_Init+0xe4>)
 800080e:	2200      	movs	r2, #0
 8000810:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000812:	4823      	ldr	r0, [pc, #140]	; (80008a0 <MX_TIM2_Init+0xe4>)
 8000814:	f001 fa5c 	bl	8001cd0 <HAL_TIM_Base_Init>
 8000818:	4603      	mov	r3, r0
 800081a:	2b00      	cmp	r3, #0
 800081c:	d001      	beq.n	8000822 <MX_TIM2_Init+0x66>
  {
    Error_Handler();
 800081e:	f000 f93b 	bl	8000a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000822:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000826:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000828:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800082c:	4619      	mov	r1, r3
 800082e:	481c      	ldr	r0, [pc, #112]	; (80008a0 <MX_TIM2_Init+0xe4>)
 8000830:	f001 ff02 	bl	8002638 <HAL_TIM_ConfigClockSource>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM2_Init+0x82>
  {
    Error_Handler();
 800083a:	f000 f92d 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_OC_Init(&htim2) != HAL_OK)
 800083e:	4818      	ldr	r0, [pc, #96]	; (80008a0 <MX_TIM2_Init+0xe4>)
 8000840:	f001 fa95 	bl	8001d6e <HAL_TIM_OC_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_TIM2_Init+0x92>
  {
    Error_Handler();
 800084a:	f000 f925 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800084e:	2300      	movs	r3, #0
 8000850:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000852:	2300      	movs	r3, #0
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000856:	f107 0320 	add.w	r3, r7, #32
 800085a:	4619      	mov	r1, r3
 800085c:	4810      	ldr	r0, [pc, #64]	; (80008a0 <MX_TIM2_Init+0xe4>)
 800085e:	f002 fc3f 	bl	80030e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000862:	4603      	mov	r3, r0
 8000864:	2b00      	cmp	r3, #0
 8000866:	d001      	beq.n	800086c <MX_TIM2_Init+0xb0>
  {
    Error_Handler();
 8000868:	f000 f916 	bl	8000a98 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_TOGGLE;
 800086c:	2330      	movs	r3, #48	; 0x30
 800086e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8000870:	230a      	movs	r3, #10
 8000872:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000874:	2300      	movs	r3, #0
 8000876:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_OC_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	2200      	movs	r2, #0
 8000880:	4619      	mov	r1, r3
 8000882:	4807      	ldr	r0, [pc, #28]	; (80008a0 <MX_TIM2_Init+0xe4>)
 8000884:	f001 fddc 	bl	8002440 <HAL_TIM_OC_ConfigChannel>
 8000888:	4603      	mov	r3, r0
 800088a:	2b00      	cmp	r3, #0
 800088c:	d001      	beq.n	8000892 <MX_TIM2_Init+0xd6>
  {
    Error_Handler();
 800088e:	f000 f903 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000892:	4803      	ldr	r0, [pc, #12]	; (80008a0 <MX_TIM2_Init+0xe4>)
 8000894:	f000 f9a0 	bl	8000bd8 <HAL_TIM_MspPostInit>

}
 8000898:	bf00      	nop
 800089a:	3738      	adds	r7, #56	; 0x38
 800089c:	46bd      	mov	sp, r7
 800089e:	bd80      	pop	{r7, pc}
 80008a0:	20004030 	.word	0x20004030

080008a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80008a4:	b580      	push	{r7, lr}
 80008a6:	b08a      	sub	sp, #40	; 0x28
 80008a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80008aa:	f107 0318 	add.w	r3, r7, #24
 80008ae:	2200      	movs	r2, #0
 80008b0:	601a      	str	r2, [r3, #0]
 80008b2:	605a      	str	r2, [r3, #4]
 80008b4:	609a      	str	r2, [r3, #8]
 80008b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80008b8:	f107 0310 	add.w	r3, r7, #16
 80008bc:	2200      	movs	r2, #0
 80008be:	601a      	str	r2, [r3, #0]
 80008c0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80008c2:	463b      	mov	r3, r7
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
 80008c8:	605a      	str	r2, [r3, #4]
 80008ca:	609a      	str	r2, [r3, #8]
 80008cc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80008ce:	4b2c      	ldr	r3, [pc, #176]	; (8000980 <MX_TIM3_Init+0xdc>)
 80008d0:	4a2c      	ldr	r2, [pc, #176]	; (8000984 <MX_TIM3_Init+0xe0>)
 80008d2:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1281 - 1;
 80008d4:	4b2a      	ldr	r3, [pc, #168]	; (8000980 <MX_TIM3_Init+0xdc>)
 80008d6:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 80008da:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008dc:	4b28      	ldr	r3, [pc, #160]	; (8000980 <MX_TIM3_Init+0xdc>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535 - 1;
 80008e2:	4b27      	ldr	r3, [pc, #156]	; (8000980 <MX_TIM3_Init+0xdc>)
 80008e4:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80008e8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ea:	4b25      	ldr	r3, [pc, #148]	; (8000980 <MX_TIM3_Init+0xdc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008f0:	4b23      	ldr	r3, [pc, #140]	; (8000980 <MX_TIM3_Init+0xdc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80008f6:	4822      	ldr	r0, [pc, #136]	; (8000980 <MX_TIM3_Init+0xdc>)
 80008f8:	f001 f9ea 	bl	8001cd0 <HAL_TIM_Base_Init>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_TIM3_Init+0x62>
  {
    Error_Handler();
 8000902:	f000 f8c9 	bl	8000a98 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000906:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800090a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800090c:	f107 0318 	add.w	r3, r7, #24
 8000910:	4619      	mov	r1, r3
 8000912:	481b      	ldr	r0, [pc, #108]	; (8000980 <MX_TIM3_Init+0xdc>)
 8000914:	f001 fe90 	bl	8002638 <HAL_TIM_ConfigClockSource>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 800091e:	f000 f8bb 	bl	8000a98 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 8000922:	4817      	ldr	r0, [pc, #92]	; (8000980 <MX_TIM3_Init+0xdc>)
 8000924:	f001 fb76 	bl	8002014 <HAL_TIM_IC_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_TIM3_Init+0x8e>
  {
    Error_Handler();
 800092e:	f000 f8b3 	bl	8000a98 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000932:	2300      	movs	r3, #0
 8000934:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000936:	2300      	movs	r3, #0
 8000938:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800093a:	f107 0310 	add.w	r3, r7, #16
 800093e:	4619      	mov	r1, r3
 8000940:	480f      	ldr	r0, [pc, #60]	; (8000980 <MX_TIM3_Init+0xdc>)
 8000942:	f002 fbcd 	bl	80030e0 <HAL_TIMEx_MasterConfigSynchronization>
 8000946:	4603      	mov	r3, r0
 8000948:	2b00      	cmp	r3, #0
 800094a:	d001      	beq.n	8000950 <MX_TIM3_Init+0xac>
  {
    Error_Handler();
 800094c:	f000 f8a4 	bl	8000a98 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000950:	230a      	movs	r3, #10
 8000952:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000954:	2301      	movs	r3, #1
 8000956:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000958:	2300      	movs	r3, #0
 800095a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800095c:	2300      	movs	r3, #0
 800095e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8000960:	463b      	mov	r3, r7
 8000962:	2204      	movs	r2, #4
 8000964:	4619      	mov	r1, r3
 8000966:	4806      	ldr	r0, [pc, #24]	; (8000980 <MX_TIM3_Init+0xdc>)
 8000968:	f001 fdca 	bl	8002500 <HAL_TIM_IC_ConfigChannel>
 800096c:	4603      	mov	r3, r0
 800096e:	2b00      	cmp	r3, #0
 8000970:	d001      	beq.n	8000976 <MX_TIM3_Init+0xd2>
  {
    Error_Handler();
 8000972:	f000 f891 	bl	8000a98 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000976:	bf00      	nop
 8000978:	3728      	adds	r7, #40	; 0x28
 800097a:	46bd      	mov	sp, r7
 800097c:	bd80      	pop	{r7, pc}
 800097e:	bf00      	nop
 8000980:	20003ff0 	.word	0x20003ff0
 8000984:	40000400 	.word	0x40000400

08000988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	b088      	sub	sp, #32
 800098c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098e:	f107 030c 	add.w	r3, r7, #12
 8000992:	2200      	movs	r2, #0
 8000994:	601a      	str	r2, [r3, #0]
 8000996:	605a      	str	r2, [r3, #4]
 8000998:	609a      	str	r2, [r3, #8]
 800099a:	60da      	str	r2, [r3, #12]
 800099c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800099e:	2300      	movs	r3, #0
 80009a0:	60bb      	str	r3, [r7, #8]
 80009a2:	4b18      	ldr	r3, [pc, #96]	; (8000a04 <MX_GPIO_Init+0x7c>)
 80009a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a6:	4a17      	ldr	r2, [pc, #92]	; (8000a04 <MX_GPIO_Init+0x7c>)
 80009a8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009ac:	6313      	str	r3, [r2, #48]	; 0x30
 80009ae:	4b15      	ldr	r3, [pc, #84]	; (8000a04 <MX_GPIO_Init+0x7c>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009b6:	60bb      	str	r3, [r7, #8]
 80009b8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	607b      	str	r3, [r7, #4]
 80009be:	4b11      	ldr	r3, [pc, #68]	; (8000a04 <MX_GPIO_Init+0x7c>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a10      	ldr	r2, [pc, #64]	; (8000a04 <MX_GPIO_Init+0x7c>)
 80009c4:	f043 0301 	orr.w	r3, r3, #1
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b0e      	ldr	r3, [pc, #56]	; (8000a04 <MX_GPIO_Init+0x7c>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0301 	and.w	r3, r3, #1
 80009d2:	607b      	str	r3, [r7, #4]
 80009d4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(led_GPIO_Port, led_Pin, GPIO_PIN_RESET);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2140      	movs	r1, #64	; 0x40
 80009da:	480b      	ldr	r0, [pc, #44]	; (8000a08 <MX_GPIO_Init+0x80>)
 80009dc:	f000 fcc4 	bl	8001368 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : led_Pin */
  GPIO_InitStruct.Pin = led_Pin;
 80009e0:	2340      	movs	r3, #64	; 0x40
 80009e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009e4:	2301      	movs	r3, #1
 80009e6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009e8:	2302      	movs	r3, #2
 80009ea:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ec:	2300      	movs	r3, #0
 80009ee:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(led_GPIO_Port, &GPIO_InitStruct);
 80009f0:	f107 030c 	add.w	r3, r7, #12
 80009f4:	4619      	mov	r1, r3
 80009f6:	4804      	ldr	r0, [pc, #16]	; (8000a08 <MX_GPIO_Init+0x80>)
 80009f8:	f000 fb1c 	bl	8001034 <HAL_GPIO_Init>

}
 80009fc:	bf00      	nop
 80009fe:	3720      	adds	r7, #32
 8000a00:	46bd      	mov	sp, r7
 8000a02:	bd80      	pop	{r7, pc}
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020000 	.word	0x40020000

08000a0c <StartMain>:
  * @param  argument: Not used 
  * @retval None
  */
/* USER CODE END Header_StartMain */
void StartMain(void const * argument)
{
 8000a0c:	b580      	push	{r7, lr}
 8000a0e:	b082      	sub	sp, #8
 8000a10:	af00      	add	r7, sp, #0
 8000a12:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osSemaphoreWait(checkDisSemHandle, osWaitForever);
 8000a14:	4b0b      	ldr	r3, [pc, #44]	; (8000a44 <StartMain+0x38>)
 8000a16:	681b      	ldr	r3, [r3, #0]
 8000a18:	f04f 31ff 	mov.w	r1, #4294967295
 8000a1c:	4618      	mov	r0, r3
 8000a1e:	f002 fcb3 	bl	8003388 <osSemaphoreWait>
	  HAL_GPIO_TogglePin(led_GPIO_Port, led_Pin);
 8000a22:	2140      	movs	r1, #64	; 0x40
 8000a24:	4808      	ldr	r0, [pc, #32]	; (8000a48 <StartMain+0x3c>)
 8000a26:	f000 fcb8 	bl	800139a <HAL_GPIO_TogglePin>
	  osDelay(100);
 8000a2a:	2064      	movs	r0, #100	; 0x64
 8000a2c:	f002 fc65 	bl	80032fa <osDelay>
	  if(distance > 30) osSemaphoreRelease(checkDisSemHandle);
 8000a30:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <StartMain+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	2b1e      	cmp	r3, #30
 8000a36:	d9ed      	bls.n	8000a14 <StartMain+0x8>
 8000a38:	4b02      	ldr	r3, [pc, #8]	; (8000a44 <StartMain+0x38>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f002 fcf1 	bl	8003424 <osSemaphoreRelease>
	  osSemaphoreWait(checkDisSemHandle, osWaitForever);
 8000a42:	e7e7      	b.n	8000a14 <StartMain+0x8>
 8000a44:	20003fe4 	.word	0x20003fe4
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	20000294 	.word	0x20000294

08000a50 <StartCheckDistance>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCheckDistance */
void StartCheckDistance(void const * argument)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	b082      	sub	sp, #8
 8000a54:	af00      	add	r7, sp, #0
 8000a56:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCheckDistance */
  /* Infinite loop */
  for(;;)
  {
	  if(isFirstCaptured) checkDistance();
 8000a58:	4b05      	ldr	r3, [pc, #20]	; (8000a70 <StartCheckDistance+0x20>)
 8000a5a:	781b      	ldrb	r3, [r3, #0]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <StartCheckDistance+0x16>
 8000a62:	f7ff fdd1 	bl	8000608 <checkDistance>
	  osDelay(100);
 8000a66:	2064      	movs	r0, #100	; 0x64
 8000a68:	f002 fc47 	bl	80032fa <osDelay>
	  if(isFirstCaptured) checkDistance();
 8000a6c:	e7f4      	b.n	8000a58 <StartCheckDistance+0x8>
 8000a6e:	bf00      	nop
 8000a70:	20000000 	.word	0x20000000

08000a74 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000a74:	b580      	push	{r7, lr}
 8000a76:	b082      	sub	sp, #8
 8000a78:	af00      	add	r7, sp, #0
 8000a7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	681b      	ldr	r3, [r3, #0]
 8000a80:	4a04      	ldr	r2, [pc, #16]	; (8000a94 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000a82:	4293      	cmp	r3, r2
 8000a84:	d101      	bne.n	8000a8a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000a86:	f000 f9d3 	bl	8000e30 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000a8a:	bf00      	nop
 8000a8c:	3708      	adds	r7, #8
 8000a8e:	46bd      	mov	sp, r7
 8000a90:	bd80      	pop	{r7, pc}
 8000a92:	bf00      	nop
 8000a94:	40001000 	.word	0x40001000

08000a98 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8000a9c:	bf00      	nop
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa4:	4770      	bx	lr
	...

08000aa8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000aa8:	b580      	push	{r7, lr}
 8000aaa:	b082      	sub	sp, #8
 8000aac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	607b      	str	r3, [r7, #4]
 8000ab2:	4b12      	ldr	r3, [pc, #72]	; (8000afc <HAL_MspInit+0x54>)
 8000ab4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ab6:	4a11      	ldr	r2, [pc, #68]	; (8000afc <HAL_MspInit+0x54>)
 8000ab8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000abc:	6453      	str	r3, [r2, #68]	; 0x44
 8000abe:	4b0f      	ldr	r3, [pc, #60]	; (8000afc <HAL_MspInit+0x54>)
 8000ac0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ac2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ac6:	607b      	str	r3, [r7, #4]
 8000ac8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	603b      	str	r3, [r7, #0]
 8000ace:	4b0b      	ldr	r3, [pc, #44]	; (8000afc <HAL_MspInit+0x54>)
 8000ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad2:	4a0a      	ldr	r2, [pc, #40]	; (8000afc <HAL_MspInit+0x54>)
 8000ad4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ad8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ada:	4b08      	ldr	r3, [pc, #32]	; (8000afc <HAL_MspInit+0x54>)
 8000adc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ade:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae2:	603b      	str	r3, [r7, #0]
 8000ae4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	210f      	movs	r1, #15
 8000aea:	f06f 0001 	mvn.w	r0, #1
 8000aee:	f000 fa77 	bl	8000fe0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000af2:	bf00      	nop
 8000af4:	3708      	adds	r7, #8
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40023800 	.word	0x40023800

08000b00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000b00:	b580      	push	{r7, lr}
 8000b02:	b08a      	sub	sp, #40	; 0x28
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b08:	f107 0314 	add.w	r3, r7, #20
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	601a      	str	r2, [r3, #0]
 8000b10:	605a      	str	r2, [r3, #4]
 8000b12:	609a      	str	r2, [r3, #8]
 8000b14:	60da      	str	r2, [r3, #12]
 8000b16:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000b20:	d116      	bne.n	8000b50 <HAL_TIM_Base_MspInit+0x50>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000b22:	2300      	movs	r3, #0
 8000b24:	613b      	str	r3, [r7, #16]
 8000b26:	4b29      	ldr	r3, [pc, #164]	; (8000bcc <HAL_TIM_Base_MspInit+0xcc>)
 8000b28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b2a:	4a28      	ldr	r2, [pc, #160]	; (8000bcc <HAL_TIM_Base_MspInit+0xcc>)
 8000b2c:	f043 0301 	orr.w	r3, r3, #1
 8000b30:	6413      	str	r3, [r2, #64]	; 0x40
 8000b32:	4b26      	ldr	r3, [pc, #152]	; (8000bcc <HAL_TIM_Base_MspInit+0xcc>)
 8000b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b36:	f003 0301 	and.w	r3, r3, #1
 8000b3a:	613b      	str	r3, [r7, #16]
 8000b3c:	693b      	ldr	r3, [r7, #16]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 10, 0);
 8000b3e:	2200      	movs	r2, #0
 8000b40:	210a      	movs	r1, #10
 8000b42:	201c      	movs	r0, #28
 8000b44:	f000 fa4c 	bl	8000fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000b48:	201c      	movs	r0, #28
 8000b4a:	f000 fa65 	bl	8001018 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000b4e:	e038      	b.n	8000bc2 <HAL_TIM_Base_MspInit+0xc2>
  else if(htim_base->Instance==TIM3)
 8000b50:	687b      	ldr	r3, [r7, #4]
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	4a1e      	ldr	r2, [pc, #120]	; (8000bd0 <HAL_TIM_Base_MspInit+0xd0>)
 8000b56:	4293      	cmp	r3, r2
 8000b58:	d133      	bne.n	8000bc2 <HAL_TIM_Base_MspInit+0xc2>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	60fb      	str	r3, [r7, #12]
 8000b5e:	4b1b      	ldr	r3, [pc, #108]	; (8000bcc <HAL_TIM_Base_MspInit+0xcc>)
 8000b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b62:	4a1a      	ldr	r2, [pc, #104]	; (8000bcc <HAL_TIM_Base_MspInit+0xcc>)
 8000b64:	f043 0302 	orr.w	r3, r3, #2
 8000b68:	6413      	str	r3, [r2, #64]	; 0x40
 8000b6a:	4b18      	ldr	r3, [pc, #96]	; (8000bcc <HAL_TIM_Base_MspInit+0xcc>)
 8000b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b6e:	f003 0302 	and.w	r3, r3, #2
 8000b72:	60fb      	str	r3, [r7, #12]
 8000b74:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b76:	2300      	movs	r3, #0
 8000b78:	60bb      	str	r3, [r7, #8]
 8000b7a:	4b14      	ldr	r3, [pc, #80]	; (8000bcc <HAL_TIM_Base_MspInit+0xcc>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a13      	ldr	r2, [pc, #76]	; (8000bcc <HAL_TIM_Base_MspInit+0xcc>)
 8000b80:	f043 0301 	orr.w	r3, r3, #1
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b11      	ldr	r3, [pc, #68]	; (8000bcc <HAL_TIM_Base_MspInit+0xcc>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0301 	and.w	r3, r3, #1
 8000b8e:	60bb      	str	r3, [r7, #8]
 8000b90:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = Echo_Pin;
 8000b92:	2380      	movs	r3, #128	; 0x80
 8000b94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b96:	2302      	movs	r3, #2
 8000b98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000b9a:	2302      	movs	r3, #2
 8000b9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b9e:	2303      	movs	r3, #3
 8000ba0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8000ba2:	2302      	movs	r3, #2
 8000ba4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Echo_GPIO_Port, &GPIO_InitStruct);
 8000ba6:	f107 0314 	add.w	r3, r7, #20
 8000baa:	4619      	mov	r1, r3
 8000bac:	4809      	ldr	r0, [pc, #36]	; (8000bd4 <HAL_TIM_Base_MspInit+0xd4>)
 8000bae:	f000 fa41 	bl	8001034 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 5, 0);
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	2105      	movs	r1, #5
 8000bb6:	201d      	movs	r0, #29
 8000bb8:	f000 fa12 	bl	8000fe0 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000bbc:	201d      	movs	r0, #29
 8000bbe:	f000 fa2b 	bl	8001018 <HAL_NVIC_EnableIRQ>
}
 8000bc2:	bf00      	nop
 8000bc4:	3728      	adds	r7, #40	; 0x28
 8000bc6:	46bd      	mov	sp, r7
 8000bc8:	bd80      	pop	{r7, pc}
 8000bca:	bf00      	nop
 8000bcc:	40023800 	.word	0x40023800
 8000bd0:	40000400 	.word	0x40000400
 8000bd4:	40020000 	.word	0x40020000

08000bd8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	b088      	sub	sp, #32
 8000bdc:	af00      	add	r7, sp, #0
 8000bde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000be0:	f107 030c 	add.w	r3, r7, #12
 8000be4:	2200      	movs	r2, #0
 8000be6:	601a      	str	r2, [r3, #0]
 8000be8:	605a      	str	r2, [r3, #4]
 8000bea:	609a      	str	r2, [r3, #8]
 8000bec:	60da      	str	r2, [r3, #12]
 8000bee:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000bf0:	687b      	ldr	r3, [r7, #4]
 8000bf2:	681b      	ldr	r3, [r3, #0]
 8000bf4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000bf8:	d11d      	bne.n	8000c36 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bfa:	2300      	movs	r3, #0
 8000bfc:	60bb      	str	r3, [r7, #8]
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <HAL_TIM_MspPostInit+0x68>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	4a0f      	ldr	r2, [pc, #60]	; (8000c40 <HAL_TIM_MspPostInit+0x68>)
 8000c04:	f043 0301 	orr.w	r3, r3, #1
 8000c08:	6313      	str	r3, [r2, #48]	; 0x30
 8000c0a:	4b0d      	ldr	r3, [pc, #52]	; (8000c40 <HAL_TIM_MspPostInit+0x68>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	f003 0301 	and.w	r3, r3, #1
 8000c12:	60bb      	str	r3, [r7, #8]
 8000c14:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration    
    PA0-WKUP     ------> TIM2_CH1 
    */
    GPIO_InitStruct.Pin = Trig_Pin;
 8000c16:	2301      	movs	r3, #1
 8000c18:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c1a:	2302      	movs	r3, #2
 8000c1c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000c1e:	2302      	movs	r3, #2
 8000c20:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c22:	2303      	movs	r3, #3
 8000c24:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000c26:	2301      	movs	r3, #1
 8000c28:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(Trig_GPIO_Port, &GPIO_InitStruct);
 8000c2a:	f107 030c 	add.w	r3, r7, #12
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <HAL_TIM_MspPostInit+0x6c>)
 8000c32:	f000 f9ff 	bl	8001034 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000c36:	bf00      	nop
 8000c38:	3720      	adds	r7, #32
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40023800 	.word	0x40023800
 8000c44:	40020000 	.word	0x40020000

08000c48 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b08c      	sub	sp, #48	; 0x30
 8000c4c:	af00      	add	r7, sp, #0
 8000c4e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c50:	2300      	movs	r3, #0
 8000c52:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8000c54:	2300      	movs	r3, #0
 8000c56:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM6 IRQ priority */
  HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority ,0); 
 8000c58:	2200      	movs	r2, #0
 8000c5a:	6879      	ldr	r1, [r7, #4]
 8000c5c:	2036      	movs	r0, #54	; 0x36
 8000c5e:	f000 f9bf 	bl	8000fe0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM6 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn); 
 8000c62:	2036      	movs	r0, #54	; 0x36
 8000c64:	f000 f9d8 	bl	8001018 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c68:	2300      	movs	r3, #0
 8000c6a:	60fb      	str	r3, [r7, #12]
 8000c6c:	4b1f      	ldr	r3, [pc, #124]	; (8000cec <HAL_InitTick+0xa4>)
 8000c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c70:	4a1e      	ldr	r2, [pc, #120]	; (8000cec <HAL_InitTick+0xa4>)
 8000c72:	f043 0310 	orr.w	r3, r3, #16
 8000c76:	6413      	str	r3, [r2, #64]	; 0x40
 8000c78:	4b1c      	ldr	r3, [pc, #112]	; (8000cec <HAL_InitTick+0xa4>)
 8000c7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c7c:	f003 0310 	and.w	r3, r3, #16
 8000c80:	60fb      	str	r3, [r7, #12]
 8000c82:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000c84:	f107 0210 	add.w	r2, r7, #16
 8000c88:	f107 0314 	add.w	r3, r7, #20
 8000c8c:	4611      	mov	r1, r2
 8000c8e:	4618      	mov	r0, r3
 8000c90:	f000 ffec 	bl	8001c6c <HAL_RCC_GetClockConfig>
  
  /* Compute TIM6 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8000c94:	f000 ffd6 	bl	8001c44 <HAL_RCC_GetPCLK1Freq>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	005b      	lsls	r3, r3, #1
 8000c9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8000c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000ca0:	4a13      	ldr	r2, [pc, #76]	; (8000cf0 <HAL_InitTick+0xa8>)
 8000ca2:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca6:	0c9b      	lsrs	r3, r3, #18
 8000ca8:	3b01      	subs	r3, #1
 8000caa:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cac:	4b11      	ldr	r3, [pc, #68]	; (8000cf4 <HAL_InitTick+0xac>)
 8000cae:	4a12      	ldr	r2, [pc, #72]	; (8000cf8 <HAL_InitTick+0xb0>)
 8000cb0:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000 / 1000) - 1;
 8000cb2:	4b10      	ldr	r3, [pc, #64]	; (8000cf4 <HAL_InitTick+0xac>)
 8000cb4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cb8:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cba:	4a0e      	ldr	r2, [pc, #56]	; (8000cf4 <HAL_InitTick+0xac>)
 8000cbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cbe:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cc0:	4b0c      	ldr	r3, [pc, #48]	; (8000cf4 <HAL_InitTick+0xac>)
 8000cc2:	2200      	movs	r2, #0
 8000cc4:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cc6:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_InitTick+0xac>)
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim6) == HAL_OK)
 8000ccc:	4809      	ldr	r0, [pc, #36]	; (8000cf4 <HAL_InitTick+0xac>)
 8000cce:	f000 ffff 	bl	8001cd0 <HAL_TIM_Base_Init>
 8000cd2:	4603      	mov	r3, r0
 8000cd4:	2b00      	cmp	r3, #0
 8000cd6:	d104      	bne.n	8000ce2 <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim6);
 8000cd8:	4806      	ldr	r0, [pc, #24]	; (8000cf4 <HAL_InitTick+0xac>)
 8000cda:	f001 f824 	bl	8001d26 <HAL_TIM_Base_Start_IT>
 8000cde:	4603      	mov	r3, r0
 8000ce0:	e000      	b.n	8000ce4 <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8000ce2:	2301      	movs	r3, #1
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	3730      	adds	r7, #48	; 0x30
 8000ce8:	46bd      	mov	sp, r7
 8000cea:	bd80      	pop	{r7, pc}
 8000cec:	40023800 	.word	0x40023800
 8000cf0:	431bde83 	.word	0x431bde83
 8000cf4:	20004070 	.word	0x20004070
 8000cf8:	40001000 	.word	0x40001000

08000cfc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8000d00:	bf00      	nop
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d0e:	e7fe      	b.n	8000d0e <HardFault_Handler+0x4>

08000d10 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d10:	b480      	push	{r7}
 8000d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d14:	e7fe      	b.n	8000d14 <MemManage_Handler+0x4>

08000d16 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d16:	b480      	push	{r7}
 8000d18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d1a:	e7fe      	b.n	8000d1a <BusFault_Handler+0x4>

08000d1c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d20:	e7fe      	b.n	8000d20 <UsageFault_Handler+0x4>

08000d22 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d22:	b480      	push	{r7}
 8000d24:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d26:	bf00      	nop
 8000d28:	46bd      	mov	sp, r7
 8000d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d2e:	4770      	bx	lr

08000d30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d34:	4802      	ldr	r0, [pc, #8]	; (8000d40 <TIM2_IRQHandler+0x10>)
 8000d36:	f001 fa7b 	bl	8002230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d3a:	bf00      	nop
 8000d3c:	bd80      	pop	{r7, pc}
 8000d3e:	bf00      	nop
 8000d40:	20004030 	.word	0x20004030

08000d44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000d44:	b580      	push	{r7, lr}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000d48:	4802      	ldr	r0, [pc, #8]	; (8000d54 <TIM3_IRQHandler+0x10>)
 8000d4a:	f001 fa71 	bl	8002230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000d4e:	bf00      	nop
 8000d50:	bd80      	pop	{r7, pc}
 8000d52:	bf00      	nop
 8000d54:	20003ff0 	.word	0x20003ff0

08000d58 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000d5c:	4802      	ldr	r0, [pc, #8]	; (8000d68 <TIM6_DAC_IRQHandler+0x10>)
 8000d5e:	f001 fa67 	bl	8002230 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000d62:	bf00      	nop
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20004070 	.word	0x20004070

08000d6c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000d70:	4b08      	ldr	r3, [pc, #32]	; (8000d94 <SystemInit+0x28>)
 8000d72:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000d76:	4a07      	ldr	r2, [pc, #28]	; (8000d94 <SystemInit+0x28>)
 8000d78:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000d7c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8000d80:	4b04      	ldr	r3, [pc, #16]	; (8000d94 <SystemInit+0x28>)
 8000d82:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8000d86:	609a      	str	r2, [r3, #8]
#endif
}
 8000d88:	bf00      	nop
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	e000ed00 	.word	0xe000ed00

08000d98 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8000d98:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000dd0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8000d9c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8000d9e:	e003      	b.n	8000da8 <LoopCopyDataInit>

08000da0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8000da0:	4b0c      	ldr	r3, [pc, #48]	; (8000dd4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8000da2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8000da4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8000da6:	3104      	adds	r1, #4

08000da8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8000da8:	480b      	ldr	r0, [pc, #44]	; (8000dd8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8000daa:	4b0c      	ldr	r3, [pc, #48]	; (8000ddc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8000dac:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8000dae:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8000db0:	d3f6      	bcc.n	8000da0 <CopyDataInit>
  ldr  r2, =_sbss
 8000db2:	4a0b      	ldr	r2, [pc, #44]	; (8000de0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8000db4:	e002      	b.n	8000dbc <LoopFillZerobss>

08000db6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8000db6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8000db8:	f842 3b04 	str.w	r3, [r2], #4

08000dbc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8000dbc:	4b09      	ldr	r3, [pc, #36]	; (8000de4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8000dbe:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8000dc0:	d3f9      	bcc.n	8000db6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000dc2:	f7ff ffd3 	bl	8000d6c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000dc6:	f004 fd81 	bl	80058cc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000dca:	f7ff fc41 	bl	8000650 <main>
  bx  lr    
 8000dce:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000dd0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8000dd4:	080059d4 	.word	0x080059d4
  ldr  r0, =_sdata
 8000dd8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8000ddc:	20000014 	.word	0x20000014
  ldr  r2, =_sbss
 8000de0:	20000014 	.word	0x20000014
  ldr  r3, = _ebss
 8000de4:	200040b4 	.word	0x200040b4

08000de8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000de8:	e7fe      	b.n	8000de8 <ADC_IRQHandler>
	...

08000dec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000df0:	4b0e      	ldr	r3, [pc, #56]	; (8000e2c <HAL_Init+0x40>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a0d      	ldr	r2, [pc, #52]	; (8000e2c <HAL_Init+0x40>)
 8000df6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000dfa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000dfc:	4b0b      	ldr	r3, [pc, #44]	; (8000e2c <HAL_Init+0x40>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a0a      	ldr	r2, [pc, #40]	; (8000e2c <HAL_Init+0x40>)
 8000e02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e06:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e08:	4b08      	ldr	r3, [pc, #32]	; (8000e2c <HAL_Init+0x40>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a07      	ldr	r2, [pc, #28]	; (8000e2c <HAL_Init+0x40>)
 8000e0e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e12:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e14:	2003      	movs	r0, #3
 8000e16:	f000 f8d8 	bl	8000fca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e1a:	2000      	movs	r0, #0
 8000e1c:	f7ff ff14 	bl	8000c48 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e20:	f7ff fe42 	bl	8000aa8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	40023c00 	.word	0x40023c00

08000e30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e30:	b480      	push	{r7}
 8000e32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e34:	4b06      	ldr	r3, [pc, #24]	; (8000e50 <HAL_IncTick+0x20>)
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	461a      	mov	r2, r3
 8000e3a:	4b06      	ldr	r3, [pc, #24]	; (8000e54 <HAL_IncTick+0x24>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4413      	add	r3, r2
 8000e40:	4a04      	ldr	r2, [pc, #16]	; (8000e54 <HAL_IncTick+0x24>)
 8000e42:	6013      	str	r3, [r2, #0]
}
 8000e44:	bf00      	nop
 8000e46:	46bd      	mov	sp, r7
 8000e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e4c:	4770      	bx	lr
 8000e4e:	bf00      	nop
 8000e50:	2000000c 	.word	0x2000000c
 8000e54:	200040b0 	.word	0x200040b0

08000e58 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e58:	b480      	push	{r7}
 8000e5a:	af00      	add	r7, sp, #0
  return uwTick;
 8000e5c:	4b03      	ldr	r3, [pc, #12]	; (8000e6c <HAL_GetTick+0x14>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
}
 8000e60:	4618      	mov	r0, r3
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr
 8000e6a:	bf00      	nop
 8000e6c:	200040b0 	.word	0x200040b0

08000e70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e70:	b480      	push	{r7}
 8000e72:	b085      	sub	sp, #20
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	f003 0307 	and.w	r3, r3, #7
 8000e7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000e80:	4b0c      	ldr	r3, [pc, #48]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000e82:	68db      	ldr	r3, [r3, #12]
 8000e84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000e86:	68ba      	ldr	r2, [r7, #8]
 8000e88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000e8c:	4013      	ands	r3, r2
 8000e8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000e98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000e9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000ea0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ea2:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000ea4:	68bb      	ldr	r3, [r7, #8]
 8000ea6:	60d3      	str	r3, [r2, #12]
}
 8000ea8:	bf00      	nop
 8000eaa:	3714      	adds	r7, #20
 8000eac:	46bd      	mov	sp, r7
 8000eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb2:	4770      	bx	lr
 8000eb4:	e000ed00 	.word	0xe000ed00

08000eb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <__NVIC_GetPriorityGrouping+0x18>)
 8000ebe:	68db      	ldr	r3, [r3, #12]
 8000ec0:	0a1b      	lsrs	r3, r3, #8
 8000ec2:	f003 0307 	and.w	r3, r3, #7
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	46bd      	mov	sp, r7
 8000eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ece:	4770      	bx	lr
 8000ed0:	e000ed00 	.word	0xe000ed00

08000ed4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	b083      	sub	sp, #12
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	4603      	mov	r3, r0
 8000edc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000ede:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ee2:	2b00      	cmp	r3, #0
 8000ee4:	db0b      	blt.n	8000efe <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000ee6:	79fb      	ldrb	r3, [r7, #7]
 8000ee8:	f003 021f 	and.w	r2, r3, #31
 8000eec:	4907      	ldr	r1, [pc, #28]	; (8000f0c <__NVIC_EnableIRQ+0x38>)
 8000eee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ef2:	095b      	lsrs	r3, r3, #5
 8000ef4:	2001      	movs	r0, #1
 8000ef6:	fa00 f202 	lsl.w	r2, r0, r2
 8000efa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000efe:	bf00      	nop
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr
 8000f0a:	bf00      	nop
 8000f0c:	e000e100 	.word	0xe000e100

08000f10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f10:	b480      	push	{r7}
 8000f12:	b083      	sub	sp, #12
 8000f14:	af00      	add	r7, sp, #0
 8000f16:	4603      	mov	r3, r0
 8000f18:	6039      	str	r1, [r7, #0]
 8000f1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	db0a      	blt.n	8000f3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f24:	683b      	ldr	r3, [r7, #0]
 8000f26:	b2da      	uxtb	r2, r3
 8000f28:	490c      	ldr	r1, [pc, #48]	; (8000f5c <__NVIC_SetPriority+0x4c>)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	0112      	lsls	r2, r2, #4
 8000f30:	b2d2      	uxtb	r2, r2
 8000f32:	440b      	add	r3, r1
 8000f34:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f38:	e00a      	b.n	8000f50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f3a:	683b      	ldr	r3, [r7, #0]
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4908      	ldr	r1, [pc, #32]	; (8000f60 <__NVIC_SetPriority+0x50>)
 8000f40:	79fb      	ldrb	r3, [r7, #7]
 8000f42:	f003 030f 	and.w	r3, r3, #15
 8000f46:	3b04      	subs	r3, #4
 8000f48:	0112      	lsls	r2, r2, #4
 8000f4a:	b2d2      	uxtb	r2, r2
 8000f4c:	440b      	add	r3, r1
 8000f4e:	761a      	strb	r2, [r3, #24]
}
 8000f50:	bf00      	nop
 8000f52:	370c      	adds	r7, #12
 8000f54:	46bd      	mov	sp, r7
 8000f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f5a:	4770      	bx	lr
 8000f5c:	e000e100 	.word	0xe000e100
 8000f60:	e000ed00 	.word	0xe000ed00

08000f64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f64:	b480      	push	{r7}
 8000f66:	b089      	sub	sp, #36	; 0x24
 8000f68:	af00      	add	r7, sp, #0
 8000f6a:	60f8      	str	r0, [r7, #12]
 8000f6c:	60b9      	str	r1, [r7, #8]
 8000f6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000f70:	68fb      	ldr	r3, [r7, #12]
 8000f72:	f003 0307 	and.w	r3, r3, #7
 8000f76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000f78:	69fb      	ldr	r3, [r7, #28]
 8000f7a:	f1c3 0307 	rsb	r3, r3, #7
 8000f7e:	2b04      	cmp	r3, #4
 8000f80:	bf28      	it	cs
 8000f82:	2304      	movcs	r3, #4
 8000f84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000f86:	69fb      	ldr	r3, [r7, #28]
 8000f88:	3304      	adds	r3, #4
 8000f8a:	2b06      	cmp	r3, #6
 8000f8c:	d902      	bls.n	8000f94 <NVIC_EncodePriority+0x30>
 8000f8e:	69fb      	ldr	r3, [r7, #28]
 8000f90:	3b03      	subs	r3, #3
 8000f92:	e000      	b.n	8000f96 <NVIC_EncodePriority+0x32>
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000f98:	f04f 32ff 	mov.w	r2, #4294967295
 8000f9c:	69bb      	ldr	r3, [r7, #24]
 8000f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa2:	43da      	mvns	r2, r3
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	401a      	ands	r2, r3
 8000fa8:	697b      	ldr	r3, [r7, #20]
 8000faa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fac:	f04f 31ff 	mov.w	r1, #4294967295
 8000fb0:	697b      	ldr	r3, [r7, #20]
 8000fb2:	fa01 f303 	lsl.w	r3, r1, r3
 8000fb6:	43d9      	mvns	r1, r3
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fbc:	4313      	orrs	r3, r2
         );
}
 8000fbe:	4618      	mov	r0, r3
 8000fc0:	3724      	adds	r7, #36	; 0x24
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc8:	4770      	bx	lr

08000fca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000fca:	b580      	push	{r7, lr}
 8000fcc:	b082      	sub	sp, #8
 8000fce:	af00      	add	r7, sp, #0
 8000fd0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000fd2:	6878      	ldr	r0, [r7, #4]
 8000fd4:	f7ff ff4c 	bl	8000e70 <__NVIC_SetPriorityGrouping>
}
 8000fd8:	bf00      	nop
 8000fda:	3708      	adds	r7, #8
 8000fdc:	46bd      	mov	sp, r7
 8000fde:	bd80      	pop	{r7, pc}

08000fe0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000fe0:	b580      	push	{r7, lr}
 8000fe2:	b086      	sub	sp, #24
 8000fe4:	af00      	add	r7, sp, #0
 8000fe6:	4603      	mov	r3, r0
 8000fe8:	60b9      	str	r1, [r7, #8]
 8000fea:	607a      	str	r2, [r7, #4]
 8000fec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000fee:	2300      	movs	r3, #0
 8000ff0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000ff2:	f7ff ff61 	bl	8000eb8 <__NVIC_GetPriorityGrouping>
 8000ff6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ff8:	687a      	ldr	r2, [r7, #4]
 8000ffa:	68b9      	ldr	r1, [r7, #8]
 8000ffc:	6978      	ldr	r0, [r7, #20]
 8000ffe:	f7ff ffb1 	bl	8000f64 <NVIC_EncodePriority>
 8001002:	4602      	mov	r2, r0
 8001004:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001008:	4611      	mov	r1, r2
 800100a:	4618      	mov	r0, r3
 800100c:	f7ff ff80 	bl	8000f10 <__NVIC_SetPriority>
}
 8001010:	bf00      	nop
 8001012:	3718      	adds	r7, #24
 8001014:	46bd      	mov	sp, r7
 8001016:	bd80      	pop	{r7, pc}

08001018 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b082      	sub	sp, #8
 800101c:	af00      	add	r7, sp, #0
 800101e:	4603      	mov	r3, r0
 8001020:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001026:	4618      	mov	r0, r3
 8001028:	f7ff ff54 	bl	8000ed4 <__NVIC_EnableIRQ>
}
 800102c:	bf00      	nop
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001034:	b480      	push	{r7}
 8001036:	b089      	sub	sp, #36	; 0x24
 8001038:	af00      	add	r7, sp, #0
 800103a:	6078      	str	r0, [r7, #4]
 800103c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800103e:	2300      	movs	r3, #0
 8001040:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001042:	2300      	movs	r3, #0
 8001044:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001046:	2300      	movs	r3, #0
 8001048:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800104a:	2300      	movs	r3, #0
 800104c:	61fb      	str	r3, [r7, #28]
 800104e:	e16b      	b.n	8001328 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001050:	2201      	movs	r2, #1
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	fa02 f303 	lsl.w	r3, r2, r3
 8001058:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800105a:	683b      	ldr	r3, [r7, #0]
 800105c:	681b      	ldr	r3, [r3, #0]
 800105e:	697a      	ldr	r2, [r7, #20]
 8001060:	4013      	ands	r3, r2
 8001062:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001064:	693a      	ldr	r2, [r7, #16]
 8001066:	697b      	ldr	r3, [r7, #20]
 8001068:	429a      	cmp	r2, r3
 800106a:	f040 815a 	bne.w	8001322 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800106e:	683b      	ldr	r3, [r7, #0]
 8001070:	685b      	ldr	r3, [r3, #4]
 8001072:	2b01      	cmp	r3, #1
 8001074:	d00b      	beq.n	800108e <HAL_GPIO_Init+0x5a>
 8001076:	683b      	ldr	r3, [r7, #0]
 8001078:	685b      	ldr	r3, [r3, #4]
 800107a:	2b02      	cmp	r3, #2
 800107c:	d007      	beq.n	800108e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800107e:	683b      	ldr	r3, [r7, #0]
 8001080:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001082:	2b11      	cmp	r3, #17
 8001084:	d003      	beq.n	800108e <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	685b      	ldr	r3, [r3, #4]
 800108a:	2b12      	cmp	r3, #18
 800108c:	d130      	bne.n	80010f0 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800108e:	687b      	ldr	r3, [r7, #4]
 8001090:	689b      	ldr	r3, [r3, #8]
 8001092:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001094:	69fb      	ldr	r3, [r7, #28]
 8001096:	005b      	lsls	r3, r3, #1
 8001098:	2203      	movs	r2, #3
 800109a:	fa02 f303 	lsl.w	r3, r2, r3
 800109e:	43db      	mvns	r3, r3
 80010a0:	69ba      	ldr	r2, [r7, #24]
 80010a2:	4013      	ands	r3, r2
 80010a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80010a6:	683b      	ldr	r3, [r7, #0]
 80010a8:	68da      	ldr	r2, [r3, #12]
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	005b      	lsls	r3, r3, #1
 80010ae:	fa02 f303 	lsl.w	r3, r2, r3
 80010b2:	69ba      	ldr	r2, [r7, #24]
 80010b4:	4313      	orrs	r3, r2
 80010b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	69ba      	ldr	r2, [r7, #24]
 80010bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	685b      	ldr	r3, [r3, #4]
 80010c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010c4:	2201      	movs	r2, #1
 80010c6:	69fb      	ldr	r3, [r7, #28]
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	685b      	ldr	r3, [r3, #4]
 80010d8:	091b      	lsrs	r3, r3, #4
 80010da:	f003 0201 	and.w	r2, r3, #1
 80010de:	69fb      	ldr	r3, [r7, #28]
 80010e0:	fa02 f303 	lsl.w	r3, r2, r3
 80010e4:	69ba      	ldr	r2, [r7, #24]
 80010e6:	4313      	orrs	r3, r2
 80010e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	69ba      	ldr	r2, [r7, #24]
 80010ee:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	68db      	ldr	r3, [r3, #12]
 80010f4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010f6:	69fb      	ldr	r3, [r7, #28]
 80010f8:	005b      	lsls	r3, r3, #1
 80010fa:	2203      	movs	r2, #3
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	43db      	mvns	r3, r3
 8001102:	69ba      	ldr	r2, [r7, #24]
 8001104:	4013      	ands	r3, r2
 8001106:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001108:	683b      	ldr	r3, [r7, #0]
 800110a:	689a      	ldr	r2, [r3, #8]
 800110c:	69fb      	ldr	r3, [r7, #28]
 800110e:	005b      	lsls	r3, r3, #1
 8001110:	fa02 f303 	lsl.w	r3, r2, r3
 8001114:	69ba      	ldr	r2, [r7, #24]
 8001116:	4313      	orrs	r3, r2
 8001118:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	69ba      	ldr	r2, [r7, #24]
 800111e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	685b      	ldr	r3, [r3, #4]
 8001124:	2b02      	cmp	r3, #2
 8001126:	d003      	beq.n	8001130 <HAL_GPIO_Init+0xfc>
 8001128:	683b      	ldr	r3, [r7, #0]
 800112a:	685b      	ldr	r3, [r3, #4]
 800112c:	2b12      	cmp	r3, #18
 800112e:	d123      	bne.n	8001178 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001130:	69fb      	ldr	r3, [r7, #28]
 8001132:	08da      	lsrs	r2, r3, #3
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	3208      	adds	r2, #8
 8001138:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800113c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800113e:	69fb      	ldr	r3, [r7, #28]
 8001140:	f003 0307 	and.w	r3, r3, #7
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	220f      	movs	r2, #15
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	43db      	mvns	r3, r3
 800114e:	69ba      	ldr	r2, [r7, #24]
 8001150:	4013      	ands	r3, r2
 8001152:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001154:	683b      	ldr	r3, [r7, #0]
 8001156:	691a      	ldr	r2, [r3, #16]
 8001158:	69fb      	ldr	r3, [r7, #28]
 800115a:	f003 0307 	and.w	r3, r3, #7
 800115e:	009b      	lsls	r3, r3, #2
 8001160:	fa02 f303 	lsl.w	r3, r2, r3
 8001164:	69ba      	ldr	r2, [r7, #24]
 8001166:	4313      	orrs	r3, r2
 8001168:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800116a:	69fb      	ldr	r3, [r7, #28]
 800116c:	08da      	lsrs	r2, r3, #3
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	3208      	adds	r2, #8
 8001172:	69b9      	ldr	r1, [r7, #24]
 8001174:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001178:	687b      	ldr	r3, [r7, #4]
 800117a:	681b      	ldr	r3, [r3, #0]
 800117c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800117e:	69fb      	ldr	r3, [r7, #28]
 8001180:	005b      	lsls	r3, r3, #1
 8001182:	2203      	movs	r2, #3
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	43db      	mvns	r3, r3
 800118a:	69ba      	ldr	r2, [r7, #24]
 800118c:	4013      	ands	r3, r2
 800118e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685b      	ldr	r3, [r3, #4]
 8001194:	f003 0203 	and.w	r2, r3, #3
 8001198:	69fb      	ldr	r3, [r7, #28]
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	fa02 f303 	lsl.w	r3, r2, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4313      	orrs	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80011a6:	687b      	ldr	r3, [r7, #4]
 80011a8:	69ba      	ldr	r2, [r7, #24]
 80011aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	685b      	ldr	r3, [r3, #4]
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	2b00      	cmp	r3, #0
 80011b6:	f000 80b4 	beq.w	8001322 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
 80011be:	4b5f      	ldr	r3, [pc, #380]	; (800133c <HAL_GPIO_Init+0x308>)
 80011c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011c2:	4a5e      	ldr	r2, [pc, #376]	; (800133c <HAL_GPIO_Init+0x308>)
 80011c4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011c8:	6453      	str	r3, [r2, #68]	; 0x44
 80011ca:	4b5c      	ldr	r3, [pc, #368]	; (800133c <HAL_GPIO_Init+0x308>)
 80011cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80011ce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011d2:	60fb      	str	r3, [r7, #12]
 80011d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011d6:	4a5a      	ldr	r2, [pc, #360]	; (8001340 <HAL_GPIO_Init+0x30c>)
 80011d8:	69fb      	ldr	r3, [r7, #28]
 80011da:	089b      	lsrs	r3, r3, #2
 80011dc:	3302      	adds	r3, #2
 80011de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011e4:	69fb      	ldr	r3, [r7, #28]
 80011e6:	f003 0303 	and.w	r3, r3, #3
 80011ea:	009b      	lsls	r3, r3, #2
 80011ec:	220f      	movs	r2, #15
 80011ee:	fa02 f303 	lsl.w	r3, r2, r3
 80011f2:	43db      	mvns	r3, r3
 80011f4:	69ba      	ldr	r2, [r7, #24]
 80011f6:	4013      	ands	r3, r2
 80011f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a51      	ldr	r2, [pc, #324]	; (8001344 <HAL_GPIO_Init+0x310>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d02b      	beq.n	800125a <HAL_GPIO_Init+0x226>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a50      	ldr	r2, [pc, #320]	; (8001348 <HAL_GPIO_Init+0x314>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d025      	beq.n	8001256 <HAL_GPIO_Init+0x222>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4f      	ldr	r2, [pc, #316]	; (800134c <HAL_GPIO_Init+0x318>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d01f      	beq.n	8001252 <HAL_GPIO_Init+0x21e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	4a4e      	ldr	r2, [pc, #312]	; (8001350 <HAL_GPIO_Init+0x31c>)
 8001216:	4293      	cmp	r3, r2
 8001218:	d019      	beq.n	800124e <HAL_GPIO_Init+0x21a>
 800121a:	687b      	ldr	r3, [r7, #4]
 800121c:	4a4d      	ldr	r2, [pc, #308]	; (8001354 <HAL_GPIO_Init+0x320>)
 800121e:	4293      	cmp	r3, r2
 8001220:	d013      	beq.n	800124a <HAL_GPIO_Init+0x216>
 8001222:	687b      	ldr	r3, [r7, #4]
 8001224:	4a4c      	ldr	r2, [pc, #304]	; (8001358 <HAL_GPIO_Init+0x324>)
 8001226:	4293      	cmp	r3, r2
 8001228:	d00d      	beq.n	8001246 <HAL_GPIO_Init+0x212>
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	4a4b      	ldr	r2, [pc, #300]	; (800135c <HAL_GPIO_Init+0x328>)
 800122e:	4293      	cmp	r3, r2
 8001230:	d007      	beq.n	8001242 <HAL_GPIO_Init+0x20e>
 8001232:	687b      	ldr	r3, [r7, #4]
 8001234:	4a4a      	ldr	r2, [pc, #296]	; (8001360 <HAL_GPIO_Init+0x32c>)
 8001236:	4293      	cmp	r3, r2
 8001238:	d101      	bne.n	800123e <HAL_GPIO_Init+0x20a>
 800123a:	2307      	movs	r3, #7
 800123c:	e00e      	b.n	800125c <HAL_GPIO_Init+0x228>
 800123e:	2308      	movs	r3, #8
 8001240:	e00c      	b.n	800125c <HAL_GPIO_Init+0x228>
 8001242:	2306      	movs	r3, #6
 8001244:	e00a      	b.n	800125c <HAL_GPIO_Init+0x228>
 8001246:	2305      	movs	r3, #5
 8001248:	e008      	b.n	800125c <HAL_GPIO_Init+0x228>
 800124a:	2304      	movs	r3, #4
 800124c:	e006      	b.n	800125c <HAL_GPIO_Init+0x228>
 800124e:	2303      	movs	r3, #3
 8001250:	e004      	b.n	800125c <HAL_GPIO_Init+0x228>
 8001252:	2302      	movs	r3, #2
 8001254:	e002      	b.n	800125c <HAL_GPIO_Init+0x228>
 8001256:	2301      	movs	r3, #1
 8001258:	e000      	b.n	800125c <HAL_GPIO_Init+0x228>
 800125a:	2300      	movs	r3, #0
 800125c:	69fa      	ldr	r2, [r7, #28]
 800125e:	f002 0203 	and.w	r2, r2, #3
 8001262:	0092      	lsls	r2, r2, #2
 8001264:	4093      	lsls	r3, r2
 8001266:	69ba      	ldr	r2, [r7, #24]
 8001268:	4313      	orrs	r3, r2
 800126a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800126c:	4934      	ldr	r1, [pc, #208]	; (8001340 <HAL_GPIO_Init+0x30c>)
 800126e:	69fb      	ldr	r3, [r7, #28]
 8001270:	089b      	lsrs	r3, r3, #2
 8001272:	3302      	adds	r3, #2
 8001274:	69ba      	ldr	r2, [r7, #24]
 8001276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800127a:	4b3a      	ldr	r3, [pc, #232]	; (8001364 <HAL_GPIO_Init+0x330>)
 800127c:	681b      	ldr	r3, [r3, #0]
 800127e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	43db      	mvns	r3, r3
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	4013      	ands	r3, r2
 8001288:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800128a:	683b      	ldr	r3, [r7, #0]
 800128c:	685b      	ldr	r3, [r3, #4]
 800128e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001292:	2b00      	cmp	r3, #0
 8001294:	d003      	beq.n	800129e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8001296:	69ba      	ldr	r2, [r7, #24]
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	4313      	orrs	r3, r2
 800129c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800129e:	4a31      	ldr	r2, [pc, #196]	; (8001364 <HAL_GPIO_Init+0x330>)
 80012a0:	69bb      	ldr	r3, [r7, #24]
 80012a2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80012a4:	4b2f      	ldr	r3, [pc, #188]	; (8001364 <HAL_GPIO_Init+0x330>)
 80012a6:	685b      	ldr	r3, [r3, #4]
 80012a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012aa:	693b      	ldr	r3, [r7, #16]
 80012ac:	43db      	mvns	r3, r3
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	4013      	ands	r3, r2
 80012b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d003      	beq.n	80012c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80012c0:	69ba      	ldr	r2, [r7, #24]
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	4313      	orrs	r3, r2
 80012c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012c8:	4a26      	ldr	r2, [pc, #152]	; (8001364 <HAL_GPIO_Init+0x330>)
 80012ca:	69bb      	ldr	r3, [r7, #24]
 80012cc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ce:	4b25      	ldr	r3, [pc, #148]	; (8001364 <HAL_GPIO_Init+0x330>)
 80012d0:	689b      	ldr	r3, [r3, #8]
 80012d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012d4:	693b      	ldr	r3, [r7, #16]
 80012d6:	43db      	mvns	r3, r3
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	4013      	ands	r3, r2
 80012dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012de:	683b      	ldr	r3, [r7, #0]
 80012e0:	685b      	ldr	r3, [r3, #4]
 80012e2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012e6:	2b00      	cmp	r3, #0
 80012e8:	d003      	beq.n	80012f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80012ea:	69ba      	ldr	r2, [r7, #24]
 80012ec:	693b      	ldr	r3, [r7, #16]
 80012ee:	4313      	orrs	r3, r2
 80012f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012f2:	4a1c      	ldr	r2, [pc, #112]	; (8001364 <HAL_GPIO_Init+0x330>)
 80012f4:	69bb      	ldr	r3, [r7, #24]
 80012f6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012f8:	4b1a      	ldr	r3, [pc, #104]	; (8001364 <HAL_GPIO_Init+0x330>)
 80012fa:	68db      	ldr	r3, [r3, #12]
 80012fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012fe:	693b      	ldr	r3, [r7, #16]
 8001300:	43db      	mvns	r3, r3
 8001302:	69ba      	ldr	r2, [r7, #24]
 8001304:	4013      	ands	r3, r2
 8001306:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	685b      	ldr	r3, [r3, #4]
 800130c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001310:	2b00      	cmp	r3, #0
 8001312:	d003      	beq.n	800131c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8001314:	69ba      	ldr	r2, [r7, #24]
 8001316:	693b      	ldr	r3, [r7, #16]
 8001318:	4313      	orrs	r3, r2
 800131a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800131c:	4a11      	ldr	r2, [pc, #68]	; (8001364 <HAL_GPIO_Init+0x330>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001322:	69fb      	ldr	r3, [r7, #28]
 8001324:	3301      	adds	r3, #1
 8001326:	61fb      	str	r3, [r7, #28]
 8001328:	69fb      	ldr	r3, [r7, #28]
 800132a:	2b0f      	cmp	r3, #15
 800132c:	f67f ae90 	bls.w	8001050 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001330:	bf00      	nop
 8001332:	3724      	adds	r7, #36	; 0x24
 8001334:	46bd      	mov	sp, r7
 8001336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133a:	4770      	bx	lr
 800133c:	40023800 	.word	0x40023800
 8001340:	40013800 	.word	0x40013800
 8001344:	40020000 	.word	0x40020000
 8001348:	40020400 	.word	0x40020400
 800134c:	40020800 	.word	0x40020800
 8001350:	40020c00 	.word	0x40020c00
 8001354:	40021000 	.word	0x40021000
 8001358:	40021400 	.word	0x40021400
 800135c:	40021800 	.word	0x40021800
 8001360:	40021c00 	.word	0x40021c00
 8001364:	40013c00 	.word	0x40013c00

08001368 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
 8001370:	460b      	mov	r3, r1
 8001372:	807b      	strh	r3, [r7, #2]
 8001374:	4613      	mov	r3, r2
 8001376:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001378:	787b      	ldrb	r3, [r7, #1]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d003      	beq.n	8001386 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800137e:	887a      	ldrh	r2, [r7, #2]
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001384:	e003      	b.n	800138e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001386:	887b      	ldrh	r3, [r7, #2]
 8001388:	041a      	lsls	r2, r3, #16
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	619a      	str	r2, [r3, #24]
}
 800138e:	bf00      	nop
 8001390:	370c      	adds	r7, #12
 8001392:	46bd      	mov	sp, r7
 8001394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001398:	4770      	bx	lr

0800139a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800139a:	b480      	push	{r7}
 800139c:	b083      	sub	sp, #12
 800139e:	af00      	add	r7, sp, #0
 80013a0:	6078      	str	r0, [r7, #4]
 80013a2:	460b      	mov	r3, r1
 80013a4:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->ODR & GPIO_Pin) == GPIO_Pin)
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	695a      	ldr	r2, [r3, #20]
 80013aa:	887b      	ldrh	r3, [r7, #2]
 80013ac:	401a      	ands	r2, r3
 80013ae:	887b      	ldrh	r3, [r7, #2]
 80013b0:	429a      	cmp	r2, r3
 80013b2:	d104      	bne.n	80013be <HAL_GPIO_TogglePin+0x24>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << GPIO_NUMBER;
 80013b4:	887b      	ldrh	r3, [r7, #2]
 80013b6:	041a      	lsls	r2, r3, #16
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = GPIO_Pin;
  }
}
 80013bc:	e002      	b.n	80013c4 <HAL_GPIO_TogglePin+0x2a>
    GPIOx->BSRR = GPIO_Pin;
 80013be:	887a      	ldrh	r2, [r7, #2]
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	619a      	str	r2, [r3, #24]
}
 80013c4:	bf00      	nop
 80013c6:	370c      	adds	r7, #12
 80013c8:	46bd      	mov	sp, r7
 80013ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ce:	4770      	bx	lr

080013d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b086      	sub	sp, #24
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d101      	bne.n	80013e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80013de:	2301      	movs	r3, #1
 80013e0:	e25b      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d075      	beq.n	80014da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80013ee:	4ba3      	ldr	r3, [pc, #652]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 80013f0:	689b      	ldr	r3, [r3, #8]
 80013f2:	f003 030c 	and.w	r3, r3, #12
 80013f6:	2b04      	cmp	r3, #4
 80013f8:	d00c      	beq.n	8001414 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80013fa:	4ba0      	ldr	r3, [pc, #640]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 80013fc:	689b      	ldr	r3, [r3, #8]
 80013fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001402:	2b08      	cmp	r3, #8
 8001404:	d112      	bne.n	800142c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001406:	4b9d      	ldr	r3, [pc, #628]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001408:	685b      	ldr	r3, [r3, #4]
 800140a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800140e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001412:	d10b      	bne.n	800142c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001414:	4b99      	ldr	r3, [pc, #612]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800141c:	2b00      	cmp	r3, #0
 800141e:	d05b      	beq.n	80014d8 <HAL_RCC_OscConfig+0x108>
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	685b      	ldr	r3, [r3, #4]
 8001424:	2b00      	cmp	r3, #0
 8001426:	d157      	bne.n	80014d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e236      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	685b      	ldr	r3, [r3, #4]
 8001430:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001434:	d106      	bne.n	8001444 <HAL_RCC_OscConfig+0x74>
 8001436:	4b91      	ldr	r3, [pc, #580]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a90      	ldr	r2, [pc, #576]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 800143c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001440:	6013      	str	r3, [r2, #0]
 8001442:	e01d      	b.n	8001480 <HAL_RCC_OscConfig+0xb0>
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	685b      	ldr	r3, [r3, #4]
 8001448:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800144c:	d10c      	bne.n	8001468 <HAL_RCC_OscConfig+0x98>
 800144e:	4b8b      	ldr	r3, [pc, #556]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4a8a      	ldr	r2, [pc, #552]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001454:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001458:	6013      	str	r3, [r2, #0]
 800145a:	4b88      	ldr	r3, [pc, #544]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4a87      	ldr	r2, [pc, #540]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001460:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001464:	6013      	str	r3, [r2, #0]
 8001466:	e00b      	b.n	8001480 <HAL_RCC_OscConfig+0xb0>
 8001468:	4b84      	ldr	r3, [pc, #528]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4a83      	ldr	r2, [pc, #524]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 800146e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001472:	6013      	str	r3, [r2, #0]
 8001474:	4b81      	ldr	r3, [pc, #516]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	4a80      	ldr	r2, [pc, #512]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 800147a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800147e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	685b      	ldr	r3, [r3, #4]
 8001484:	2b00      	cmp	r3, #0
 8001486:	d013      	beq.n	80014b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001488:	f7ff fce6 	bl	8000e58 <HAL_GetTick>
 800148c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800148e:	e008      	b.n	80014a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001490:	f7ff fce2 	bl	8000e58 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	693b      	ldr	r3, [r7, #16]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	2b64      	cmp	r3, #100	; 0x64
 800149c:	d901      	bls.n	80014a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800149e:	2303      	movs	r3, #3
 80014a0:	e1fb      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014a2:	4b76      	ldr	r3, [pc, #472]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d0f0      	beq.n	8001490 <HAL_RCC_OscConfig+0xc0>
 80014ae:	e014      	b.n	80014da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014b0:	f7ff fcd2 	bl	8000e58 <HAL_GetTick>
 80014b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014b6:	e008      	b.n	80014ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80014b8:	f7ff fcce 	bl	8000e58 <HAL_GetTick>
 80014bc:	4602      	mov	r2, r0
 80014be:	693b      	ldr	r3, [r7, #16]
 80014c0:	1ad3      	subs	r3, r2, r3
 80014c2:	2b64      	cmp	r3, #100	; 0x64
 80014c4:	d901      	bls.n	80014ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80014c6:	2303      	movs	r3, #3
 80014c8:	e1e7      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80014ca:	4b6c      	ldr	r3, [pc, #432]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80014d2:	2b00      	cmp	r3, #0
 80014d4:	d1f0      	bne.n	80014b8 <HAL_RCC_OscConfig+0xe8>
 80014d6:	e000      	b.n	80014da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80014d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	f003 0302 	and.w	r3, r3, #2
 80014e2:	2b00      	cmp	r3, #0
 80014e4:	d063      	beq.n	80015ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014e6:	4b65      	ldr	r3, [pc, #404]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 80014e8:	689b      	ldr	r3, [r3, #8]
 80014ea:	f003 030c 	and.w	r3, r3, #12
 80014ee:	2b00      	cmp	r3, #0
 80014f0:	d00b      	beq.n	800150a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014f2:	4b62      	ldr	r3, [pc, #392]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 80014f4:	689b      	ldr	r3, [r3, #8]
 80014f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80014fa:	2b08      	cmp	r3, #8
 80014fc:	d11c      	bne.n	8001538 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80014fe:	4b5f      	ldr	r3, [pc, #380]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001500:	685b      	ldr	r3, [r3, #4]
 8001502:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001506:	2b00      	cmp	r3, #0
 8001508:	d116      	bne.n	8001538 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800150a:	4b5c      	ldr	r3, [pc, #368]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	f003 0302 	and.w	r3, r3, #2
 8001512:	2b00      	cmp	r3, #0
 8001514:	d005      	beq.n	8001522 <HAL_RCC_OscConfig+0x152>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	68db      	ldr	r3, [r3, #12]
 800151a:	2b01      	cmp	r3, #1
 800151c:	d001      	beq.n	8001522 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800151e:	2301      	movs	r3, #1
 8001520:	e1bb      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001522:	4b56      	ldr	r3, [pc, #344]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	691b      	ldr	r3, [r3, #16]
 800152e:	00db      	lsls	r3, r3, #3
 8001530:	4952      	ldr	r1, [pc, #328]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001532:	4313      	orrs	r3, r2
 8001534:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001536:	e03a      	b.n	80015ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	68db      	ldr	r3, [r3, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d020      	beq.n	8001582 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001540:	4b4f      	ldr	r3, [pc, #316]	; (8001680 <HAL_RCC_OscConfig+0x2b0>)
 8001542:	2201      	movs	r2, #1
 8001544:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001546:	f7ff fc87 	bl	8000e58 <HAL_GetTick>
 800154a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800154c:	e008      	b.n	8001560 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800154e:	f7ff fc83 	bl	8000e58 <HAL_GetTick>
 8001552:	4602      	mov	r2, r0
 8001554:	693b      	ldr	r3, [r7, #16]
 8001556:	1ad3      	subs	r3, r2, r3
 8001558:	2b02      	cmp	r3, #2
 800155a:	d901      	bls.n	8001560 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800155c:	2303      	movs	r3, #3
 800155e:	e19c      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001560:	4b46      	ldr	r3, [pc, #280]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	f003 0302 	and.w	r3, r3, #2
 8001568:	2b00      	cmp	r3, #0
 800156a:	d0f0      	beq.n	800154e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800156c:	4b43      	ldr	r3, [pc, #268]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	691b      	ldr	r3, [r3, #16]
 8001578:	00db      	lsls	r3, r3, #3
 800157a:	4940      	ldr	r1, [pc, #256]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 800157c:	4313      	orrs	r3, r2
 800157e:	600b      	str	r3, [r1, #0]
 8001580:	e015      	b.n	80015ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001582:	4b3f      	ldr	r3, [pc, #252]	; (8001680 <HAL_RCC_OscConfig+0x2b0>)
 8001584:	2200      	movs	r2, #0
 8001586:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001588:	f7ff fc66 	bl	8000e58 <HAL_GetTick>
 800158c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800158e:	e008      	b.n	80015a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001590:	f7ff fc62 	bl	8000e58 <HAL_GetTick>
 8001594:	4602      	mov	r2, r0
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	1ad3      	subs	r3, r2, r3
 800159a:	2b02      	cmp	r3, #2
 800159c:	d901      	bls.n	80015a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800159e:	2303      	movs	r3, #3
 80015a0:	e17b      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015a2:	4b36      	ldr	r3, [pc, #216]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 80015a4:	681b      	ldr	r3, [r3, #0]
 80015a6:	f003 0302 	and.w	r3, r3, #2
 80015aa:	2b00      	cmp	r3, #0
 80015ac:	d1f0      	bne.n	8001590 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80015ae:	687b      	ldr	r3, [r7, #4]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f003 0308 	and.w	r3, r3, #8
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d030      	beq.n	800161c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d016      	beq.n	80015f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80015c2:	4b30      	ldr	r3, [pc, #192]	; (8001684 <HAL_RCC_OscConfig+0x2b4>)
 80015c4:	2201      	movs	r2, #1
 80015c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015c8:	f7ff fc46 	bl	8000e58 <HAL_GetTick>
 80015cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015ce:	e008      	b.n	80015e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015d0:	f7ff fc42 	bl	8000e58 <HAL_GetTick>
 80015d4:	4602      	mov	r2, r0
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	1ad3      	subs	r3, r2, r3
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d901      	bls.n	80015e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80015de:	2303      	movs	r3, #3
 80015e0:	e15b      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80015e2:	4b26      	ldr	r3, [pc, #152]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 80015e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80015e6:	f003 0302 	and.w	r3, r3, #2
 80015ea:	2b00      	cmp	r3, #0
 80015ec:	d0f0      	beq.n	80015d0 <HAL_RCC_OscConfig+0x200>
 80015ee:	e015      	b.n	800161c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80015f0:	4b24      	ldr	r3, [pc, #144]	; (8001684 <HAL_RCC_OscConfig+0x2b4>)
 80015f2:	2200      	movs	r2, #0
 80015f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80015f6:	f7ff fc2f 	bl	8000e58 <HAL_GetTick>
 80015fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015fc:	e008      	b.n	8001610 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80015fe:	f7ff fc2b 	bl	8000e58 <HAL_GetTick>
 8001602:	4602      	mov	r2, r0
 8001604:	693b      	ldr	r3, [r7, #16]
 8001606:	1ad3      	subs	r3, r2, r3
 8001608:	2b02      	cmp	r3, #2
 800160a:	d901      	bls.n	8001610 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800160c:	2303      	movs	r3, #3
 800160e:	e144      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001610:	4b1a      	ldr	r3, [pc, #104]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001614:	f003 0302 	and.w	r3, r3, #2
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1f0      	bne.n	80015fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0304 	and.w	r3, r3, #4
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 80a0 	beq.w	800176a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800162a:	2300      	movs	r3, #0
 800162c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800162e:	4b13      	ldr	r3, [pc, #76]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001632:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001636:	2b00      	cmp	r3, #0
 8001638:	d10f      	bne.n	800165a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	60bb      	str	r3, [r7, #8]
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001640:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001642:	4a0e      	ldr	r2, [pc, #56]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 8001644:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001648:	6413      	str	r3, [r2, #64]	; 0x40
 800164a:	4b0c      	ldr	r3, [pc, #48]	; (800167c <HAL_RCC_OscConfig+0x2ac>)
 800164c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800164e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001652:	60bb      	str	r3, [r7, #8]
 8001654:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001656:	2301      	movs	r3, #1
 8001658:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <HAL_RCC_OscConfig+0x2b8>)
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001662:	2b00      	cmp	r3, #0
 8001664:	d121      	bne.n	80016aa <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_RCC_OscConfig+0x2b8>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4a07      	ldr	r2, [pc, #28]	; (8001688 <HAL_RCC_OscConfig+0x2b8>)
 800166c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001670:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001672:	f7ff fbf1 	bl	8000e58 <HAL_GetTick>
 8001676:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001678:	e011      	b.n	800169e <HAL_RCC_OscConfig+0x2ce>
 800167a:	bf00      	nop
 800167c:	40023800 	.word	0x40023800
 8001680:	42470000 	.word	0x42470000
 8001684:	42470e80 	.word	0x42470e80
 8001688:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800168c:	f7ff fbe4 	bl	8000e58 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	2b02      	cmp	r3, #2
 8001698:	d901      	bls.n	800169e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800169a:	2303      	movs	r3, #3
 800169c:	e0fd      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800169e:	4b81      	ldr	r3, [pc, #516]	; (80018a4 <HAL_RCC_OscConfig+0x4d4>)
 80016a0:	681b      	ldr	r3, [r3, #0]
 80016a2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80016a6:	2b00      	cmp	r3, #0
 80016a8:	d0f0      	beq.n	800168c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	689b      	ldr	r3, [r3, #8]
 80016ae:	2b01      	cmp	r3, #1
 80016b0:	d106      	bne.n	80016c0 <HAL_RCC_OscConfig+0x2f0>
 80016b2:	4b7d      	ldr	r3, [pc, #500]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 80016b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016b6:	4a7c      	ldr	r2, [pc, #496]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 80016b8:	f043 0301 	orr.w	r3, r3, #1
 80016bc:	6713      	str	r3, [r2, #112]	; 0x70
 80016be:	e01c      	b.n	80016fa <HAL_RCC_OscConfig+0x32a>
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	689b      	ldr	r3, [r3, #8]
 80016c4:	2b05      	cmp	r3, #5
 80016c6:	d10c      	bne.n	80016e2 <HAL_RCC_OscConfig+0x312>
 80016c8:	4b77      	ldr	r3, [pc, #476]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 80016ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016cc:	4a76      	ldr	r2, [pc, #472]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 80016ce:	f043 0304 	orr.w	r3, r3, #4
 80016d2:	6713      	str	r3, [r2, #112]	; 0x70
 80016d4:	4b74      	ldr	r3, [pc, #464]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 80016d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016d8:	4a73      	ldr	r2, [pc, #460]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6713      	str	r3, [r2, #112]	; 0x70
 80016e0:	e00b      	b.n	80016fa <HAL_RCC_OscConfig+0x32a>
 80016e2:	4b71      	ldr	r3, [pc, #452]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 80016e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016e6:	4a70      	ldr	r2, [pc, #448]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 80016e8:	f023 0301 	bic.w	r3, r3, #1
 80016ec:	6713      	str	r3, [r2, #112]	; 0x70
 80016ee:	4b6e      	ldr	r3, [pc, #440]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 80016f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80016f2:	4a6d      	ldr	r2, [pc, #436]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 80016f4:	f023 0304 	bic.w	r3, r3, #4
 80016f8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	689b      	ldr	r3, [r3, #8]
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d015      	beq.n	800172e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001702:	f7ff fba9 	bl	8000e58 <HAL_GetTick>
 8001706:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001708:	e00a      	b.n	8001720 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800170a:	f7ff fba5 	bl	8000e58 <HAL_GetTick>
 800170e:	4602      	mov	r2, r0
 8001710:	693b      	ldr	r3, [r7, #16]
 8001712:	1ad3      	subs	r3, r2, r3
 8001714:	f241 3288 	movw	r2, #5000	; 0x1388
 8001718:	4293      	cmp	r3, r2
 800171a:	d901      	bls.n	8001720 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800171c:	2303      	movs	r3, #3
 800171e:	e0bc      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001720:	4b61      	ldr	r3, [pc, #388]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 8001722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001724:	f003 0302 	and.w	r3, r3, #2
 8001728:	2b00      	cmp	r3, #0
 800172a:	d0ee      	beq.n	800170a <HAL_RCC_OscConfig+0x33a>
 800172c:	e014      	b.n	8001758 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800172e:	f7ff fb93 	bl	8000e58 <HAL_GetTick>
 8001732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001734:	e00a      	b.n	800174c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8001736:	f7ff fb8f 	bl	8000e58 <HAL_GetTick>
 800173a:	4602      	mov	r2, r0
 800173c:	693b      	ldr	r3, [r7, #16]
 800173e:	1ad3      	subs	r3, r2, r3
 8001740:	f241 3288 	movw	r2, #5000	; 0x1388
 8001744:	4293      	cmp	r3, r2
 8001746:	d901      	bls.n	800174c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8001748:	2303      	movs	r3, #3
 800174a:	e0a6      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800174c:	4b56      	ldr	r3, [pc, #344]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 800174e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001750:	f003 0302 	and.w	r3, r3, #2
 8001754:	2b00      	cmp	r3, #0
 8001756:	d1ee      	bne.n	8001736 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8001758:	7dfb      	ldrb	r3, [r7, #23]
 800175a:	2b01      	cmp	r3, #1
 800175c:	d105      	bne.n	800176a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800175e:	4b52      	ldr	r3, [pc, #328]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 8001760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001762:	4a51      	ldr	r2, [pc, #324]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 8001764:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001768:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	699b      	ldr	r3, [r3, #24]
 800176e:	2b00      	cmp	r3, #0
 8001770:	f000 8092 	beq.w	8001898 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001774:	4b4c      	ldr	r3, [pc, #304]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 8001776:	689b      	ldr	r3, [r3, #8]
 8001778:	f003 030c 	and.w	r3, r3, #12
 800177c:	2b08      	cmp	r3, #8
 800177e:	d05c      	beq.n	800183a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	699b      	ldr	r3, [r3, #24]
 8001784:	2b02      	cmp	r3, #2
 8001786:	d141      	bne.n	800180c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001788:	4b48      	ldr	r3, [pc, #288]	; (80018ac <HAL_RCC_OscConfig+0x4dc>)
 800178a:	2200      	movs	r2, #0
 800178c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800178e:	f7ff fb63 	bl	8000e58 <HAL_GetTick>
 8001792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001794:	e008      	b.n	80017a8 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001796:	f7ff fb5f 	bl	8000e58 <HAL_GetTick>
 800179a:	4602      	mov	r2, r0
 800179c:	693b      	ldr	r3, [r7, #16]
 800179e:	1ad3      	subs	r3, r2, r3
 80017a0:	2b02      	cmp	r3, #2
 80017a2:	d901      	bls.n	80017a8 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 80017a4:	2303      	movs	r3, #3
 80017a6:	e078      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017a8:	4b3f      	ldr	r3, [pc, #252]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80017b0:	2b00      	cmp	r3, #0
 80017b2:	d1f0      	bne.n	8001796 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	69da      	ldr	r2, [r3, #28]
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	6a1b      	ldr	r3, [r3, #32]
 80017bc:	431a      	orrs	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017c2:	019b      	lsls	r3, r3, #6
 80017c4:	431a      	orrs	r2, r3
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ca:	085b      	lsrs	r3, r3, #1
 80017cc:	3b01      	subs	r3, #1
 80017ce:	041b      	lsls	r3, r3, #16
 80017d0:	431a      	orrs	r2, r3
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80017d6:	061b      	lsls	r3, r3, #24
 80017d8:	4933      	ldr	r1, [pc, #204]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 80017da:	4313      	orrs	r3, r2
 80017dc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80017de:	4b33      	ldr	r3, [pc, #204]	; (80018ac <HAL_RCC_OscConfig+0x4dc>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017e4:	f7ff fb38 	bl	8000e58 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80017ec:	f7ff fb34 	bl	8000e58 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e04d      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80017fe:	4b2a      	ldr	r3, [pc, #168]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x41c>
 800180a:	e045      	b.n	8001898 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180c:	4b27      	ldr	r3, [pc, #156]	; (80018ac <HAL_RCC_OscConfig+0x4dc>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff fb21 	bl	8000e58 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800181a:	f7ff fb1d 	bl	8000e58 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e036      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800182c:	4b1e      	ldr	r3, [pc, #120]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f0      	bne.n	800181a <HAL_RCC_OscConfig+0x44a>
 8001838:	e02e      	b.n	8001898 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	699b      	ldr	r3, [r3, #24]
 800183e:	2b01      	cmp	r3, #1
 8001840:	d101      	bne.n	8001846 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8001842:	2301      	movs	r3, #1
 8001844:	e029      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001846:	4b18      	ldr	r3, [pc, #96]	; (80018a8 <HAL_RCC_OscConfig+0x4d8>)
 8001848:	685b      	ldr	r3, [r3, #4]
 800184a:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	69db      	ldr	r3, [r3, #28]
 8001856:	429a      	cmp	r2, r3
 8001858:	d11c      	bne.n	8001894 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800185a:	68fb      	ldr	r3, [r7, #12]
 800185c:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001864:	429a      	cmp	r2, r3
 8001866:	d115      	bne.n	8001894 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001868:	68fa      	ldr	r2, [r7, #12]
 800186a:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800186e:	4013      	ands	r3, r2
 8001870:	687a      	ldr	r2, [r7, #4]
 8001872:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001874:	4293      	cmp	r3, r2
 8001876:	d10d      	bne.n	8001894 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8001882:	429a      	cmp	r2, r3
 8001884:	d106      	bne.n	8001894 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 8001886:	68fb      	ldr	r3, [r7, #12]
 8001888:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8001890:	429a      	cmp	r2, r3
 8001892:	d001      	beq.n	8001898 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 8001894:	2301      	movs	r3, #1
 8001896:	e000      	b.n	800189a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8001898:	2300      	movs	r3, #0
}
 800189a:	4618      	mov	r0, r3
 800189c:	3718      	adds	r7, #24
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	40007000 	.word	0x40007000
 80018a8:	40023800 	.word	0x40023800
 80018ac:	42470060 	.word	0x42470060

080018b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80018b0:	b580      	push	{r7, lr}
 80018b2:	b084      	sub	sp, #16
 80018b4:	af00      	add	r7, sp, #0
 80018b6:	6078      	str	r0, [r7, #4]
 80018b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d101      	bne.n	80018c4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80018c0:	2301      	movs	r3, #1
 80018c2:	e0cc      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80018c4:	4b68      	ldr	r3, [pc, #416]	; (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f003 030f 	and.w	r3, r3, #15
 80018cc:	683a      	ldr	r2, [r7, #0]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d90c      	bls.n	80018ec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018d2:	4b65      	ldr	r3, [pc, #404]	; (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	b2d2      	uxtb	r2, r2
 80018d8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018da:	4b63      	ldr	r3, [pc, #396]	; (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	f003 030f 	and.w	r3, r3, #15
 80018e2:	683a      	ldr	r2, [r7, #0]
 80018e4:	429a      	cmp	r2, r3
 80018e6:	d001      	beq.n	80018ec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80018e8:	2301      	movs	r3, #1
 80018ea:	e0b8      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f003 0302 	and.w	r3, r3, #2
 80018f4:	2b00      	cmp	r3, #0
 80018f6:	d020      	beq.n	800193a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	681b      	ldr	r3, [r3, #0]
 80018fc:	f003 0304 	and.w	r3, r3, #4
 8001900:	2b00      	cmp	r3, #0
 8001902:	d005      	beq.n	8001910 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001904:	4b59      	ldr	r3, [pc, #356]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001906:	689b      	ldr	r3, [r3, #8]
 8001908:	4a58      	ldr	r2, [pc, #352]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800190a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800190e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f003 0308 	and.w	r3, r3, #8
 8001918:	2b00      	cmp	r3, #0
 800191a:	d005      	beq.n	8001928 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800191c:	4b53      	ldr	r3, [pc, #332]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4a52      	ldr	r2, [pc, #328]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001922:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001926:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001928:	4b50      	ldr	r3, [pc, #320]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800192a:	689b      	ldr	r3, [r3, #8]
 800192c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689b      	ldr	r3, [r3, #8]
 8001934:	494d      	ldr	r1, [pc, #308]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001936:	4313      	orrs	r3, r2
 8001938:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	681b      	ldr	r3, [r3, #0]
 800193e:	f003 0301 	and.w	r3, r3, #1
 8001942:	2b00      	cmp	r3, #0
 8001944:	d044      	beq.n	80019d0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	685b      	ldr	r3, [r3, #4]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d107      	bne.n	800195e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800194e:	4b47      	ldr	r3, [pc, #284]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001956:	2b00      	cmp	r3, #0
 8001958:	d119      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800195a:	2301      	movs	r3, #1
 800195c:	e07f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	2b02      	cmp	r3, #2
 8001964:	d003      	beq.n	800196e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800196a:	2b03      	cmp	r3, #3
 800196c:	d107      	bne.n	800197e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800196e:	4b3f      	ldr	r3, [pc, #252]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001976:	2b00      	cmp	r3, #0
 8001978:	d109      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800197a:	2301      	movs	r3, #1
 800197c:	e06f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800197e:	4b3b      	ldr	r3, [pc, #236]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	2b00      	cmp	r3, #0
 8001988:	d101      	bne.n	800198e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800198a:	2301      	movs	r3, #1
 800198c:	e067      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800198e:	4b37      	ldr	r3, [pc, #220]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001990:	689b      	ldr	r3, [r3, #8]
 8001992:	f023 0203 	bic.w	r2, r3, #3
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	685b      	ldr	r3, [r3, #4]
 800199a:	4934      	ldr	r1, [pc, #208]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 800199c:	4313      	orrs	r3, r2
 800199e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80019a0:	f7ff fa5a 	bl	8000e58 <HAL_GetTick>
 80019a4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019a6:	e00a      	b.n	80019be <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80019a8:	f7ff fa56 	bl	8000e58 <HAL_GetTick>
 80019ac:	4602      	mov	r2, r0
 80019ae:	68fb      	ldr	r3, [r7, #12]
 80019b0:	1ad3      	subs	r3, r2, r3
 80019b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80019b6:	4293      	cmp	r3, r2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e04f      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80019be:	4b2b      	ldr	r3, [pc, #172]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 80019c0:	689b      	ldr	r3, [r3, #8]
 80019c2:	f003 020c 	and.w	r2, r3, #12
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	009b      	lsls	r3, r3, #2
 80019cc:	429a      	cmp	r2, r3
 80019ce:	d1eb      	bne.n	80019a8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80019d0:	4b25      	ldr	r3, [pc, #148]	; (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	f003 030f 	and.w	r3, r3, #15
 80019d8:	683a      	ldr	r2, [r7, #0]
 80019da:	429a      	cmp	r2, r3
 80019dc:	d20c      	bcs.n	80019f8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80019de:	4b22      	ldr	r3, [pc, #136]	; (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019e0:	683a      	ldr	r2, [r7, #0]
 80019e2:	b2d2      	uxtb	r2, r2
 80019e4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80019e6:	4b20      	ldr	r3, [pc, #128]	; (8001a68 <HAL_RCC_ClockConfig+0x1b8>)
 80019e8:	681b      	ldr	r3, [r3, #0]
 80019ea:	f003 030f 	and.w	r3, r3, #15
 80019ee:	683a      	ldr	r2, [r7, #0]
 80019f0:	429a      	cmp	r2, r3
 80019f2:	d001      	beq.n	80019f8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80019f4:	2301      	movs	r3, #1
 80019f6:	e032      	b.n	8001a5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681b      	ldr	r3, [r3, #0]
 80019fc:	f003 0304 	and.w	r3, r3, #4
 8001a00:	2b00      	cmp	r3, #0
 8001a02:	d008      	beq.n	8001a16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a04:	4b19      	ldr	r3, [pc, #100]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a06:	689b      	ldr	r3, [r3, #8]
 8001a08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	68db      	ldr	r3, [r3, #12]
 8001a10:	4916      	ldr	r1, [pc, #88]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a12:	4313      	orrs	r3, r2
 8001a14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	f003 0308 	and.w	r3, r3, #8
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d009      	beq.n	8001a36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001a22:	4b12      	ldr	r3, [pc, #72]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a24:	689b      	ldr	r3, [r3, #8]
 8001a26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	691b      	ldr	r3, [r3, #16]
 8001a2e:	00db      	lsls	r3, r3, #3
 8001a30:	490e      	ldr	r1, [pc, #56]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a32:	4313      	orrs	r3, r2
 8001a34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001a36:	f000 f821 	bl	8001a7c <HAL_RCC_GetSysClockFreq>
 8001a3a:	4601      	mov	r1, r0
 8001a3c:	4b0b      	ldr	r3, [pc, #44]	; (8001a6c <HAL_RCC_ClockConfig+0x1bc>)
 8001a3e:	689b      	ldr	r3, [r3, #8]
 8001a40:	091b      	lsrs	r3, r3, #4
 8001a42:	f003 030f 	and.w	r3, r3, #15
 8001a46:	4a0a      	ldr	r2, [pc, #40]	; (8001a70 <HAL_RCC_ClockConfig+0x1c0>)
 8001a48:	5cd3      	ldrb	r3, [r2, r3]
 8001a4a:	fa21 f303 	lsr.w	r3, r1, r3
 8001a4e:	4a09      	ldr	r2, [pc, #36]	; (8001a74 <HAL_RCC_ClockConfig+0x1c4>)
 8001a50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8001a52:	4b09      	ldr	r3, [pc, #36]	; (8001a78 <HAL_RCC_ClockConfig+0x1c8>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7ff f8f6 	bl	8000c48 <HAL_InitTick>

  return HAL_OK;
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3710      	adds	r7, #16
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	40023c00 	.word	0x40023c00
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	080059ac 	.word	0x080059ac
 8001a74:	20000004 	.word	0x20000004
 8001a78:	20000008 	.word	0x20000008

08001a7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a7c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a7e:	b085      	sub	sp, #20
 8001a80:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001a82:	2300      	movs	r3, #0
 8001a84:	607b      	str	r3, [r7, #4]
 8001a86:	2300      	movs	r3, #0
 8001a88:	60fb      	str	r3, [r7, #12]
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8001a8e:	2300      	movs	r3, #0
 8001a90:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a92:	4b63      	ldr	r3, [pc, #396]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001a94:	689b      	ldr	r3, [r3, #8]
 8001a96:	f003 030c 	and.w	r3, r3, #12
 8001a9a:	2b04      	cmp	r3, #4
 8001a9c:	d007      	beq.n	8001aae <HAL_RCC_GetSysClockFreq+0x32>
 8001a9e:	2b08      	cmp	r3, #8
 8001aa0:	d008      	beq.n	8001ab4 <HAL_RCC_GetSysClockFreq+0x38>
 8001aa2:	2b00      	cmp	r3, #0
 8001aa4:	f040 80b4 	bne.w	8001c10 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001aa8:	4b5e      	ldr	r3, [pc, #376]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001aaa:	60bb      	str	r3, [r7, #8]
       break;
 8001aac:	e0b3      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001aae:	4b5e      	ldr	r3, [pc, #376]	; (8001c28 <HAL_RCC_GetSysClockFreq+0x1ac>)
 8001ab0:	60bb      	str	r3, [r7, #8]
      break;
 8001ab2:	e0b0      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ab4:	4b5a      	ldr	r3, [pc, #360]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ab6:	685b      	ldr	r3, [r3, #4]
 8001ab8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001abc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001abe:	4b58      	ldr	r3, [pc, #352]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ac6:	2b00      	cmp	r3, #0
 8001ac8:	d04a      	beq.n	8001b60 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001aca:	4b55      	ldr	r3, [pc, #340]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001acc:	685b      	ldr	r3, [r3, #4]
 8001ace:	099b      	lsrs	r3, r3, #6
 8001ad0:	f04f 0400 	mov.w	r4, #0
 8001ad4:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001ad8:	f04f 0200 	mov.w	r2, #0
 8001adc:	ea03 0501 	and.w	r5, r3, r1
 8001ae0:	ea04 0602 	and.w	r6, r4, r2
 8001ae4:	4629      	mov	r1, r5
 8001ae6:	4632      	mov	r2, r6
 8001ae8:	f04f 0300 	mov.w	r3, #0
 8001aec:	f04f 0400 	mov.w	r4, #0
 8001af0:	0154      	lsls	r4, r2, #5
 8001af2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001af6:	014b      	lsls	r3, r1, #5
 8001af8:	4619      	mov	r1, r3
 8001afa:	4622      	mov	r2, r4
 8001afc:	1b49      	subs	r1, r1, r5
 8001afe:	eb62 0206 	sbc.w	r2, r2, r6
 8001b02:	f04f 0300 	mov.w	r3, #0
 8001b06:	f04f 0400 	mov.w	r4, #0
 8001b0a:	0194      	lsls	r4, r2, #6
 8001b0c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001b10:	018b      	lsls	r3, r1, #6
 8001b12:	1a5b      	subs	r3, r3, r1
 8001b14:	eb64 0402 	sbc.w	r4, r4, r2
 8001b18:	f04f 0100 	mov.w	r1, #0
 8001b1c:	f04f 0200 	mov.w	r2, #0
 8001b20:	00e2      	lsls	r2, r4, #3
 8001b22:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001b26:	00d9      	lsls	r1, r3, #3
 8001b28:	460b      	mov	r3, r1
 8001b2a:	4614      	mov	r4, r2
 8001b2c:	195b      	adds	r3, r3, r5
 8001b2e:	eb44 0406 	adc.w	r4, r4, r6
 8001b32:	f04f 0100 	mov.w	r1, #0
 8001b36:	f04f 0200 	mov.w	r2, #0
 8001b3a:	0262      	lsls	r2, r4, #9
 8001b3c:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8001b40:	0259      	lsls	r1, r3, #9
 8001b42:	460b      	mov	r3, r1
 8001b44:	4614      	mov	r4, r2
 8001b46:	4618      	mov	r0, r3
 8001b48:	4621      	mov	r1, r4
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	f04f 0400 	mov.w	r4, #0
 8001b50:	461a      	mov	r2, r3
 8001b52:	4623      	mov	r3, r4
 8001b54:	f7fe fb3c 	bl	80001d0 <__aeabi_uldivmod>
 8001b58:	4603      	mov	r3, r0
 8001b5a:	460c      	mov	r4, r1
 8001b5c:	60fb      	str	r3, [r7, #12]
 8001b5e:	e049      	b.n	8001bf4 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b60:	4b2f      	ldr	r3, [pc, #188]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	099b      	lsrs	r3, r3, #6
 8001b66:	f04f 0400 	mov.w	r4, #0
 8001b6a:	f240 11ff 	movw	r1, #511	; 0x1ff
 8001b6e:	f04f 0200 	mov.w	r2, #0
 8001b72:	ea03 0501 	and.w	r5, r3, r1
 8001b76:	ea04 0602 	and.w	r6, r4, r2
 8001b7a:	4629      	mov	r1, r5
 8001b7c:	4632      	mov	r2, r6
 8001b7e:	f04f 0300 	mov.w	r3, #0
 8001b82:	f04f 0400 	mov.w	r4, #0
 8001b86:	0154      	lsls	r4, r2, #5
 8001b88:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001b8c:	014b      	lsls	r3, r1, #5
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4622      	mov	r2, r4
 8001b92:	1b49      	subs	r1, r1, r5
 8001b94:	eb62 0206 	sbc.w	r2, r2, r6
 8001b98:	f04f 0300 	mov.w	r3, #0
 8001b9c:	f04f 0400 	mov.w	r4, #0
 8001ba0:	0194      	lsls	r4, r2, #6
 8001ba2:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8001ba6:	018b      	lsls	r3, r1, #6
 8001ba8:	1a5b      	subs	r3, r3, r1
 8001baa:	eb64 0402 	sbc.w	r4, r4, r2
 8001bae:	f04f 0100 	mov.w	r1, #0
 8001bb2:	f04f 0200 	mov.w	r2, #0
 8001bb6:	00e2      	lsls	r2, r4, #3
 8001bb8:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8001bbc:	00d9      	lsls	r1, r3, #3
 8001bbe:	460b      	mov	r3, r1
 8001bc0:	4614      	mov	r4, r2
 8001bc2:	195b      	adds	r3, r3, r5
 8001bc4:	eb44 0406 	adc.w	r4, r4, r6
 8001bc8:	f04f 0100 	mov.w	r1, #0
 8001bcc:	f04f 0200 	mov.w	r2, #0
 8001bd0:	02a2      	lsls	r2, r4, #10
 8001bd2:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8001bd6:	0299      	lsls	r1, r3, #10
 8001bd8:	460b      	mov	r3, r1
 8001bda:	4614      	mov	r4, r2
 8001bdc:	4618      	mov	r0, r3
 8001bde:	4621      	mov	r1, r4
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	f04f 0400 	mov.w	r4, #0
 8001be6:	461a      	mov	r2, r3
 8001be8:	4623      	mov	r3, r4
 8001bea:	f7fe faf1 	bl	80001d0 <__aeabi_uldivmod>
 8001bee:	4603      	mov	r3, r0
 8001bf0:	460c      	mov	r4, r1
 8001bf2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001bf4:	4b0a      	ldr	r3, [pc, #40]	; (8001c20 <HAL_RCC_GetSysClockFreq+0x1a4>)
 8001bf6:	685b      	ldr	r3, [r3, #4]
 8001bf8:	0c1b      	lsrs	r3, r3, #16
 8001bfa:	f003 0303 	and.w	r3, r3, #3
 8001bfe:	3301      	adds	r3, #1
 8001c00:	005b      	lsls	r3, r3, #1
 8001c02:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8001c04:	68fa      	ldr	r2, [r7, #12]
 8001c06:	683b      	ldr	r3, [r7, #0]
 8001c08:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c0c:	60bb      	str	r3, [r7, #8]
      break;
 8001c0e:	e002      	b.n	8001c16 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c10:	4b04      	ldr	r3, [pc, #16]	; (8001c24 <HAL_RCC_GetSysClockFreq+0x1a8>)
 8001c12:	60bb      	str	r3, [r7, #8]
      break;
 8001c14:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c16:	68bb      	ldr	r3, [r7, #8]
}
 8001c18:	4618      	mov	r0, r3
 8001c1a:	3714      	adds	r7, #20
 8001c1c:	46bd      	mov	sp, r7
 8001c1e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c20:	40023800 	.word	0x40023800
 8001c24:	00f42400 	.word	0x00f42400
 8001c28:	007a1200 	.word	0x007a1200

08001c2c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c30:	4b03      	ldr	r3, [pc, #12]	; (8001c40 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c32:	681b      	ldr	r3, [r3, #0]
}
 8001c34:	4618      	mov	r0, r3
 8001c36:	46bd      	mov	sp, r7
 8001c38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c3c:	4770      	bx	lr
 8001c3e:	bf00      	nop
 8001c40:	20000004 	.word	0x20000004

08001c44 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001c48:	f7ff fff0 	bl	8001c2c <HAL_RCC_GetHCLKFreq>
 8001c4c:	4601      	mov	r1, r0
 8001c4e:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	0a9b      	lsrs	r3, r3, #10
 8001c54:	f003 0307 	and.w	r3, r3, #7
 8001c58:	4a03      	ldr	r2, [pc, #12]	; (8001c68 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c5a:	5cd3      	ldrb	r3, [r2, r3]
 8001c5c:	fa21 f303 	lsr.w	r3, r1, r3
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	bd80      	pop	{r7, pc}
 8001c64:	40023800 	.word	0x40023800
 8001c68:	080059bc 	.word	0x080059bc

08001c6c <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8001c6c:	b480      	push	{r7}
 8001c6e:	b083      	sub	sp, #12
 8001c70:	af00      	add	r7, sp, #0
 8001c72:	6078      	str	r0, [r7, #4]
 8001c74:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	220f      	movs	r2, #15
 8001c7a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8001c7c:	4b12      	ldr	r3, [pc, #72]	; (8001cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c7e:	689b      	ldr	r3, [r3, #8]
 8001c80:	f003 0203 	and.w	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8001c88:	4b0f      	ldr	r3, [pc, #60]	; (8001cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c8a:	689b      	ldr	r3, [r3, #8]
 8001c8c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8001c94:	4b0c      	ldr	r3, [pc, #48]	; (8001cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001c96:	689b      	ldr	r3, [r3, #8]
 8001c98:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8001ca0:	4b09      	ldr	r3, [pc, #36]	; (8001cc8 <HAL_RCC_GetClockConfig+0x5c>)
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	08db      	lsrs	r3, r3, #3
 8001ca6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8001cae:	4b07      	ldr	r3, [pc, #28]	; (8001ccc <HAL_RCC_GetClockConfig+0x60>)
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	f003 020f 	and.w	r2, r3, #15
 8001cb6:	683b      	ldr	r3, [r7, #0]
 8001cb8:	601a      	str	r2, [r3, #0]
}
 8001cba:	bf00      	nop
 8001cbc:	370c      	adds	r7, #12
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc4:	4770      	bx	lr
 8001cc6:	bf00      	nop
 8001cc8:	40023800 	.word	0x40023800
 8001ccc:	40023c00 	.word	0x40023c00

08001cd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
 8001cd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d101      	bne.n	8001ce2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001cde:	2301      	movs	r3, #1
 8001ce0:	e01d      	b.n	8001d1e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001ce8:	b2db      	uxtb	r3, r3
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d106      	bne.n	8001cfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cf6:	6878      	ldr	r0, [r7, #4]
 8001cf8:	f7fe ff02 	bl	8000b00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2202      	movs	r2, #2
 8001d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681a      	ldr	r2, [r3, #0]
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	3304      	adds	r3, #4
 8001d0c:	4619      	mov	r1, r3
 8001d0e:	4610      	mov	r0, r2
 8001d10:	f000 fdac 	bl	800286c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	2201      	movs	r2, #1
 8001d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001d1c:	2300      	movs	r3, #0
}
 8001d1e:	4618      	mov	r0, r3
 8001d20:	3708      	adds	r7, #8
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}

08001d26 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d26:	b480      	push	{r7}
 8001d28:	b085      	sub	sp, #20
 8001d2a:	af00      	add	r7, sp, #0
 8001d2c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	68da      	ldr	r2, [r3, #12]
 8001d34:	687b      	ldr	r3, [r7, #4]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f042 0201 	orr.w	r2, r2, #1
 8001d3c:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f003 0307 	and.w	r3, r3, #7
 8001d48:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	2b06      	cmp	r3, #6
 8001d4e:	d007      	beq.n	8001d60 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	681a      	ldr	r2, [r3, #0]
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	f042 0201 	orr.w	r2, r2, #1
 8001d5e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001d60:	2300      	movs	r3, #0
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3714      	adds	r7, #20
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr

08001d6e <HAL_TIM_OC_Init>:
  *         Ex: call @ref HAL_TIM_OC_DeInit() before HAL_TIM_OC_Init()
  * @param  htim TIM Output Compare handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Init(TIM_HandleTypeDef *htim)
{
 8001d6e:	b580      	push	{r7, lr}
 8001d70:	b082      	sub	sp, #8
 8001d72:	af00      	add	r7, sp, #0
 8001d74:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d101      	bne.n	8001d80 <HAL_TIM_OC_Init+0x12>
  {
    return HAL_ERROR;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	e01d      	b.n	8001dbc <HAL_TIM_OC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001d86:	b2db      	uxtb	r3, r3
 8001d88:	2b00      	cmp	r3, #0
 8001d8a:	d106      	bne.n	8001d9a <HAL_TIM_OC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2200      	movs	r2, #0
 8001d90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->OC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_OC_MspInit(htim);
 8001d94:	6878      	ldr	r0, [r7, #4]
 8001d96:	f000 f815 	bl	8001dc4 <HAL_TIM_OC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	2202      	movs	r2, #2
 8001d9e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the Output Compare */
  TIM_Base_SetConfig(htim->Instance,  &htim->Init);
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681a      	ldr	r2, [r3, #0]
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	3304      	adds	r3, #4
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f000 fd5d 	bl	800286c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	2201      	movs	r2, #1
 8001db6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8001dba:	2300      	movs	r3, #0
}
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	3708      	adds	r7, #8
 8001dc0:	46bd      	mov	sp, r7
 8001dc2:	bd80      	pop	{r7, pc}

08001dc4 <HAL_TIM_OC_MspInit>:
  * @brief  Initializes the TIM Output Compare MSP.
  * @param  htim TIM Output Compare handle
  * @retval None
  */
__weak void HAL_TIM_OC_MspInit(TIM_HandleTypeDef *htim)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	b083      	sub	sp, #12
 8001dc8:	af00      	add	r7, sp, #0
 8001dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_MspInit could be implemented in the user file
   */
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr

08001dd8 <HAL_TIM_OC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b084      	sub	sp, #16
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	6078      	str	r0, [r7, #4]
 8001de0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	2b0c      	cmp	r3, #12
 8001de6:	d841      	bhi.n	8001e6c <HAL_TIM_OC_Start_IT+0x94>
 8001de8:	a201      	add	r2, pc, #4	; (adr r2, 8001df0 <HAL_TIM_OC_Start_IT+0x18>)
 8001dea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001dee:	bf00      	nop
 8001df0:	08001e25 	.word	0x08001e25
 8001df4:	08001e6d 	.word	0x08001e6d
 8001df8:	08001e6d 	.word	0x08001e6d
 8001dfc:	08001e6d 	.word	0x08001e6d
 8001e00:	08001e37 	.word	0x08001e37
 8001e04:	08001e6d 	.word	0x08001e6d
 8001e08:	08001e6d 	.word	0x08001e6d
 8001e0c:	08001e6d 	.word	0x08001e6d
 8001e10:	08001e49 	.word	0x08001e49
 8001e14:	08001e6d 	.word	0x08001e6d
 8001e18:	08001e6d 	.word	0x08001e6d
 8001e1c:	08001e6d 	.word	0x08001e6d
 8001e20:	08001e5b 	.word	0x08001e5b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	68da      	ldr	r2, [r3, #12]
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	681b      	ldr	r3, [r3, #0]
 8001e2e:	f042 0202 	orr.w	r2, r2, #2
 8001e32:	60da      	str	r2, [r3, #12]
      break;
 8001e34:	e01b      	b.n	8001e6e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68da      	ldr	r2, [r3, #12]
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	f042 0204 	orr.w	r2, r2, #4
 8001e44:	60da      	str	r2, [r3, #12]
      break;
 8001e46:	e012      	b.n	8001e6e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	68da      	ldr	r2, [r3, #12]
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f042 0208 	orr.w	r2, r2, #8
 8001e56:	60da      	str	r2, [r3, #12]
      break;
 8001e58:	e009      	b.n	8001e6e <HAL_TIM_OC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	68da      	ldr	r2, [r3, #12]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	f042 0210 	orr.w	r2, r2, #16
 8001e68:	60da      	str	r2, [r3, #12]
      break;
 8001e6a:	e000      	b.n	8001e6e <HAL_TIM_OC_Start_IT+0x96>
    }

    default:
      break;
 8001e6c:	bf00      	nop
  }

  /* Enable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	681b      	ldr	r3, [r3, #0]
 8001e72:	2201      	movs	r2, #1
 8001e74:	6839      	ldr	r1, [r7, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f001 f90c 	bl	8003094 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	681b      	ldr	r3, [r3, #0]
 8001e80:	4a15      	ldr	r2, [pc, #84]	; (8001ed8 <HAL_TIM_OC_Start_IT+0x100>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d004      	beq.n	8001e90 <HAL_TIM_OC_Start_IT+0xb8>
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a14      	ldr	r2, [pc, #80]	; (8001edc <HAL_TIM_OC_Start_IT+0x104>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_TIM_OC_Start_IT+0xbc>
 8001e90:	2301      	movs	r3, #1
 8001e92:	e000      	b.n	8001e96 <HAL_TIM_OC_Start_IT+0xbe>
 8001e94:	2300      	movs	r3, #0
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d007      	beq.n	8001eaa <HAL_TIM_OC_Start_IT+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001ea8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 0307 	and.w	r3, r3, #7
 8001eb4:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001eb6:	68fb      	ldr	r3, [r7, #12]
 8001eb8:	2b06      	cmp	r3, #6
 8001eba:	d007      	beq.n	8001ecc <HAL_TIM_OC_Start_IT+0xf4>
  {
    __HAL_TIM_ENABLE(htim);
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	681a      	ldr	r2, [r3, #0]
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f042 0201 	orr.w	r2, r2, #1
 8001eca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ecc:	2300      	movs	r3, #0
}
 8001ece:	4618      	mov	r0, r3
 8001ed0:	3710      	adds	r7, #16
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40010000 	.word	0x40010000
 8001edc:	40010400 	.word	0x40010400

08001ee0 <HAL_TIM_OC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ee0:	b580      	push	{r7, lr}
 8001ee2:	b082      	sub	sp, #8
 8001ee4:	af00      	add	r7, sp, #0
 8001ee6:	6078      	str	r0, [r7, #4]
 8001ee8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8001eea:	683b      	ldr	r3, [r7, #0]
 8001eec:	2b0c      	cmp	r3, #12
 8001eee:	d841      	bhi.n	8001f74 <HAL_TIM_OC_Stop_IT+0x94>
 8001ef0:	a201      	add	r2, pc, #4	; (adr r2, 8001ef8 <HAL_TIM_OC_Stop_IT+0x18>)
 8001ef2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ef6:	bf00      	nop
 8001ef8:	08001f2d 	.word	0x08001f2d
 8001efc:	08001f75 	.word	0x08001f75
 8001f00:	08001f75 	.word	0x08001f75
 8001f04:	08001f75 	.word	0x08001f75
 8001f08:	08001f3f 	.word	0x08001f3f
 8001f0c:	08001f75 	.word	0x08001f75
 8001f10:	08001f75 	.word	0x08001f75
 8001f14:	08001f75 	.word	0x08001f75
 8001f18:	08001f51 	.word	0x08001f51
 8001f1c:	08001f75 	.word	0x08001f75
 8001f20:	08001f75 	.word	0x08001f75
 8001f24:	08001f75 	.word	0x08001f75
 8001f28:	08001f63 	.word	0x08001f63
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	68da      	ldr	r2, [r3, #12]
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f022 0202 	bic.w	r2, r2, #2
 8001f3a:	60da      	str	r2, [r3, #12]
      break;
 8001f3c:	e01b      	b.n	8001f76 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	68da      	ldr	r2, [r3, #12]
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f022 0204 	bic.w	r2, r2, #4
 8001f4c:	60da      	str	r2, [r3, #12]
      break;
 8001f4e:	e012      	b.n	8001f76 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	68da      	ldr	r2, [r3, #12]
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	f022 0208 	bic.w	r2, r2, #8
 8001f5e:	60da      	str	r2, [r3, #12]
      break;
 8001f60:	e009      	b.n	8001f76 <HAL_TIM_OC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	68da      	ldr	r2, [r3, #12]
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0210 	bic.w	r2, r2, #16
 8001f70:	60da      	str	r2, [r3, #12]
      break;
 8001f72:	e000      	b.n	8001f76 <HAL_TIM_OC_Stop_IT+0x96>
    }

    default:
      break;
 8001f74:	bf00      	nop
  }

  /* Disable the Output compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	6839      	ldr	r1, [r7, #0]
 8001f7e:	4618      	mov	r0, r3
 8001f80:	f001 f888 	bl	8003094 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	4a20      	ldr	r2, [pc, #128]	; (800200c <HAL_TIM_OC_Stop_IT+0x12c>)
 8001f8a:	4293      	cmp	r3, r2
 8001f8c:	d004      	beq.n	8001f98 <HAL_TIM_OC_Stop_IT+0xb8>
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1f      	ldr	r2, [pc, #124]	; (8002010 <HAL_TIM_OC_Stop_IT+0x130>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d101      	bne.n	8001f9c <HAL_TIM_OC_Stop_IT+0xbc>
 8001f98:	2301      	movs	r3, #1
 8001f9a:	e000      	b.n	8001f9e <HAL_TIM_OC_Stop_IT+0xbe>
 8001f9c:	2300      	movs	r3, #0
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d017      	beq.n	8001fd2 <HAL_TIM_OC_Stop_IT+0xf2>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	6a1a      	ldr	r2, [r3, #32]
 8001fa8:	f241 1311 	movw	r3, #4369	; 0x1111
 8001fac:	4013      	ands	r3, r2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d10f      	bne.n	8001fd2 <HAL_TIM_OC_Stop_IT+0xf2>
 8001fb2:	687b      	ldr	r3, [r7, #4]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	6a1a      	ldr	r2, [r3, #32]
 8001fb8:	f240 4344 	movw	r3, #1092	; 0x444
 8001fbc:	4013      	ands	r3, r2
 8001fbe:	2b00      	cmp	r3, #0
 8001fc0:	d107      	bne.n	8001fd2 <HAL_TIM_OC_Stop_IT+0xf2>
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fd0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8001fd2:	687b      	ldr	r3, [r7, #4]
 8001fd4:	681b      	ldr	r3, [r3, #0]
 8001fd6:	6a1a      	ldr	r2, [r3, #32]
 8001fd8:	f241 1311 	movw	r3, #4369	; 0x1111
 8001fdc:	4013      	ands	r3, r2
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d10f      	bne.n	8002002 <HAL_TIM_OC_Stop_IT+0x122>
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	6a1a      	ldr	r2, [r3, #32]
 8001fe8:	f240 4344 	movw	r3, #1092	; 0x444
 8001fec:	4013      	ands	r3, r2
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d107      	bne.n	8002002 <HAL_TIM_OC_Stop_IT+0x122>
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	681a      	ldr	r2, [r3, #0]
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	f022 0201 	bic.w	r2, r2, #1
 8002000:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002002:	2300      	movs	r3, #0
}
 8002004:	4618      	mov	r0, r3
 8002006:	3708      	adds	r7, #8
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	40010000 	.word	0x40010000
 8002010:	40010400 	.word	0x40010400

08002014 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b082      	sub	sp, #8
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d101      	bne.n	8002026 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e01d      	b.n	8002062 <HAL_TIM_IC_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800202c:	b2db      	uxtb	r3, r3
 800202e:	2b00      	cmp	r3, #0
 8002030:	d106      	bne.n	8002040 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	2200      	movs	r2, #0
 8002036:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 f815 	bl	800206a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	2202      	movs	r2, #2
 8002044:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681a      	ldr	r2, [r3, #0]
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3304      	adds	r3, #4
 8002050:	4619      	mov	r1, r3
 8002052:	4610      	mov	r0, r2
 8002054:	f000 fc0a 	bl	800286c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	2201      	movs	r2, #1
 800205c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002060:	2300      	movs	r3, #0
}
 8002062:	4618      	mov	r0, r3
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800206a:	b480      	push	{r7}
 800206c:	b083      	sub	sp, #12
 800206e:	af00      	add	r7, sp, #0
 8002070:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8002072:	bf00      	nop
 8002074:	370c      	adds	r7, #12
 8002076:	46bd      	mov	sp, r7
 8002078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207c:	4770      	bx	lr
	...

08002080 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b084      	sub	sp, #16
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	2b0c      	cmp	r3, #12
 800208e:	d841      	bhi.n	8002114 <HAL_TIM_IC_Start_IT+0x94>
 8002090:	a201      	add	r2, pc, #4	; (adr r2, 8002098 <HAL_TIM_IC_Start_IT+0x18>)
 8002092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002096:	bf00      	nop
 8002098:	080020cd 	.word	0x080020cd
 800209c:	08002115 	.word	0x08002115
 80020a0:	08002115 	.word	0x08002115
 80020a4:	08002115 	.word	0x08002115
 80020a8:	080020df 	.word	0x080020df
 80020ac:	08002115 	.word	0x08002115
 80020b0:	08002115 	.word	0x08002115
 80020b4:	08002115 	.word	0x08002115
 80020b8:	080020f1 	.word	0x080020f1
 80020bc:	08002115 	.word	0x08002115
 80020c0:	08002115 	.word	0x08002115
 80020c4:	08002115 	.word	0x08002115
 80020c8:	08002103 	.word	0x08002103
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	68da      	ldr	r2, [r3, #12]
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	f042 0202 	orr.w	r2, r2, #2
 80020da:	60da      	str	r2, [r3, #12]
      break;
 80020dc:	e01b      	b.n	8002116 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	68da      	ldr	r2, [r3, #12]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f042 0204 	orr.w	r2, r2, #4
 80020ec:	60da      	str	r2, [r3, #12]
      break;
 80020ee:	e012      	b.n	8002116 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	68da      	ldr	r2, [r3, #12]
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	f042 0208 	orr.w	r2, r2, #8
 80020fe:	60da      	str	r2, [r3, #12]
      break;
 8002100:	e009      	b.n	8002116 <HAL_TIM_IC_Start_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	68da      	ldr	r2, [r3, #12]
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f042 0210 	orr.w	r2, r2, #16
 8002110:	60da      	str	r2, [r3, #12]
      break;
 8002112:	e000      	b.n	8002116 <HAL_TIM_IC_Start_IT+0x96>
    }

    default:
      break;
 8002114:	bf00      	nop
  }
  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	2201      	movs	r2, #1
 800211c:	6839      	ldr	r1, [r7, #0]
 800211e:	4618      	mov	r0, r3
 8002120:	f000 ffb8 	bl	8003094 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	689b      	ldr	r3, [r3, #8]
 800212a:	f003 0307 	and.w	r3, r3, #7
 800212e:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002130:	68fb      	ldr	r3, [r7, #12]
 8002132:	2b06      	cmp	r3, #6
 8002134:	d007      	beq.n	8002146 <HAL_TIM_IC_Start_IT+0xc6>
  {
    __HAL_TIM_ENABLE(htim);
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	681a      	ldr	r2, [r3, #0]
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	f042 0201 	orr.w	r2, r2, #1
 8002144:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002146:	2300      	movs	r3, #0
}
 8002148:	4618      	mov	r0, r3
 800214a:	3710      	adds	r7, #16
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002150:	b580      	push	{r7, lr}
 8002152:	b082      	sub	sp, #8
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
 8002158:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 800215a:	683b      	ldr	r3, [r7, #0]
 800215c:	2b0c      	cmp	r3, #12
 800215e:	d841      	bhi.n	80021e4 <HAL_TIM_IC_Stop_IT+0x94>
 8002160:	a201      	add	r2, pc, #4	; (adr r2, 8002168 <HAL_TIM_IC_Stop_IT+0x18>)
 8002162:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002166:	bf00      	nop
 8002168:	0800219d 	.word	0x0800219d
 800216c:	080021e5 	.word	0x080021e5
 8002170:	080021e5 	.word	0x080021e5
 8002174:	080021e5 	.word	0x080021e5
 8002178:	080021af 	.word	0x080021af
 800217c:	080021e5 	.word	0x080021e5
 8002180:	080021e5 	.word	0x080021e5
 8002184:	080021e5 	.word	0x080021e5
 8002188:	080021c1 	.word	0x080021c1
 800218c:	080021e5 	.word	0x080021e5
 8002190:	080021e5 	.word	0x080021e5
 8002194:	080021e5 	.word	0x080021e5
 8002198:	080021d3 	.word	0x080021d3
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	68da      	ldr	r2, [r3, #12]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0202 	bic.w	r2, r2, #2
 80021aa:	60da      	str	r2, [r3, #12]
      break;
 80021ac:	e01b      	b.n	80021e6 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	68da      	ldr	r2, [r3, #12]
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	f022 0204 	bic.w	r2, r2, #4
 80021bc:	60da      	str	r2, [r3, #12]
      break;
 80021be:	e012      	b.n	80021e6 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	68da      	ldr	r2, [r3, #12]
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	f022 0208 	bic.w	r2, r2, #8
 80021ce:	60da      	str	r2, [r3, #12]
      break;
 80021d0:	e009      	b.n	80021e6 <HAL_TIM_IC_Stop_IT+0x96>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	68da      	ldr	r2, [r3, #12]
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f022 0210 	bic.w	r2, r2, #16
 80021e0:	60da      	str	r2, [r3, #12]
      break;
 80021e2:	e000      	b.n	80021e6 <HAL_TIM_IC_Stop_IT+0x96>
    }

    default:
      break;
 80021e4:	bf00      	nop
  }

  /* Disable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80021e6:	687b      	ldr	r3, [r7, #4]
 80021e8:	681b      	ldr	r3, [r3, #0]
 80021ea:	2200      	movs	r2, #0
 80021ec:	6839      	ldr	r1, [r7, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f000 ff50 	bl	8003094 <TIM_CCxChannelCmd>

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	6a1a      	ldr	r2, [r3, #32]
 80021fa:	f241 1311 	movw	r3, #4369	; 0x1111
 80021fe:	4013      	ands	r3, r2
 8002200:	2b00      	cmp	r3, #0
 8002202:	d10f      	bne.n	8002224 <HAL_TIM_IC_Stop_IT+0xd4>
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	6a1a      	ldr	r2, [r3, #32]
 800220a:	f240 4344 	movw	r3, #1092	; 0x444
 800220e:	4013      	ands	r3, r2
 8002210:	2b00      	cmp	r3, #0
 8002212:	d107      	bne.n	8002224 <HAL_TIM_IC_Stop_IT+0xd4>
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	681a      	ldr	r2, [r3, #0]
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f022 0201 	bic.w	r2, r2, #1
 8002222:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8002224:	2300      	movs	r3, #0
}
 8002226:	4618      	mov	r0, r3
 8002228:	3708      	adds	r7, #8
 800222a:	46bd      	mov	sp, r7
 800222c:	bd80      	pop	{r7, pc}
 800222e:	bf00      	nop

08002230 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b082      	sub	sp, #8
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0302 	and.w	r3, r3, #2
 8002242:	2b02      	cmp	r3, #2
 8002244:	d122      	bne.n	800228c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0302 	and.w	r3, r3, #2
 8002250:	2b02      	cmp	r3, #2
 8002252:	d11b      	bne.n	800228c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0202 	mvn.w	r2, #2
 800225c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	2201      	movs	r2, #1
 8002262:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	699b      	ldr	r3, [r3, #24]
 800226a:	f003 0303 	and.w	r3, r3, #3
 800226e:	2b00      	cmp	r3, #0
 8002270:	d003      	beq.n	800227a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002272:	6878      	ldr	r0, [r7, #4]
 8002274:	f7fe f946 	bl	8000504 <HAL_TIM_IC_CaptureCallback>
 8002278:	e005      	b.n	8002286 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800227a:	6878      	ldr	r0, [r7, #4]
 800227c:	f000 fad8 	bl	8002830 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002280:	6878      	ldr	r0, [r7, #4]
 8002282:	f000 fadf 	bl	8002844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	2200      	movs	r2, #0
 800228a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	691b      	ldr	r3, [r3, #16]
 8002292:	f003 0304 	and.w	r3, r3, #4
 8002296:	2b04      	cmp	r3, #4
 8002298:	d122      	bne.n	80022e0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800229a:	687b      	ldr	r3, [r7, #4]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	f003 0304 	and.w	r3, r3, #4
 80022a4:	2b04      	cmp	r3, #4
 80022a6:	d11b      	bne.n	80022e0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f06f 0204 	mvn.w	r2, #4
 80022b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2202      	movs	r2, #2
 80022b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	681b      	ldr	r3, [r3, #0]
 80022bc:	699b      	ldr	r3, [r3, #24]
 80022be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80022c2:	2b00      	cmp	r3, #0
 80022c4:	d003      	beq.n	80022ce <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80022c6:	6878      	ldr	r0, [r7, #4]
 80022c8:	f7fe f91c 	bl	8000504 <HAL_TIM_IC_CaptureCallback>
 80022cc:	e005      	b.n	80022da <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80022ce:	6878      	ldr	r0, [r7, #4]
 80022d0:	f000 faae 	bl	8002830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80022d4:	6878      	ldr	r0, [r7, #4]
 80022d6:	f000 fab5 	bl	8002844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	2200      	movs	r2, #0
 80022de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	691b      	ldr	r3, [r3, #16]
 80022e6:	f003 0308 	and.w	r3, r3, #8
 80022ea:	2b08      	cmp	r3, #8
 80022ec:	d122      	bne.n	8002334 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	68db      	ldr	r3, [r3, #12]
 80022f4:	f003 0308 	and.w	r3, r3, #8
 80022f8:	2b08      	cmp	r3, #8
 80022fa:	d11b      	bne.n	8002334 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	f06f 0208 	mvn.w	r2, #8
 8002304:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	2204      	movs	r2, #4
 800230a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	69db      	ldr	r3, [r3, #28]
 8002312:	f003 0303 	and.w	r3, r3, #3
 8002316:	2b00      	cmp	r3, #0
 8002318:	d003      	beq.n	8002322 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800231a:	6878      	ldr	r0, [r7, #4]
 800231c:	f7fe f8f2 	bl	8000504 <HAL_TIM_IC_CaptureCallback>
 8002320:	e005      	b.n	800232e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002322:	6878      	ldr	r0, [r7, #4]
 8002324:	f000 fa84 	bl	8002830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002328:	6878      	ldr	r0, [r7, #4]
 800232a:	f000 fa8b 	bl	8002844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2200      	movs	r2, #0
 8002332:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	691b      	ldr	r3, [r3, #16]
 800233a:	f003 0310 	and.w	r3, r3, #16
 800233e:	2b10      	cmp	r3, #16
 8002340:	d122      	bne.n	8002388 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	68db      	ldr	r3, [r3, #12]
 8002348:	f003 0310 	and.w	r3, r3, #16
 800234c:	2b10      	cmp	r3, #16
 800234e:	d11b      	bne.n	8002388 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f06f 0210 	mvn.w	r2, #16
 8002358:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	2208      	movs	r2, #8
 800235e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69db      	ldr	r3, [r3, #28]
 8002366:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800236a:	2b00      	cmp	r3, #0
 800236c:	d003      	beq.n	8002376 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800236e:	6878      	ldr	r0, [r7, #4]
 8002370:	f7fe f8c8 	bl	8000504 <HAL_TIM_IC_CaptureCallback>
 8002374:	e005      	b.n	8002382 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002376:	6878      	ldr	r0, [r7, #4]
 8002378:	f000 fa5a 	bl	8002830 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f000 fa61 	bl	8002844 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	2200      	movs	r2, #0
 8002386:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	691b      	ldr	r3, [r3, #16]
 800238e:	f003 0301 	and.w	r3, r3, #1
 8002392:	2b01      	cmp	r3, #1
 8002394:	d10e      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	68db      	ldr	r3, [r3, #12]
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d107      	bne.n	80023b4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f06f 0201 	mvn.w	r2, #1
 80023ac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80023ae:	6878      	ldr	r0, [r7, #4]
 80023b0:	f7fe fb60 	bl	8000a74 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	681b      	ldr	r3, [r3, #0]
 80023b8:	691b      	ldr	r3, [r3, #16]
 80023ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023be:	2b80      	cmp	r3, #128	; 0x80
 80023c0:	d10e      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68db      	ldr	r3, [r3, #12]
 80023c8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023cc:	2b80      	cmp	r3, #128	; 0x80
 80023ce:	d107      	bne.n	80023e0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80023d0:	687b      	ldr	r3, [r7, #4]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80023d8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80023da:	6878      	ldr	r0, [r7, #4]
 80023dc:	f000 ff06 	bl	80031ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	691b      	ldr	r3, [r3, #16]
 80023e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023ea:	2b40      	cmp	r3, #64	; 0x40
 80023ec:	d10e      	bne.n	800240c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80023ee:	687b      	ldr	r3, [r7, #4]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	68db      	ldr	r3, [r3, #12]
 80023f4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80023f8:	2b40      	cmp	r3, #64	; 0x40
 80023fa:	d107      	bne.n	800240c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	f000 fa26 	bl	8002858 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	691b      	ldr	r3, [r3, #16]
 8002412:	f003 0320 	and.w	r3, r3, #32
 8002416:	2b20      	cmp	r3, #32
 8002418:	d10e      	bne.n	8002438 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	f003 0320 	and.w	r3, r3, #32
 8002424:	2b20      	cmp	r3, #32
 8002426:	d107      	bne.n	8002438 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	f06f 0220 	mvn.w	r2, #32
 8002430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002432:	6878      	ldr	r0, [r7, #4]
 8002434:	f000 fed0 	bl	80031d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002438:	bf00      	nop
 800243a:	3708      	adds	r7, #8
 800243c:	46bd      	mov	sp, r7
 800243e:	bd80      	pop	{r7, pc}

08002440 <HAL_TIM_OC_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_OC_ConfigChannel(TIM_HandleTypeDef *htim,
                                           TIM_OC_InitTypeDef *sConfig,
                                           uint32_t Channel)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b084      	sub	sp, #16
 8002444:	af00      	add	r7, sp, #0
 8002446:	60f8      	str	r0, [r7, #12]
 8002448:	60b9      	str	r1, [r7, #8]
 800244a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_CHANNELS(Channel));
  assert_param(IS_TIM_OC_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));

  /* Process Locked */
  __HAL_LOCK(htim);
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002452:	2b01      	cmp	r3, #1
 8002454:	d101      	bne.n	800245a <HAL_TIM_OC_ConfigChannel+0x1a>
 8002456:	2302      	movs	r3, #2
 8002458:	e04e      	b.n	80024f8 <HAL_TIM_OC_ConfigChannel+0xb8>
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	2201      	movs	r2, #1
 800245e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002462:	68fb      	ldr	r3, [r7, #12]
 8002464:	2202      	movs	r2, #2
 8002466:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	2b0c      	cmp	r3, #12
 800246e:	d839      	bhi.n	80024e4 <HAL_TIM_OC_ConfigChannel+0xa4>
 8002470:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <HAL_TIM_OC_ConfigChannel+0x38>)
 8002472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002476:	bf00      	nop
 8002478:	080024ad 	.word	0x080024ad
 800247c:	080024e5 	.word	0x080024e5
 8002480:	080024e5 	.word	0x080024e5
 8002484:	080024e5 	.word	0x080024e5
 8002488:	080024bb 	.word	0x080024bb
 800248c:	080024e5 	.word	0x080024e5
 8002490:	080024e5 	.word	0x080024e5
 8002494:	080024e5 	.word	0x080024e5
 8002498:	080024c9 	.word	0x080024c9
 800249c:	080024e5 	.word	0x080024e5
 80024a0:	080024e5 	.word	0x080024e5
 80024a4:	080024e5 	.word	0x080024e5
 80024a8:	080024d7 	.word	0x080024d7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 1 in Output Compare */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	68b9      	ldr	r1, [r7, #8]
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 fa7a 	bl	80029ac <TIM_OC1_SetConfig>
      break;
 80024b8:	e015      	b.n	80024e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 2 in Output Compare */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80024ba:	68fb      	ldr	r3, [r7, #12]
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	68b9      	ldr	r1, [r7, #8]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f000 fae3 	bl	8002a8c <TIM_OC2_SetConfig>
      break;
 80024c6:	e00e      	b.n	80024e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 3 in Output Compare */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	68b9      	ldr	r1, [r7, #8]
 80024ce:	4618      	mov	r0, r3
 80024d0:	f000 fb52 	bl	8002b78 <TIM_OC3_SetConfig>
      break;
 80024d4:	e007      	b.n	80024e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the TIM Channel 4 in Output Compare */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	68b9      	ldr	r1, [r7, #8]
 80024dc:	4618      	mov	r0, r3
 80024de:	f000 fbbf 	bl	8002c60 <TIM_OC4_SetConfig>
      break;
 80024e2:	e000      	b.n	80024e6 <HAL_TIM_OC_ConfigChannel+0xa6>
    }

    default:
      break;
 80024e4:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 80024e6:	68fb      	ldr	r3, [r7, #12]
 80024e8:	2201      	movs	r2, #1
 80024ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80024f6:	2300      	movs	r3, #0
}
 80024f8:	4618      	mov	r0, r3
 80024fa:	3710      	adds	r7, #16
 80024fc:	46bd      	mov	sp, r7
 80024fe:	bd80      	pop	{r7, pc}

08002500 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	b084      	sub	sp, #16
 8002504:	af00      	add	r7, sp, #0
 8002506:	60f8      	str	r0, [r7, #12]
 8002508:	60b9      	str	r1, [r7, #8]
 800250a:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002512:	2b01      	cmp	r3, #1
 8002514:	d101      	bne.n	800251a <HAL_TIM_IC_ConfigChannel+0x1a>
 8002516:	2302      	movs	r3, #2
 8002518:	e08a      	b.n	8002630 <HAL_TIM_IC_ConfigChannel+0x130>
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2201      	movs	r2, #1
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	2202      	movs	r2, #2
 8002526:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  if (Channel == TIM_CHANNEL_1)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d11b      	bne.n	8002568 <HAL_TIM_IC_ConfigChannel+0x68>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	6818      	ldr	r0, [r3, #0]
 8002534:	68bb      	ldr	r3, [r7, #8]
 8002536:	6819      	ldr	r1, [r3, #0]
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	685a      	ldr	r2, [r3, #4]
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	f000 fbe4 	bl	8002d0c <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8002544:	68fb      	ldr	r3, [r7, #12]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	699a      	ldr	r2, [r3, #24]
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f022 020c 	bic.w	r2, r2, #12
 8002552:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	6999      	ldr	r1, [r3, #24]
 800255a:	68bb      	ldr	r3, [r7, #8]
 800255c:	689a      	ldr	r2, [r3, #8]
 800255e:	68fb      	ldr	r3, [r7, #12]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	430a      	orrs	r2, r1
 8002564:	619a      	str	r2, [r3, #24]
 8002566:	e05a      	b.n	800261e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	2b04      	cmp	r3, #4
 800256c:	d11c      	bne.n	80025a8 <HAL_TIM_IC_ConfigChannel+0xa8>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800256e:	68fb      	ldr	r3, [r7, #12]
 8002570:	6818      	ldr	r0, [r3, #0]
 8002572:	68bb      	ldr	r3, [r7, #8]
 8002574:	6819      	ldr	r1, [r3, #0]
 8002576:	68bb      	ldr	r3, [r7, #8]
 8002578:	685a      	ldr	r2, [r3, #4]
 800257a:	68bb      	ldr	r3, [r7, #8]
 800257c:	68db      	ldr	r3, [r3, #12]
 800257e:	f000 fc68 	bl	8002e52 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8002582:	68fb      	ldr	r3, [r7, #12]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	699a      	ldr	r2, [r3, #24]
 8002588:	68fb      	ldr	r3, [r7, #12]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002590:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	6999      	ldr	r1, [r3, #24]
 8002598:	68bb      	ldr	r3, [r7, #8]
 800259a:	689b      	ldr	r3, [r3, #8]
 800259c:	021a      	lsls	r2, r3, #8
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	430a      	orrs	r2, r1
 80025a4:	619a      	str	r2, [r3, #24]
 80025a6:	e03a      	b.n	800261e <HAL_TIM_IC_ConfigChannel+0x11e>
  }
  else if (Channel == TIM_CHANNEL_3)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b08      	cmp	r3, #8
 80025ac:	d11b      	bne.n	80025e6 <HAL_TIM_IC_ConfigChannel+0xe6>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	6818      	ldr	r0, [r3, #0]
 80025b2:	68bb      	ldr	r3, [r7, #8]
 80025b4:	6819      	ldr	r1, [r3, #0]
 80025b6:	68bb      	ldr	r3, [r7, #8]
 80025b8:	685a      	ldr	r2, [r3, #4]
 80025ba:	68bb      	ldr	r3, [r7, #8]
 80025bc:	68db      	ldr	r3, [r3, #12]
 80025be:	f000 fcb5 	bl	8002f2c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80025c2:	68fb      	ldr	r3, [r7, #12]
 80025c4:	681b      	ldr	r3, [r3, #0]
 80025c6:	69da      	ldr	r2, [r3, #28]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	f022 020c 	bic.w	r2, r2, #12
 80025d0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	69d9      	ldr	r1, [r3, #28]
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	689a      	ldr	r2, [r3, #8]
 80025dc:	68fb      	ldr	r3, [r7, #12]
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	430a      	orrs	r2, r1
 80025e2:	61da      	str	r2, [r3, #28]
 80025e4:	e01b      	b.n	800261e <HAL_TIM_IC_ConfigChannel+0x11e>
  else
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6818      	ldr	r0, [r3, #0]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	6819      	ldr	r1, [r3, #0]
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	685a      	ldr	r2, [r3, #4]
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	f000 fcd5 	bl	8002fa4 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80025fa:	68fb      	ldr	r3, [r7, #12]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	69da      	ldr	r2, [r3, #28]
 8002600:	68fb      	ldr	r3, [r7, #12]
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8002608:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	69d9      	ldr	r1, [r3, #28]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	021a      	lsls	r2, r3, #8
 8002616:	68fb      	ldr	r3, [r7, #12]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	61da      	str	r2, [r3, #28]
  }

  htim->State = HAL_TIM_STATE_READY;
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2201      	movs	r2, #1
 8002622:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	2200      	movs	r2, #0
 800262a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800262e:	2300      	movs	r3, #0
}
 8002630:	4618      	mov	r0, r3
 8002632:	3710      	adds	r7, #16
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}

08002638 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002638:	b580      	push	{r7, lr}
 800263a:	b084      	sub	sp, #16
 800263c:	af00      	add	r7, sp, #0
 800263e:	6078      	str	r0, [r7, #4]
 8002640:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002648:	2b01      	cmp	r3, #1
 800264a:	d101      	bne.n	8002650 <HAL_TIM_ConfigClockSource+0x18>
 800264c:	2302      	movs	r3, #2
 800264e:	e0a6      	b.n	800279e <HAL_TIM_ConfigClockSource+0x166>
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	2201      	movs	r2, #1
 8002654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	2202      	movs	r2, #2
 800265c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	689b      	ldr	r3, [r3, #8]
 8002666:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800266e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002676:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68fa      	ldr	r2, [r7, #12]
 800267e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	2b40      	cmp	r3, #64	; 0x40
 8002686:	d067      	beq.n	8002758 <HAL_TIM_ConfigClockSource+0x120>
 8002688:	2b40      	cmp	r3, #64	; 0x40
 800268a:	d80b      	bhi.n	80026a4 <HAL_TIM_ConfigClockSource+0x6c>
 800268c:	2b10      	cmp	r3, #16
 800268e:	d073      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0x140>
 8002690:	2b10      	cmp	r3, #16
 8002692:	d802      	bhi.n	800269a <HAL_TIM_ConfigClockSource+0x62>
 8002694:	2b00      	cmp	r3, #0
 8002696:	d06f      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8002698:	e078      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800269a:	2b20      	cmp	r3, #32
 800269c:	d06c      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0x140>
 800269e:	2b30      	cmp	r3, #48	; 0x30
 80026a0:	d06a      	beq.n	8002778 <HAL_TIM_ConfigClockSource+0x140>
      break;
 80026a2:	e073      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026a4:	2b70      	cmp	r3, #112	; 0x70
 80026a6:	d00d      	beq.n	80026c4 <HAL_TIM_ConfigClockSource+0x8c>
 80026a8:	2b70      	cmp	r3, #112	; 0x70
 80026aa:	d804      	bhi.n	80026b6 <HAL_TIM_ConfigClockSource+0x7e>
 80026ac:	2b50      	cmp	r3, #80	; 0x50
 80026ae:	d033      	beq.n	8002718 <HAL_TIM_ConfigClockSource+0xe0>
 80026b0:	2b60      	cmp	r3, #96	; 0x60
 80026b2:	d041      	beq.n	8002738 <HAL_TIM_ConfigClockSource+0x100>
      break;
 80026b4:	e06a      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 80026b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026ba:	d066      	beq.n	800278a <HAL_TIM_ConfigClockSource+0x152>
 80026bc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80026c0:	d017      	beq.n	80026f2 <HAL_TIM_ConfigClockSource+0xba>
      break;
 80026c2:	e063      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	6818      	ldr	r0, [r3, #0]
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	6899      	ldr	r1, [r3, #8]
 80026cc:	683b      	ldr	r3, [r7, #0]
 80026ce:	685a      	ldr	r2, [r3, #4]
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	68db      	ldr	r3, [r3, #12]
 80026d4:	f000 fcbe 	bl	8003054 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	681b      	ldr	r3, [r3, #0]
 80026dc:	689b      	ldr	r3, [r3, #8]
 80026de:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80026e6:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	681b      	ldr	r3, [r3, #0]
 80026ec:	68fa      	ldr	r2, [r7, #12]
 80026ee:	609a      	str	r2, [r3, #8]
      break;
 80026f0:	e04c      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	6818      	ldr	r0, [r3, #0]
 80026f6:	683b      	ldr	r3, [r7, #0]
 80026f8:	6899      	ldr	r1, [r3, #8]
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	683b      	ldr	r3, [r7, #0]
 8002700:	68db      	ldr	r3, [r3, #12]
 8002702:	f000 fca7 	bl	8003054 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	689a      	ldr	r2, [r3, #8]
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002714:	609a      	str	r2, [r3, #8]
      break;
 8002716:	e039      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6818      	ldr	r0, [r3, #0]
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	6859      	ldr	r1, [r3, #4]
 8002720:	683b      	ldr	r3, [r7, #0]
 8002722:	68db      	ldr	r3, [r3, #12]
 8002724:	461a      	mov	r2, r3
 8002726:	f000 fb65 	bl	8002df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	2150      	movs	r1, #80	; 0x50
 8002730:	4618      	mov	r0, r3
 8002732:	f000 fc74 	bl	800301e <TIM_ITRx_SetConfig>
      break;
 8002736:	e029      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	6818      	ldr	r0, [r3, #0]
 800273c:	683b      	ldr	r3, [r7, #0]
 800273e:	6859      	ldr	r1, [r3, #4]
 8002740:	683b      	ldr	r3, [r7, #0]
 8002742:	68db      	ldr	r3, [r3, #12]
 8002744:	461a      	mov	r2, r3
 8002746:	f000 fbc1 	bl	8002ecc <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	2160      	movs	r1, #96	; 0x60
 8002750:	4618      	mov	r0, r3
 8002752:	f000 fc64 	bl	800301e <TIM_ITRx_SetConfig>
      break;
 8002756:	e019      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6818      	ldr	r0, [r3, #0]
 800275c:	683b      	ldr	r3, [r7, #0]
 800275e:	6859      	ldr	r1, [r3, #4]
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	68db      	ldr	r3, [r3, #12]
 8002764:	461a      	mov	r2, r3
 8002766:	f000 fb45 	bl	8002df4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	2140      	movs	r1, #64	; 0x40
 8002770:	4618      	mov	r0, r3
 8002772:	f000 fc54 	bl	800301e <TIM_ITRx_SetConfig>
      break;
 8002776:	e009      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681a      	ldr	r2, [r3, #0]
 800277c:	683b      	ldr	r3, [r7, #0]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	4610      	mov	r0, r2
 8002784:	f000 fc4b 	bl	800301e <TIM_ITRx_SetConfig>
      break;
 8002788:	e000      	b.n	800278c <HAL_TIM_ConfigClockSource+0x154>
      break;
 800278a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	2201      	movs	r2, #1
 8002790:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	2200      	movs	r2, #0
 8002798:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800279c:	2300      	movs	r3, #0
}
 800279e:	4618      	mov	r0, r3
 80027a0:	3710      	adds	r7, #16
 80027a2:	46bd      	mov	sp, r7
 80027a4:	bd80      	pop	{r7, pc}
	...

080027a8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80027a8:	b480      	push	{r7}
 80027aa:	b085      	sub	sp, #20
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
 80027b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 80027b2:	2300      	movs	r3, #0
 80027b4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 80027b6:	683b      	ldr	r3, [r7, #0]
 80027b8:	2b0c      	cmp	r3, #12
 80027ba:	d831      	bhi.n	8002820 <HAL_TIM_ReadCapturedValue+0x78>
 80027bc:	a201      	add	r2, pc, #4	; (adr r2, 80027c4 <HAL_TIM_ReadCapturedValue+0x1c>)
 80027be:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c2:	bf00      	nop
 80027c4:	080027f9 	.word	0x080027f9
 80027c8:	08002821 	.word	0x08002821
 80027cc:	08002821 	.word	0x08002821
 80027d0:	08002821 	.word	0x08002821
 80027d4:	08002803 	.word	0x08002803
 80027d8:	08002821 	.word	0x08002821
 80027dc:	08002821 	.word	0x08002821
 80027e0:	08002821 	.word	0x08002821
 80027e4:	0800280d 	.word	0x0800280d
 80027e8:	08002821 	.word	0x08002821
 80027ec:	08002821 	.word	0x08002821
 80027f0:	08002821 	.word	0x08002821
 80027f4:	08002817 	.word	0x08002817
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80027fe:	60fb      	str	r3, [r7, #12]

      break;
 8002800:	e00f      	b.n	8002822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002808:	60fb      	str	r3, [r7, #12]

      break;
 800280a:	e00a      	b.n	8002822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002812:	60fb      	str	r3, [r7, #12]

      break;
 8002814:	e005      	b.n	8002822 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281c:	60fb      	str	r3, [r7, #12]

      break;
 800281e:	e000      	b.n	8002822 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8002820:	bf00      	nop
  }

  return tmpreg;
 8002822:	68fb      	ldr	r3, [r7, #12]
}
 8002824:	4618      	mov	r0, r3
 8002826:	3714      	adds	r7, #20
 8002828:	46bd      	mov	sp, r7
 800282a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800282e:	4770      	bx	lr

08002830 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002830:	b480      	push	{r7}
 8002832:	b083      	sub	sp, #12
 8002834:	af00      	add	r7, sp, #0
 8002836:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002838:	bf00      	nop
 800283a:	370c      	adds	r7, #12
 800283c:	46bd      	mov	sp, r7
 800283e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002842:	4770      	bx	lr

08002844 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002844:	b480      	push	{r7}
 8002846:	b083      	sub	sp, #12
 8002848:	af00      	add	r7, sp, #0
 800284a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800284c:	bf00      	nop
 800284e:	370c      	adds	r7, #12
 8002850:	46bd      	mov	sp, r7
 8002852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002856:	4770      	bx	lr

08002858 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002858:	b480      	push	{r7}
 800285a:	b083      	sub	sp, #12
 800285c:	af00      	add	r7, sp, #0
 800285e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8002860:	bf00      	nop
 8002862:	370c      	adds	r7, #12
 8002864:	46bd      	mov	sp, r7
 8002866:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286a:	4770      	bx	lr

0800286c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800286c:	b480      	push	{r7}
 800286e:	b085      	sub	sp, #20
 8002870:	af00      	add	r7, sp, #0
 8002872:	6078      	str	r0, [r7, #4]
 8002874:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	4a40      	ldr	r2, [pc, #256]	; (8002980 <TIM_Base_SetConfig+0x114>)
 8002880:	4293      	cmp	r3, r2
 8002882:	d013      	beq.n	80028ac <TIM_Base_SetConfig+0x40>
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800288a:	d00f      	beq.n	80028ac <TIM_Base_SetConfig+0x40>
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	4a3d      	ldr	r2, [pc, #244]	; (8002984 <TIM_Base_SetConfig+0x118>)
 8002890:	4293      	cmp	r3, r2
 8002892:	d00b      	beq.n	80028ac <TIM_Base_SetConfig+0x40>
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	4a3c      	ldr	r2, [pc, #240]	; (8002988 <TIM_Base_SetConfig+0x11c>)
 8002898:	4293      	cmp	r3, r2
 800289a:	d007      	beq.n	80028ac <TIM_Base_SetConfig+0x40>
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	4a3b      	ldr	r2, [pc, #236]	; (800298c <TIM_Base_SetConfig+0x120>)
 80028a0:	4293      	cmp	r3, r2
 80028a2:	d003      	beq.n	80028ac <TIM_Base_SetConfig+0x40>
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	4a3a      	ldr	r2, [pc, #232]	; (8002990 <TIM_Base_SetConfig+0x124>)
 80028a8:	4293      	cmp	r3, r2
 80028aa:	d108      	bne.n	80028be <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80028b2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80028b4:	683b      	ldr	r3, [r7, #0]
 80028b6:	685b      	ldr	r3, [r3, #4]
 80028b8:	68fa      	ldr	r2, [r7, #12]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a2f      	ldr	r2, [pc, #188]	; (8002980 <TIM_Base_SetConfig+0x114>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d02b      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80028cc:	d027      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	4a2c      	ldr	r2, [pc, #176]	; (8002984 <TIM_Base_SetConfig+0x118>)
 80028d2:	4293      	cmp	r3, r2
 80028d4:	d023      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	4a2b      	ldr	r2, [pc, #172]	; (8002988 <TIM_Base_SetConfig+0x11c>)
 80028da:	4293      	cmp	r3, r2
 80028dc:	d01f      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	4a2a      	ldr	r2, [pc, #168]	; (800298c <TIM_Base_SetConfig+0x120>)
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d01b      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	4a29      	ldr	r2, [pc, #164]	; (8002990 <TIM_Base_SetConfig+0x124>)
 80028ea:	4293      	cmp	r3, r2
 80028ec:	d017      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	4a28      	ldr	r2, [pc, #160]	; (8002994 <TIM_Base_SetConfig+0x128>)
 80028f2:	4293      	cmp	r3, r2
 80028f4:	d013      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	4a27      	ldr	r2, [pc, #156]	; (8002998 <TIM_Base_SetConfig+0x12c>)
 80028fa:	4293      	cmp	r3, r2
 80028fc:	d00f      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	4a26      	ldr	r2, [pc, #152]	; (800299c <TIM_Base_SetConfig+0x130>)
 8002902:	4293      	cmp	r3, r2
 8002904:	d00b      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	4a25      	ldr	r2, [pc, #148]	; (80029a0 <TIM_Base_SetConfig+0x134>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d007      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	4a24      	ldr	r2, [pc, #144]	; (80029a4 <TIM_Base_SetConfig+0x138>)
 8002912:	4293      	cmp	r3, r2
 8002914:	d003      	beq.n	800291e <TIM_Base_SetConfig+0xb2>
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	4a23      	ldr	r2, [pc, #140]	; (80029a8 <TIM_Base_SetConfig+0x13c>)
 800291a:	4293      	cmp	r3, r2
 800291c:	d108      	bne.n	8002930 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002924:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	68db      	ldr	r3, [r3, #12]
 800292a:	68fa      	ldr	r2, [r7, #12]
 800292c:	4313      	orrs	r3, r2
 800292e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	695b      	ldr	r3, [r3, #20]
 800293a:	4313      	orrs	r3, r2
 800293c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	68fa      	ldr	r2, [r7, #12]
 8002942:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002944:	683b      	ldr	r3, [r7, #0]
 8002946:	689a      	ldr	r2, [r3, #8]
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	681a      	ldr	r2, [r3, #0]
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	4a0a      	ldr	r2, [pc, #40]	; (8002980 <TIM_Base_SetConfig+0x114>)
 8002958:	4293      	cmp	r3, r2
 800295a:	d003      	beq.n	8002964 <TIM_Base_SetConfig+0xf8>
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	4a0c      	ldr	r2, [pc, #48]	; (8002990 <TIM_Base_SetConfig+0x124>)
 8002960:	4293      	cmp	r3, r2
 8002962:	d103      	bne.n	800296c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002964:	683b      	ldr	r3, [r7, #0]
 8002966:	691a      	ldr	r2, [r3, #16]
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	615a      	str	r2, [r3, #20]
}
 8002972:	bf00      	nop
 8002974:	3714      	adds	r7, #20
 8002976:	46bd      	mov	sp, r7
 8002978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	40010000 	.word	0x40010000
 8002984:	40000400 	.word	0x40000400
 8002988:	40000800 	.word	0x40000800
 800298c:	40000c00 	.word	0x40000c00
 8002990:	40010400 	.word	0x40010400
 8002994:	40014000 	.word	0x40014000
 8002998:	40014400 	.word	0x40014400
 800299c:	40014800 	.word	0x40014800
 80029a0:	40001800 	.word	0x40001800
 80029a4:	40001c00 	.word	0x40001c00
 80029a8:	40002000 	.word	0x40002000

080029ac <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80029ac:	b480      	push	{r7}
 80029ae:	b087      	sub	sp, #28
 80029b0:	af00      	add	r7, sp, #0
 80029b2:	6078      	str	r0, [r7, #4]
 80029b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6a1b      	ldr	r3, [r3, #32]
 80029ba:	f023 0201 	bic.w	r2, r3, #1
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	6a1b      	ldr	r3, [r3, #32]
 80029c6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	685b      	ldr	r3, [r3, #4]
 80029cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80029da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	f023 0303 	bic.w	r3, r3, #3
 80029e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	68fa      	ldr	r2, [r7, #12]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f023 0302 	bic.w	r3, r3, #2
 80029f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80029f6:	683b      	ldr	r3, [r7, #0]
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	4a20      	ldr	r2, [pc, #128]	; (8002a84 <TIM_OC1_SetConfig+0xd8>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d003      	beq.n	8002a10 <TIM_OC1_SetConfig+0x64>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	4a1f      	ldr	r2, [pc, #124]	; (8002a88 <TIM_OC1_SetConfig+0xdc>)
 8002a0c:	4293      	cmp	r3, r2
 8002a0e:	d10c      	bne.n	8002a2a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002a10:	697b      	ldr	r3, [r7, #20]
 8002a12:	f023 0308 	bic.w	r3, r3, #8
 8002a16:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002a18:	683b      	ldr	r3, [r7, #0]
 8002a1a:	68db      	ldr	r3, [r3, #12]
 8002a1c:	697a      	ldr	r2, [r7, #20]
 8002a1e:	4313      	orrs	r3, r2
 8002a20:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002a22:	697b      	ldr	r3, [r7, #20]
 8002a24:	f023 0304 	bic.w	r3, r3, #4
 8002a28:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	4a15      	ldr	r2, [pc, #84]	; (8002a84 <TIM_OC1_SetConfig+0xd8>)
 8002a2e:	4293      	cmp	r3, r2
 8002a30:	d003      	beq.n	8002a3a <TIM_OC1_SetConfig+0x8e>
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	4a14      	ldr	r2, [pc, #80]	; (8002a88 <TIM_OC1_SetConfig+0xdc>)
 8002a36:	4293      	cmp	r3, r2
 8002a38:	d111      	bne.n	8002a5e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002a3a:	693b      	ldr	r3, [r7, #16]
 8002a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002a42:	693b      	ldr	r3, [r7, #16]
 8002a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	693a      	ldr	r2, [r7, #16]
 8002a50:	4313      	orrs	r3, r2
 8002a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	699b      	ldr	r3, [r3, #24]
 8002a58:	693a      	ldr	r2, [r7, #16]
 8002a5a:	4313      	orrs	r3, r2
 8002a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	693a      	ldr	r2, [r7, #16]
 8002a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002a6a:	683b      	ldr	r3, [r7, #0]
 8002a6c:	685a      	ldr	r2, [r3, #4]
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	697a      	ldr	r2, [r7, #20]
 8002a76:	621a      	str	r2, [r3, #32]
}
 8002a78:	bf00      	nop
 8002a7a:	371c      	adds	r7, #28
 8002a7c:	46bd      	mov	sp, r7
 8002a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a82:	4770      	bx	lr
 8002a84:	40010000 	.word	0x40010000
 8002a88:	40010400 	.word	0x40010400

08002a8c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	b087      	sub	sp, #28
 8002a90:	af00      	add	r7, sp, #0
 8002a92:	6078      	str	r0, [r7, #4]
 8002a94:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6a1b      	ldr	r3, [r3, #32]
 8002a9a:	f023 0210 	bic.w	r2, r3, #16
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6a1b      	ldr	r3, [r3, #32]
 8002aa6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	685b      	ldr	r3, [r3, #4]
 8002aac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	699b      	ldr	r3, [r3, #24]
 8002ab2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002aba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002ac2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	021b      	lsls	r3, r3, #8
 8002aca:	68fa      	ldr	r2, [r7, #12]
 8002acc:	4313      	orrs	r3, r2
 8002ace:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002ad0:	697b      	ldr	r3, [r7, #20]
 8002ad2:	f023 0320 	bic.w	r3, r3, #32
 8002ad6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002ad8:	683b      	ldr	r3, [r7, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	011b      	lsls	r3, r3, #4
 8002ade:	697a      	ldr	r2, [r7, #20]
 8002ae0:	4313      	orrs	r3, r2
 8002ae2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	4a22      	ldr	r2, [pc, #136]	; (8002b70 <TIM_OC2_SetConfig+0xe4>)
 8002ae8:	4293      	cmp	r3, r2
 8002aea:	d003      	beq.n	8002af4 <TIM_OC2_SetConfig+0x68>
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	4a21      	ldr	r2, [pc, #132]	; (8002b74 <TIM_OC2_SetConfig+0xe8>)
 8002af0:	4293      	cmp	r3, r2
 8002af2:	d10d      	bne.n	8002b10 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002afa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002afc:	683b      	ldr	r3, [r7, #0]
 8002afe:	68db      	ldr	r3, [r3, #12]
 8002b00:	011b      	lsls	r3, r3, #4
 8002b02:	697a      	ldr	r2, [r7, #20]
 8002b04:	4313      	orrs	r3, r2
 8002b06:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002b08:	697b      	ldr	r3, [r7, #20]
 8002b0a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002b0e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	4a17      	ldr	r2, [pc, #92]	; (8002b70 <TIM_OC2_SetConfig+0xe4>)
 8002b14:	4293      	cmp	r3, r2
 8002b16:	d003      	beq.n	8002b20 <TIM_OC2_SetConfig+0x94>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	4a16      	ldr	r2, [pc, #88]	; (8002b74 <TIM_OC2_SetConfig+0xe8>)
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	d113      	bne.n	8002b48 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002b20:	693b      	ldr	r3, [r7, #16]
 8002b22:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002b26:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002b28:	693b      	ldr	r3, [r7, #16]
 8002b2a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002b2e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	695b      	ldr	r3, [r3, #20]
 8002b34:	009b      	lsls	r3, r3, #2
 8002b36:	693a      	ldr	r2, [r7, #16]
 8002b38:	4313      	orrs	r3, r2
 8002b3a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	699b      	ldr	r3, [r3, #24]
 8002b40:	009b      	lsls	r3, r3, #2
 8002b42:	693a      	ldr	r2, [r7, #16]
 8002b44:	4313      	orrs	r3, r2
 8002b46:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	693a      	ldr	r2, [r7, #16]
 8002b4c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	68fa      	ldr	r2, [r7, #12]
 8002b52:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002b54:	683b      	ldr	r3, [r7, #0]
 8002b56:	685a      	ldr	r2, [r3, #4]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	697a      	ldr	r2, [r7, #20]
 8002b60:	621a      	str	r2, [r3, #32]
}
 8002b62:	bf00      	nop
 8002b64:	371c      	adds	r7, #28
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
 8002b6e:	bf00      	nop
 8002b70:	40010000 	.word	0x40010000
 8002b74:	40010400 	.word	0x40010400

08002b78 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b087      	sub	sp, #28
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a1b      	ldr	r3, [r3, #32]
 8002b92:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	69db      	ldr	r3, [r3, #28]
 8002b9e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002ba6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002ba8:	68fb      	ldr	r3, [r7, #12]
 8002baa:	f023 0303 	bic.w	r3, r3, #3
 8002bae:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002bb0:	683b      	ldr	r3, [r7, #0]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	68fa      	ldr	r2, [r7, #12]
 8002bb6:	4313      	orrs	r3, r2
 8002bb8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002bc0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	021b      	lsls	r3, r3, #8
 8002bc8:	697a      	ldr	r2, [r7, #20]
 8002bca:	4313      	orrs	r3, r2
 8002bcc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	4a21      	ldr	r2, [pc, #132]	; (8002c58 <TIM_OC3_SetConfig+0xe0>)
 8002bd2:	4293      	cmp	r3, r2
 8002bd4:	d003      	beq.n	8002bde <TIM_OC3_SetConfig+0x66>
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	4a20      	ldr	r2, [pc, #128]	; (8002c5c <TIM_OC3_SetConfig+0xe4>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d10d      	bne.n	8002bfa <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8002bde:	697b      	ldr	r3, [r7, #20]
 8002be0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002be4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002be6:	683b      	ldr	r3, [r7, #0]
 8002be8:	68db      	ldr	r3, [r3, #12]
 8002bea:	021b      	lsls	r3, r3, #8
 8002bec:	697a      	ldr	r2, [r7, #20]
 8002bee:	4313      	orrs	r3, r2
 8002bf0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002bf8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	4a16      	ldr	r2, [pc, #88]	; (8002c58 <TIM_OC3_SetConfig+0xe0>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d003      	beq.n	8002c0a <TIM_OC3_SetConfig+0x92>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	4a15      	ldr	r2, [pc, #84]	; (8002c5c <TIM_OC3_SetConfig+0xe4>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d113      	bne.n	8002c32 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8002c0a:	693b      	ldr	r3, [r7, #16]
 8002c0c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002c18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	695b      	ldr	r3, [r3, #20]
 8002c1e:	011b      	lsls	r3, r3, #4
 8002c20:	693a      	ldr	r2, [r7, #16]
 8002c22:	4313      	orrs	r3, r2
 8002c24:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	699b      	ldr	r3, [r3, #24]
 8002c2a:	011b      	lsls	r3, r3, #4
 8002c2c:	693a      	ldr	r2, [r7, #16]
 8002c2e:	4313      	orrs	r3, r2
 8002c30:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	693a      	ldr	r2, [r7, #16]
 8002c36:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	68fa      	ldr	r2, [r7, #12]
 8002c3c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8002c3e:	683b      	ldr	r3, [r7, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	697a      	ldr	r2, [r7, #20]
 8002c4a:	621a      	str	r2, [r3, #32]
}
 8002c4c:	bf00      	nop
 8002c4e:	371c      	adds	r7, #28
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	40010000 	.word	0x40010000
 8002c5c:	40010400 	.word	0x40010400

08002c60 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002c60:	b480      	push	{r7}
 8002c62:	b087      	sub	sp, #28
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
 8002c68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6a1b      	ldr	r3, [r3, #32]
 8002c6e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
 8002c7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	685b      	ldr	r3, [r3, #4]
 8002c80:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	69db      	ldr	r3, [r3, #28]
 8002c86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002c8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c96:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002c98:	683b      	ldr	r3, [r7, #0]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	021b      	lsls	r3, r3, #8
 8002c9e:	68fa      	ldr	r2, [r7, #12]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002ca4:	693b      	ldr	r3, [r7, #16]
 8002ca6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8002caa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	031b      	lsls	r3, r3, #12
 8002cb2:	693a      	ldr	r2, [r7, #16]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	4a12      	ldr	r2, [pc, #72]	; (8002d04 <TIM_OC4_SetConfig+0xa4>)
 8002cbc:	4293      	cmp	r3, r2
 8002cbe:	d003      	beq.n	8002cc8 <TIM_OC4_SetConfig+0x68>
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	4a11      	ldr	r2, [pc, #68]	; (8002d08 <TIM_OC4_SetConfig+0xa8>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d109      	bne.n	8002cdc <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002cce:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	695b      	ldr	r3, [r3, #20]
 8002cd4:	019b      	lsls	r3, r3, #6
 8002cd6:	697a      	ldr	r2, [r7, #20]
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	697a      	ldr	r2, [r7, #20]
 8002ce0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	68fa      	ldr	r2, [r7, #12]
 8002ce6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002ce8:	683b      	ldr	r3, [r7, #0]
 8002cea:	685a      	ldr	r2, [r3, #4]
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	693a      	ldr	r2, [r7, #16]
 8002cf4:	621a      	str	r2, [r3, #32]
}
 8002cf6:	bf00      	nop
 8002cf8:	371c      	adds	r7, #28
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d00:	4770      	bx	lr
 8002d02:	bf00      	nop
 8002d04:	40010000 	.word	0x40010000
 8002d08:	40010400 	.word	0x40010400

08002d0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8002d0c:	b480      	push	{r7}
 8002d0e:	b087      	sub	sp, #28
 8002d10:	af00      	add	r7, sp, #0
 8002d12:	60f8      	str	r0, [r7, #12]
 8002d14:	60b9      	str	r1, [r7, #8]
 8002d16:	607a      	str	r2, [r7, #4]
 8002d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	f023 0201 	bic.w	r2, r3, #1
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	699b      	ldr	r3, [r3, #24]
 8002d2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	6a1b      	ldr	r3, [r3, #32]
 8002d30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	4a28      	ldr	r2, [pc, #160]	; (8002dd8 <TIM_TI1_SetConfig+0xcc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d01b      	beq.n	8002d72 <TIM_TI1_SetConfig+0x66>
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d40:	d017      	beq.n	8002d72 <TIM_TI1_SetConfig+0x66>
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	4a25      	ldr	r2, [pc, #148]	; (8002ddc <TIM_TI1_SetConfig+0xd0>)
 8002d46:	4293      	cmp	r3, r2
 8002d48:	d013      	beq.n	8002d72 <TIM_TI1_SetConfig+0x66>
 8002d4a:	68fb      	ldr	r3, [r7, #12]
 8002d4c:	4a24      	ldr	r2, [pc, #144]	; (8002de0 <TIM_TI1_SetConfig+0xd4>)
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d00f      	beq.n	8002d72 <TIM_TI1_SetConfig+0x66>
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	4a23      	ldr	r2, [pc, #140]	; (8002de4 <TIM_TI1_SetConfig+0xd8>)
 8002d56:	4293      	cmp	r3, r2
 8002d58:	d00b      	beq.n	8002d72 <TIM_TI1_SetConfig+0x66>
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	4a22      	ldr	r2, [pc, #136]	; (8002de8 <TIM_TI1_SetConfig+0xdc>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d007      	beq.n	8002d72 <TIM_TI1_SetConfig+0x66>
 8002d62:	68fb      	ldr	r3, [r7, #12]
 8002d64:	4a21      	ldr	r2, [pc, #132]	; (8002dec <TIM_TI1_SetConfig+0xe0>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d003      	beq.n	8002d72 <TIM_TI1_SetConfig+0x66>
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	4a20      	ldr	r2, [pc, #128]	; (8002df0 <TIM_TI1_SetConfig+0xe4>)
 8002d6e:	4293      	cmp	r3, r2
 8002d70:	d101      	bne.n	8002d76 <TIM_TI1_SetConfig+0x6a>
 8002d72:	2301      	movs	r3, #1
 8002d74:	e000      	b.n	8002d78 <TIM_TI1_SetConfig+0x6c>
 8002d76:	2300      	movs	r3, #0
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d008      	beq.n	8002d8e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8002d7c:	697b      	ldr	r3, [r7, #20]
 8002d7e:	f023 0303 	bic.w	r3, r3, #3
 8002d82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8002d84:	697a      	ldr	r2, [r7, #20]
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	4313      	orrs	r3, r2
 8002d8a:	617b      	str	r3, [r7, #20]
 8002d8c:	e003      	b.n	8002d96 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	f043 0301 	orr.w	r3, r3, #1
 8002d94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002d96:	697b      	ldr	r3, [r7, #20]
 8002d98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002d9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	011b      	lsls	r3, r3, #4
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	697a      	ldr	r2, [r7, #20]
 8002da6:	4313      	orrs	r3, r2
 8002da8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002daa:	693b      	ldr	r3, [r7, #16]
 8002dac:	f023 030a 	bic.w	r3, r3, #10
 8002db0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8002db2:	68bb      	ldr	r3, [r7, #8]
 8002db4:	f003 030a 	and.w	r3, r3, #10
 8002db8:	693a      	ldr	r2, [r7, #16]
 8002dba:	4313      	orrs	r3, r2
 8002dbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002dbe:	68fb      	ldr	r3, [r7, #12]
 8002dc0:	697a      	ldr	r2, [r7, #20]
 8002dc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	693a      	ldr	r2, [r7, #16]
 8002dc8:	621a      	str	r2, [r3, #32]
}
 8002dca:	bf00      	nop
 8002dcc:	371c      	adds	r7, #28
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	40010000 	.word	0x40010000
 8002ddc:	40000400 	.word	0x40000400
 8002de0:	40000800 	.word	0x40000800
 8002de4:	40000c00 	.word	0x40000c00
 8002de8:	40010400 	.word	0x40010400
 8002dec:	40014000 	.word	0x40014000
 8002df0:	40001800 	.word	0x40001800

08002df4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002df4:	b480      	push	{r7}
 8002df6:	b087      	sub	sp, #28
 8002df8:	af00      	add	r7, sp, #0
 8002dfa:	60f8      	str	r0, [r7, #12]
 8002dfc:	60b9      	str	r1, [r7, #8]
 8002dfe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	6a1b      	ldr	r3, [r3, #32]
 8002e04:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	6a1b      	ldr	r3, [r3, #32]
 8002e0a:	f023 0201 	bic.w	r2, r3, #1
 8002e0e:	68fb      	ldr	r3, [r7, #12]
 8002e10:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	699b      	ldr	r3, [r3, #24]
 8002e16:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002e1e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	011b      	lsls	r3, r3, #4
 8002e24:	693a      	ldr	r2, [r7, #16]
 8002e26:	4313      	orrs	r3, r2
 8002e28:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002e2a:	697b      	ldr	r3, [r7, #20]
 8002e2c:	f023 030a 	bic.w	r3, r3, #10
 8002e30:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002e32:	697a      	ldr	r2, [r7, #20]
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
 8002e38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	693a      	ldr	r2, [r7, #16]
 8002e3e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	697a      	ldr	r2, [r7, #20]
 8002e44:	621a      	str	r2, [r3, #32]
}
 8002e46:	bf00      	nop
 8002e48:	371c      	adds	r7, #28
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr

08002e52 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002e52:	b480      	push	{r7}
 8002e54:	b087      	sub	sp, #28
 8002e56:	af00      	add	r7, sp, #0
 8002e58:	60f8      	str	r0, [r7, #12]
 8002e5a:	60b9      	str	r1, [r7, #8]
 8002e5c:	607a      	str	r2, [r7, #4]
 8002e5e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	6a1b      	ldr	r3, [r3, #32]
 8002e64:	f023 0210 	bic.w	r2, r3, #16
 8002e68:	68fb      	ldr	r3, [r7, #12]
 8002e6a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002e6c:	68fb      	ldr	r3, [r7, #12]
 8002e6e:	699b      	ldr	r3, [r3, #24]
 8002e70:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002e72:	68fb      	ldr	r3, [r7, #12]
 8002e74:	6a1b      	ldr	r3, [r3, #32]
 8002e76:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8002e78:	697b      	ldr	r3, [r7, #20]
 8002e7a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002e7e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	021b      	lsls	r3, r3, #8
 8002e84:	697a      	ldr	r2, [r7, #20]
 8002e86:	4313      	orrs	r3, r2
 8002e88:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002e8a:	697b      	ldr	r3, [r7, #20]
 8002e8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002e90:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8002e92:	683b      	ldr	r3, [r7, #0]
 8002e94:	031b      	lsls	r3, r3, #12
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	697a      	ldr	r2, [r7, #20]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002ea4:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8002ea6:	68bb      	ldr	r3, [r7, #8]
 8002ea8:	011b      	lsls	r3, r3, #4
 8002eaa:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8002eae:	693a      	ldr	r2, [r7, #16]
 8002eb0:	4313      	orrs	r3, r2
 8002eb2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	697a      	ldr	r2, [r7, #20]
 8002eb8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	621a      	str	r2, [r3, #32]
}
 8002ec0:	bf00      	nop
 8002ec2:	371c      	adds	r7, #28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr

08002ecc <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002ecc:	b480      	push	{r7}
 8002ece:	b087      	sub	sp, #28
 8002ed0:	af00      	add	r7, sp, #0
 8002ed2:	60f8      	str	r0, [r7, #12]
 8002ed4:	60b9      	str	r1, [r7, #8]
 8002ed6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	6a1b      	ldr	r3, [r3, #32]
 8002edc:	f023 0210 	bic.w	r2, r3, #16
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	699b      	ldr	r3, [r3, #24]
 8002ee8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	6a1b      	ldr	r3, [r3, #32]
 8002eee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002ef0:	697b      	ldr	r3, [r7, #20]
 8002ef2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002ef6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	031b      	lsls	r3, r3, #12
 8002efc:	697a      	ldr	r2, [r7, #20]
 8002efe:	4313      	orrs	r3, r2
 8002f00:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002f02:	693b      	ldr	r3, [r7, #16]
 8002f04:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8002f08:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002f0a:	68bb      	ldr	r3, [r7, #8]
 8002f0c:	011b      	lsls	r3, r3, #4
 8002f0e:	693a      	ldr	r2, [r7, #16]
 8002f10:	4313      	orrs	r3, r2
 8002f12:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	697a      	ldr	r2, [r7, #20]
 8002f18:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	621a      	str	r2, [r3, #32]
}
 8002f20:	bf00      	nop
 8002f22:	371c      	adds	r7, #28
 8002f24:	46bd      	mov	sp, r7
 8002f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2a:	4770      	bx	lr

08002f2c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002f2c:	b480      	push	{r7}
 8002f2e:	b087      	sub	sp, #28
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	60f8      	str	r0, [r7, #12]
 8002f34:	60b9      	str	r1, [r7, #8]
 8002f36:	607a      	str	r2, [r7, #4]
 8002f38:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	6a1b      	ldr	r3, [r3, #32]
 8002f3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	69db      	ldr	r3, [r3, #28]
 8002f4a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	6a1b      	ldr	r3, [r3, #32]
 8002f50:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8002f52:	697b      	ldr	r3, [r7, #20]
 8002f54:	f023 0303 	bic.w	r3, r3, #3
 8002f58:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8002f5a:	697a      	ldr	r2, [r7, #20]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	4313      	orrs	r3, r2
 8002f60:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8002f62:	697b      	ldr	r3, [r7, #20]
 8002f64:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8002f68:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	011b      	lsls	r3, r3, #4
 8002f6e:	b2db      	uxtb	r3, r3
 8002f70:	697a      	ldr	r2, [r7, #20]
 8002f72:	4313      	orrs	r3, r2
 8002f74:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8002f76:	693b      	ldr	r3, [r7, #16]
 8002f78:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8002f7c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8002f7e:	68bb      	ldr	r3, [r7, #8]
 8002f80:	021b      	lsls	r3, r3, #8
 8002f82:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8002f86:	693a      	ldr	r2, [r7, #16]
 8002f88:	4313      	orrs	r3, r2
 8002f8a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	697a      	ldr	r2, [r7, #20]
 8002f90:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	693a      	ldr	r2, [r7, #16]
 8002f96:	621a      	str	r2, [r3, #32]
}
 8002f98:	bf00      	nop
 8002f9a:	371c      	adds	r7, #28
 8002f9c:	46bd      	mov	sp, r7
 8002f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa2:	4770      	bx	lr

08002fa4 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8002fa4:	b480      	push	{r7}
 8002fa6:	b087      	sub	sp, #28
 8002fa8:	af00      	add	r7, sp, #0
 8002faa:	60f8      	str	r0, [r7, #12]
 8002fac:	60b9      	str	r1, [r7, #8]
 8002fae:	607a      	str	r2, [r7, #4]
 8002fb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002fb2:	68fb      	ldr	r3, [r7, #12]
 8002fb4:	6a1b      	ldr	r3, [r3, #32]
 8002fb6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	69db      	ldr	r3, [r3, #28]
 8002fc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6a1b      	ldr	r3, [r3, #32]
 8002fc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8002fca:	697b      	ldr	r3, [r7, #20]
 8002fcc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002fd0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	021b      	lsls	r3, r3, #8
 8002fd6:	697a      	ldr	r2, [r7, #20]
 8002fd8:	4313      	orrs	r3, r2
 8002fda:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8002fdc:	697b      	ldr	r3, [r7, #20]
 8002fde:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8002fe2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8002fe4:	683b      	ldr	r3, [r7, #0]
 8002fe6:	031b      	lsls	r3, r3, #12
 8002fe8:	b29b      	uxth	r3, r3
 8002fea:	697a      	ldr	r2, [r7, #20]
 8002fec:	4313      	orrs	r3, r2
 8002fee:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8002ff6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8002ff8:	68bb      	ldr	r3, [r7, #8]
 8002ffa:	031b      	lsls	r3, r3, #12
 8002ffc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003000:	693a      	ldr	r2, [r7, #16]
 8003002:	4313      	orrs	r3, r2
 8003004:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	697a      	ldr	r2, [r7, #20]
 800300a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	693a      	ldr	r2, [r7, #16]
 8003010:	621a      	str	r2, [r3, #32]
}
 8003012:	bf00      	nop
 8003014:	371c      	adds	r7, #28
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr

0800301e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800301e:	b480      	push	{r7}
 8003020:	b085      	sub	sp, #20
 8003022:	af00      	add	r7, sp, #0
 8003024:	6078      	str	r0, [r7, #4]
 8003026:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	689b      	ldr	r3, [r3, #8]
 800302c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800302e:	68fb      	ldr	r3, [r7, #12]
 8003030:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003034:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003036:	683a      	ldr	r2, [r7, #0]
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	4313      	orrs	r3, r2
 800303c:	f043 0307 	orr.w	r3, r3, #7
 8003040:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	68fa      	ldr	r2, [r7, #12]
 8003046:	609a      	str	r2, [r3, #8]
}
 8003048:	bf00      	nop
 800304a:	3714      	adds	r7, #20
 800304c:	46bd      	mov	sp, r7
 800304e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003052:	4770      	bx	lr

08003054 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003054:	b480      	push	{r7}
 8003056:	b087      	sub	sp, #28
 8003058:	af00      	add	r7, sp, #0
 800305a:	60f8      	str	r0, [r7, #12]
 800305c:	60b9      	str	r1, [r7, #8]
 800305e:	607a      	str	r2, [r7, #4]
 8003060:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003068:	697b      	ldr	r3, [r7, #20]
 800306a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800306e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	021a      	lsls	r2, r3, #8
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	431a      	orrs	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	4313      	orrs	r3, r2
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	4313      	orrs	r3, r2
 8003080:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	697a      	ldr	r2, [r7, #20]
 8003086:	609a      	str	r2, [r3, #8]
}
 8003088:	bf00      	nop
 800308a:	371c      	adds	r7, #28
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr

08003094 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003094:	b480      	push	{r7}
 8003096:	b087      	sub	sp, #28
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	f003 031f 	and.w	r3, r3, #31
 80030a6:	2201      	movs	r2, #1
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80030ae:	68fb      	ldr	r3, [r7, #12]
 80030b0:	6a1a      	ldr	r2, [r3, #32]
 80030b2:	697b      	ldr	r3, [r7, #20]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	401a      	ands	r2, r3
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	6a1a      	ldr	r2, [r3, #32]
 80030c0:	68bb      	ldr	r3, [r7, #8]
 80030c2:	f003 031f 	and.w	r3, r3, #31
 80030c6:	6879      	ldr	r1, [r7, #4]
 80030c8:	fa01 f303 	lsl.w	r3, r1, r3
 80030cc:	431a      	orrs	r2, r3
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	621a      	str	r2, [r3, #32]
}
 80030d2:	bf00      	nop
 80030d4:	371c      	adds	r7, #28
 80030d6:	46bd      	mov	sp, r7
 80030d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030dc:	4770      	bx	lr
	...

080030e0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80030e0:	b480      	push	{r7}
 80030e2:	b085      	sub	sp, #20
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]
 80030e8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d101      	bne.n	80030f8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80030f4:	2302      	movs	r3, #2
 80030f6:	e05a      	b.n	80031ae <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	2201      	movs	r2, #1
 80030fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2202      	movs	r2, #2
 8003104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	685b      	ldr	r3, [r3, #4]
 800310e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	689b      	ldr	r3, [r3, #8]
 8003116:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800311e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003120:	683b      	ldr	r3, [r7, #0]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	68fa      	ldr	r2, [r7, #12]
 8003126:	4313      	orrs	r3, r2
 8003128:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4a21      	ldr	r2, [pc, #132]	; (80031bc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d022      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003144:	d01d      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4a1d      	ldr	r2, [pc, #116]	; (80031c0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800314c:	4293      	cmp	r3, r2
 800314e:	d018      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4a1b      	ldr	r2, [pc, #108]	; (80031c4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003156:	4293      	cmp	r3, r2
 8003158:	d013      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	4a1a      	ldr	r2, [pc, #104]	; (80031c8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003160:	4293      	cmp	r3, r2
 8003162:	d00e      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	4a18      	ldr	r2, [pc, #96]	; (80031cc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800316a:	4293      	cmp	r3, r2
 800316c:	d009      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a17      	ldr	r2, [pc, #92]	; (80031d0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d004      	beq.n	8003182 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	4a15      	ldr	r2, [pc, #84]	; (80031d4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800317e:	4293      	cmp	r3, r2
 8003180:	d10c      	bne.n	800319c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003182:	68bb      	ldr	r3, [r7, #8]
 8003184:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003188:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800318a:	683b      	ldr	r3, [r7, #0]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	68ba      	ldr	r2, [r7, #8]
 8003190:	4313      	orrs	r3, r2
 8003192:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	68ba      	ldr	r2, [r7, #8]
 800319a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2201      	movs	r2, #1
 80031a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2200      	movs	r2, #0
 80031a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80031ac:	2300      	movs	r3, #0
}
 80031ae:	4618      	mov	r0, r3
 80031b0:	3714      	adds	r7, #20
 80031b2:	46bd      	mov	sp, r7
 80031b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031b8:	4770      	bx	lr
 80031ba:	bf00      	nop
 80031bc:	40010000 	.word	0x40010000
 80031c0:	40000400 	.word	0x40000400
 80031c4:	40000800 	.word	0x40000800
 80031c8:	40000c00 	.word	0x40000c00
 80031cc:	40010400 	.word	0x40010400
 80031d0:	40014000 	.word	0x40014000
 80031d4:	40001800 	.word	0x40001800

080031d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80031d8:	b480      	push	{r7}
 80031da:	b083      	sub	sp, #12
 80031dc:	af00      	add	r7, sp, #0
 80031de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80031e0:	bf00      	nop
 80031e2:	370c      	adds	r7, #12
 80031e4:	46bd      	mov	sp, r7
 80031e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ea:	4770      	bx	lr

080031ec <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80031f4:	bf00      	nop
 80031f6:	370c      	adds	r7, #12
 80031f8:	46bd      	mov	sp, r7
 80031fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031fe:	4770      	bx	lr

08003200 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8003200:	b480      	push	{r7}
 8003202:	b085      	sub	sp, #20
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800320a:	2300      	movs	r3, #0
 800320c:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800320e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8003212:	2b84      	cmp	r3, #132	; 0x84
 8003214:	d005      	beq.n	8003222 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8003216:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	4413      	add	r3, r2
 800321e:	3303      	adds	r3, #3
 8003220:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8003222:	68fb      	ldr	r3, [r7, #12]
}
 8003224:	4618      	mov	r0, r3
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr

08003230 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 8003230:	b480      	push	{r7}
 8003232:	b083      	sub	sp, #12
 8003234:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8003236:	f3ef 8305 	mrs	r3, IPSR
 800323a:	607b      	str	r3, [r7, #4]
  return(result);
 800323c:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800323e:	2b00      	cmp	r3, #0
 8003240:	bf14      	ite	ne
 8003242:	2301      	movne	r3, #1
 8003244:	2300      	moveq	r3, #0
 8003246:	b2db      	uxtb	r3, r3
}
 8003248:	4618      	mov	r0, r3
 800324a:	370c      	adds	r7, #12
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8003254:	b580      	push	{r7, lr}
 8003256:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8003258:	f001 f8fc 	bl	8004454 <vTaskStartScheduler>
  
  return osOK;
 800325c:	2300      	movs	r3, #0
}
 800325e:	4618      	mov	r0, r3
 8003260:	bd80      	pop	{r7, pc}

08003262 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8003262:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003264:	b089      	sub	sp, #36	; 0x24
 8003266:	af04      	add	r7, sp, #16
 8003268:	6078      	str	r0, [r7, #4]
 800326a:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	695b      	ldr	r3, [r3, #20]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d020      	beq.n	80032b6 <osThreadCreate+0x54>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	699b      	ldr	r3, [r3, #24]
 8003278:	2b00      	cmp	r3, #0
 800327a:	d01c      	beq.n	80032b6 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	685c      	ldr	r4, [r3, #4]
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	681d      	ldr	r5, [r3, #0]
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	691e      	ldr	r6, [r3, #16]
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 800328e:	4618      	mov	r0, r3
 8003290:	f7ff ffb6 	bl	8003200 <makeFreeRtosPriority>
 8003294:	4601      	mov	r1, r0
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	695b      	ldr	r3, [r3, #20]
 800329a:	687a      	ldr	r2, [r7, #4]
 800329c:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800329e:	9202      	str	r2, [sp, #8]
 80032a0:	9301      	str	r3, [sp, #4]
 80032a2:	9100      	str	r1, [sp, #0]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	4632      	mov	r2, r6
 80032a8:	4629      	mov	r1, r5
 80032aa:	4620      	mov	r0, r4
 80032ac:	f000 ff0f 	bl	80040ce <xTaskCreateStatic>
 80032b0:	4603      	mov	r3, r0
 80032b2:	60fb      	str	r3, [r7, #12]
 80032b4:	e01c      	b.n	80032f0 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	685c      	ldr	r4, [r3, #4]
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80032c2:	b29e      	uxth	r6, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
 80032ca:	4618      	mov	r0, r3
 80032cc:	f7ff ff98 	bl	8003200 <makeFreeRtosPriority>
 80032d0:	4602      	mov	r2, r0
 80032d2:	f107 030c 	add.w	r3, r7, #12
 80032d6:	9301      	str	r3, [sp, #4]
 80032d8:	9200      	str	r2, [sp, #0]
 80032da:	683b      	ldr	r3, [r7, #0]
 80032dc:	4632      	mov	r2, r6
 80032de:	4629      	mov	r1, r5
 80032e0:	4620      	mov	r0, r4
 80032e2:	f000 ff4e 	bl	8004182 <xTaskCreate>
 80032e6:	4603      	mov	r3, r0
 80032e8:	2b01      	cmp	r3, #1
 80032ea:	d001      	beq.n	80032f0 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 80032ec:	2300      	movs	r3, #0
 80032ee:	e000      	b.n	80032f2 <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 80032f0:	68fb      	ldr	r3, [r7, #12]
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3714      	adds	r7, #20
 80032f6:	46bd      	mov	sp, r7
 80032f8:	bdf0      	pop	{r4, r5, r6, r7, pc}

080032fa <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80032fa:	b580      	push	{r7, lr}
 80032fc:	b084      	sub	sp, #16
 80032fe:	af00      	add	r7, sp, #0
 8003300:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	2b00      	cmp	r3, #0
 800330a:	d001      	beq.n	8003310 <osDelay+0x16>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	e000      	b.n	8003312 <osDelay+0x18>
 8003310:	2301      	movs	r3, #1
 8003312:	4618      	mov	r0, r3
 8003314:	f001 f86a 	bl	80043ec <vTaskDelay>
  
  return osOK;
 8003318:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800331a:	4618      	mov	r0, r3
 800331c:	3710      	adds	r7, #16
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}

08003322 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 8003322:	b580      	push	{r7, lr}
 8003324:	b086      	sub	sp, #24
 8003326:	af02      	add	r7, sp, #8
 8003328:	6078      	str	r0, [r7, #4]
 800332a:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	685b      	ldr	r3, [r3, #4]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d010      	beq.n	8003356 <osSemaphoreCreate+0x34>
    if (count == 1) {
 8003334:	683b      	ldr	r3, [r7, #0]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d10b      	bne.n	8003352 <osSemaphoreCreate+0x30>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	685a      	ldr	r2, [r3, #4]
 800333e:	2303      	movs	r3, #3
 8003340:	9300      	str	r3, [sp, #0]
 8003342:	4613      	mov	r3, r2
 8003344:	2200      	movs	r2, #0
 8003346:	2100      	movs	r1, #0
 8003348:	2001      	movs	r0, #1
 800334a:	f000 f9bd 	bl	80036c8 <xQueueGenericCreateStatic>
 800334e:	4603      	mov	r3, r0
 8003350:	e016      	b.n	8003380 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 8003352:	2300      	movs	r3, #0
 8003354:	e014      	b.n	8003380 <osSemaphoreCreate+0x5e>
#endif
    }
  }
  else {
    if (count == 1) {
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	2b01      	cmp	r3, #1
 800335a:	d110      	bne.n	800337e <osSemaphoreCreate+0x5c>
      vSemaphoreCreateBinary(sema);
 800335c:	2203      	movs	r2, #3
 800335e:	2100      	movs	r1, #0
 8003360:	2001      	movs	r0, #1
 8003362:	f000 fa24 	bl	80037ae <xQueueGenericCreate>
 8003366:	60f8      	str	r0, [r7, #12]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	2b00      	cmp	r3, #0
 800336c:	d005      	beq.n	800337a <osSemaphoreCreate+0x58>
 800336e:	2300      	movs	r3, #0
 8003370:	2200      	movs	r2, #0
 8003372:	2100      	movs	r1, #0
 8003374:	68f8      	ldr	r0, [r7, #12]
 8003376:	f000 fa79 	bl	800386c <xQueueGenericSend>
      return sema;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	e000      	b.n	8003380 <osSemaphoreCreate+0x5e>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800337e:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 8003380:	4618      	mov	r0, r3
 8003382:	3710      	adds	r7, #16
 8003384:	46bd      	mov	sp, r7
 8003386:	bd80      	pop	{r7, pc}

08003388 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 8003388:	b580      	push	{r7, lr}
 800338a:	b084      	sub	sp, #16
 800338c:	af00      	add	r7, sp, #0
 800338e:	6078      	str	r0, [r7, #4]
 8003390:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 8003392:	2300      	movs	r3, #0
 8003394:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	2b00      	cmp	r3, #0
 800339a:	d101      	bne.n	80033a0 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800339c:	2380      	movs	r3, #128	; 0x80
 800339e:	e03a      	b.n	8003416 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 80033a0:	2300      	movs	r3, #0
 80033a2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 80033a4:	683b      	ldr	r3, [r7, #0]
 80033a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80033aa:	d103      	bne.n	80033b4 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 80033ac:	f04f 33ff 	mov.w	r3, #4294967295
 80033b0:	60fb      	str	r3, [r7, #12]
 80033b2:	e009      	b.n	80033c8 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 80033b4:	683b      	ldr	r3, [r7, #0]
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d006      	beq.n	80033c8 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2b00      	cmp	r3, #0
 80033c2:	d101      	bne.n	80033c8 <osSemaphoreWait+0x40>
      ticks = 1;
 80033c4:	2301      	movs	r3, #1
 80033c6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 80033c8:	f7ff ff32 	bl	8003230 <inHandlerMode>
 80033cc:	4603      	mov	r3, r0
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d017      	beq.n	8003402 <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 80033d2:	f107 0308 	add.w	r3, r7, #8
 80033d6:	461a      	mov	r2, r3
 80033d8:	2100      	movs	r1, #0
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f000 fcd2 	bl	8003d84 <xQueueReceiveFromISR>
 80033e0:	4603      	mov	r3, r0
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d001      	beq.n	80033ea <osSemaphoreWait+0x62>
      return osErrorOS;
 80033e6:	23ff      	movs	r3, #255	; 0xff
 80033e8:	e015      	b.n	8003416 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	d011      	beq.n	8003414 <osSemaphoreWait+0x8c>
 80033f0:	4b0b      	ldr	r3, [pc, #44]	; (8003420 <osSemaphoreWait+0x98>)
 80033f2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80033f6:	601a      	str	r2, [r3, #0]
 80033f8:	f3bf 8f4f 	dsb	sy
 80033fc:	f3bf 8f6f 	isb	sy
 8003400:	e008      	b.n	8003414 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 8003402:	68f9      	ldr	r1, [r7, #12]
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 fbb5 	bl	8003b74 <xQueueSemaphoreTake>
 800340a:	4603      	mov	r3, r0
 800340c:	2b01      	cmp	r3, #1
 800340e:	d001      	beq.n	8003414 <osSemaphoreWait+0x8c>
    return osErrorOS;
 8003410:	23ff      	movs	r3, #255	; 0xff
 8003412:	e000      	b.n	8003416 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 8003414:	2300      	movs	r3, #0
}
 8003416:	4618      	mov	r0, r3
 8003418:	3710      	adds	r7, #16
 800341a:	46bd      	mov	sp, r7
 800341c:	bd80      	pop	{r7, pc}
 800341e:	bf00      	nop
 8003420:	e000ed04 	.word	0xe000ed04

08003424 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 8003424:	b580      	push	{r7, lr}
 8003426:	b084      	sub	sp, #16
 8003428:	af00      	add	r7, sp, #0
 800342a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800342c:	2300      	movs	r3, #0
 800342e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 8003430:	2300      	movs	r3, #0
 8003432:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 8003434:	f7ff fefc 	bl	8003230 <inHandlerMode>
 8003438:	4603      	mov	r3, r0
 800343a:	2b00      	cmp	r3, #0
 800343c:	d016      	beq.n	800346c <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800343e:	f107 0308 	add.w	r3, r7, #8
 8003442:	4619      	mov	r1, r3
 8003444:	6878      	ldr	r0, [r7, #4]
 8003446:	f000 fb0b 	bl	8003a60 <xQueueGiveFromISR>
 800344a:	4603      	mov	r3, r0
 800344c:	2b01      	cmp	r3, #1
 800344e:	d001      	beq.n	8003454 <osSemaphoreRelease+0x30>
      return osErrorOS;
 8003450:	23ff      	movs	r3, #255	; 0xff
 8003452:	e017      	b.n	8003484 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 8003454:	68bb      	ldr	r3, [r7, #8]
 8003456:	2b00      	cmp	r3, #0
 8003458:	d013      	beq.n	8003482 <osSemaphoreRelease+0x5e>
 800345a:	4b0c      	ldr	r3, [pc, #48]	; (800348c <osSemaphoreRelease+0x68>)
 800345c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003460:	601a      	str	r2, [r3, #0]
 8003462:	f3bf 8f4f 	dsb	sy
 8003466:	f3bf 8f6f 	isb	sy
 800346a:	e00a      	b.n	8003482 <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800346c:	2300      	movs	r3, #0
 800346e:	2200      	movs	r2, #0
 8003470:	2100      	movs	r1, #0
 8003472:	6878      	ldr	r0, [r7, #4]
 8003474:	f000 f9fa 	bl	800386c <xQueueGenericSend>
 8003478:	4603      	mov	r3, r0
 800347a:	2b01      	cmp	r3, #1
 800347c:	d001      	beq.n	8003482 <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800347e:	23ff      	movs	r3, #255	; 0xff
 8003480:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 8003482:	68fb      	ldr	r3, [r7, #12]
}
 8003484:	4618      	mov	r0, r3
 8003486:	3710      	adds	r7, #16
 8003488:	46bd      	mov	sp, r7
 800348a:	bd80      	pop	{r7, pc}
 800348c:	e000ed04 	.word	0xe000ed04

08003490 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8003490:	b480      	push	{r7}
 8003492:	b083      	sub	sp, #12
 8003494:	af00      	add	r7, sp, #0
 8003496:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	f103 0208 	add.w	r2, r3, #8
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	f04f 32ff 	mov.w	r2, #4294967295
 80034a8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f103 0208 	add.w	r2, r3, #8
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f103 0208 	add.w	r2, r3, #8
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	2200      	movs	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80034c4:	bf00      	nop
 80034c6:	370c      	adds	r7, #12
 80034c8:	46bd      	mov	sp, r7
 80034ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ce:	4770      	bx	lr

080034d0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80034d0:	b480      	push	{r7}
 80034d2:	b083      	sub	sp, #12
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	2200      	movs	r2, #0
 80034dc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80034de:	bf00      	nop
 80034e0:	370c      	adds	r7, #12
 80034e2:	46bd      	mov	sp, r7
 80034e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e8:	4770      	bx	lr

080034ea <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80034ea:	b480      	push	{r7}
 80034ec:	b085      	sub	sp, #20
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	68fa      	ldr	r2, [r7, #12]
 80034fe:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	689a      	ldr	r2, [r3, #8]
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	683a      	ldr	r2, [r7, #0]
 8003514:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	1c5a      	adds	r2, r3, #1
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	601a      	str	r2, [r3, #0]
}
 8003526:	bf00      	nop
 8003528:	3714      	adds	r7, #20
 800352a:	46bd      	mov	sp, r7
 800352c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003530:	4770      	bx	lr

08003532 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8003532:	b480      	push	{r7}
 8003534:	b085      	sub	sp, #20
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800353c:	683b      	ldr	r3, [r7, #0]
 800353e:	681b      	ldr	r3, [r3, #0]
 8003540:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8003542:	68bb      	ldr	r3, [r7, #8]
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d103      	bne.n	8003552 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	691b      	ldr	r3, [r3, #16]
 800354e:	60fb      	str	r3, [r7, #12]
 8003550:	e00c      	b.n	800356c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	3308      	adds	r3, #8
 8003556:	60fb      	str	r3, [r7, #12]
 8003558:	e002      	b.n	8003560 <vListInsert+0x2e>
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	60fb      	str	r3, [r7, #12]
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	68ba      	ldr	r2, [r7, #8]
 8003568:	429a      	cmp	r2, r3
 800356a:	d2f6      	bcs.n	800355a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800356c:	68fb      	ldr	r3, [r7, #12]
 800356e:	685a      	ldr	r2, [r3, #4]
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8003574:	683b      	ldr	r3, [r7, #0]
 8003576:	685b      	ldr	r3, [r3, #4]
 8003578:	683a      	ldr	r2, [r7, #0]
 800357a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	68fa      	ldr	r2, [r7, #12]
 8003580:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	683a      	ldr	r2, [r7, #0]
 8003586:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	1c5a      	adds	r2, r3, #1
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	601a      	str	r2, [r3, #0]
}
 8003598:	bf00      	nop
 800359a:	3714      	adds	r7, #20
 800359c:	46bd      	mov	sp, r7
 800359e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035a2:	4770      	bx	lr

080035a4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80035a4:	b480      	push	{r7}
 80035a6:	b085      	sub	sp, #20
 80035a8:	af00      	add	r7, sp, #0
 80035aa:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	691b      	ldr	r3, [r3, #16]
 80035b0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	685b      	ldr	r3, [r3, #4]
 80035b6:	687a      	ldr	r2, [r7, #4]
 80035b8:	6892      	ldr	r2, [r2, #8]
 80035ba:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	689b      	ldr	r3, [r3, #8]
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	6852      	ldr	r2, [r2, #4]
 80035c4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	687a      	ldr	r2, [r7, #4]
 80035cc:	429a      	cmp	r2, r3
 80035ce:	d103      	bne.n	80035d8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	689a      	ldr	r2, [r3, #8]
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2200      	movs	r2, #0
 80035dc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	1e5a      	subs	r2, r3, #1
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	3714      	adds	r7, #20
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b084      	sub	sp, #16
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
 8003600:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	2b00      	cmp	r3, #0
 800360a:	d109      	bne.n	8003620 <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800360c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003610:	f383 8811 	msr	BASEPRI, r3
 8003614:	f3bf 8f6f 	isb	sy
 8003618:	f3bf 8f4f 	dsb	sy
 800361c:	60bb      	str	r3, [r7, #8]
 800361e:	e7fe      	b.n	800361e <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 8003620:	f001 fe64 	bl	80052ec <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800362c:	68f9      	ldr	r1, [r7, #12]
 800362e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003630:	fb01 f303 	mul.w	r3, r1, r3
 8003634:	441a      	add	r2, r3
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	2200      	movs	r2, #0
 800363e:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003650:	3b01      	subs	r3, #1
 8003652:	68f9      	ldr	r1, [r7, #12]
 8003654:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8003656:	fb01 f303 	mul.w	r3, r1, r3
 800365a:	441a      	add	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	22ff      	movs	r2, #255	; 0xff
 8003664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	22ff      	movs	r2, #255	; 0xff
 800366c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	2b00      	cmp	r3, #0
 8003674:	d114      	bne.n	80036a0 <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	691b      	ldr	r3, [r3, #16]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d01a      	beq.n	80036b4 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	3310      	adds	r3, #16
 8003682:	4618      	mov	r0, r3
 8003684:	f001 f924 	bl	80048d0 <xTaskRemoveFromEventList>
 8003688:	4603      	mov	r3, r0
 800368a:	2b00      	cmp	r3, #0
 800368c:	d012      	beq.n	80036b4 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800368e:	4b0d      	ldr	r3, [pc, #52]	; (80036c4 <xQueueGenericReset+0xcc>)
 8003690:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003694:	601a      	str	r2, [r3, #0]
 8003696:	f3bf 8f4f 	dsb	sy
 800369a:	f3bf 8f6f 	isb	sy
 800369e:	e009      	b.n	80036b4 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80036a0:	68fb      	ldr	r3, [r7, #12]
 80036a2:	3310      	adds	r3, #16
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7ff fef3 	bl	8003490 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	3324      	adds	r3, #36	; 0x24
 80036ae:	4618      	mov	r0, r3
 80036b0:	f7ff feee 	bl	8003490 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80036b4:	f001 fe48 	bl	8005348 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80036b8:	2301      	movs	r3, #1
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	e000ed04 	.word	0xe000ed04

080036c8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b08e      	sub	sp, #56	; 0x38
 80036cc:	af02      	add	r7, sp, #8
 80036ce:	60f8      	str	r0, [r7, #12]
 80036d0:	60b9      	str	r1, [r7, #8]
 80036d2:	607a      	str	r2, [r7, #4]
 80036d4:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d109      	bne.n	80036f0 <xQueueGenericCreateStatic+0x28>
 80036dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036e0:	f383 8811 	msr	BASEPRI, r3
 80036e4:	f3bf 8f6f 	isb	sy
 80036e8:	f3bf 8f4f 	dsb	sy
 80036ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ee:	e7fe      	b.n	80036ee <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80036f0:	683b      	ldr	r3, [r7, #0]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d109      	bne.n	800370a <xQueueGenericCreateStatic+0x42>
 80036f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80036fa:	f383 8811 	msr	BASEPRI, r3
 80036fe:	f3bf 8f6f 	isb	sy
 8003702:	f3bf 8f4f 	dsb	sy
 8003706:	627b      	str	r3, [r7, #36]	; 0x24
 8003708:	e7fe      	b.n	8003708 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d002      	beq.n	8003716 <xQueueGenericCreateStatic+0x4e>
 8003710:	68bb      	ldr	r3, [r7, #8]
 8003712:	2b00      	cmp	r3, #0
 8003714:	d001      	beq.n	800371a <xQueueGenericCreateStatic+0x52>
 8003716:	2301      	movs	r3, #1
 8003718:	e000      	b.n	800371c <xQueueGenericCreateStatic+0x54>
 800371a:	2300      	movs	r3, #0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d109      	bne.n	8003734 <xQueueGenericCreateStatic+0x6c>
 8003720:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003724:	f383 8811 	msr	BASEPRI, r3
 8003728:	f3bf 8f6f 	isb	sy
 800372c:	f3bf 8f4f 	dsb	sy
 8003730:	623b      	str	r3, [r7, #32]
 8003732:	e7fe      	b.n	8003732 <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d102      	bne.n	8003740 <xQueueGenericCreateStatic+0x78>
 800373a:	68bb      	ldr	r3, [r7, #8]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d101      	bne.n	8003744 <xQueueGenericCreateStatic+0x7c>
 8003740:	2301      	movs	r3, #1
 8003742:	e000      	b.n	8003746 <xQueueGenericCreateStatic+0x7e>
 8003744:	2300      	movs	r3, #0
 8003746:	2b00      	cmp	r3, #0
 8003748:	d109      	bne.n	800375e <xQueueGenericCreateStatic+0x96>
 800374a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800374e:	f383 8811 	msr	BASEPRI, r3
 8003752:	f3bf 8f6f 	isb	sy
 8003756:	f3bf 8f4f 	dsb	sy
 800375a:	61fb      	str	r3, [r7, #28]
 800375c:	e7fe      	b.n	800375c <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800375e:	2348      	movs	r3, #72	; 0x48
 8003760:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8003762:	697b      	ldr	r3, [r7, #20]
 8003764:	2b48      	cmp	r3, #72	; 0x48
 8003766:	d009      	beq.n	800377c <xQueueGenericCreateStatic+0xb4>
 8003768:	f04f 0350 	mov.w	r3, #80	; 0x50
 800376c:	f383 8811 	msr	BASEPRI, r3
 8003770:	f3bf 8f6f 	isb	sy
 8003774:	f3bf 8f4f 	dsb	sy
 8003778:	61bb      	str	r3, [r7, #24]
 800377a:	e7fe      	b.n	800377a <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800377c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800377e:	683b      	ldr	r3, [r7, #0]
 8003780:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8003782:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00d      	beq.n	80037a4 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8003788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800378a:	2201      	movs	r2, #1
 800378c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003790:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8003794:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003796:	9300      	str	r3, [sp, #0]
 8003798:	4613      	mov	r3, r2
 800379a:	687a      	ldr	r2, [r7, #4]
 800379c:	68b9      	ldr	r1, [r7, #8]
 800379e:	68f8      	ldr	r0, [r7, #12]
 80037a0:	f000 f844 	bl	800382c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80037a4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80037a6:	4618      	mov	r0, r3
 80037a8:	3730      	adds	r7, #48	; 0x30
 80037aa:	46bd      	mov	sp, r7
 80037ac:	bd80      	pop	{r7, pc}

080037ae <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80037ae:	b580      	push	{r7, lr}
 80037b0:	b08a      	sub	sp, #40	; 0x28
 80037b2:	af02      	add	r7, sp, #8
 80037b4:	60f8      	str	r0, [r7, #12]
 80037b6:	60b9      	str	r1, [r7, #8]
 80037b8:	4613      	mov	r3, r2
 80037ba:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d109      	bne.n	80037d6 <xQueueGenericCreate+0x28>
 80037c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80037c6:	f383 8811 	msr	BASEPRI, r3
 80037ca:	f3bf 8f6f 	isb	sy
 80037ce:	f3bf 8f4f 	dsb	sy
 80037d2:	613b      	str	r3, [r7, #16]
 80037d4:	e7fe      	b.n	80037d4 <xQueueGenericCreate+0x26>

		if( uxItemSize == ( UBaseType_t ) 0 )
 80037d6:	68bb      	ldr	r3, [r7, #8]
 80037d8:	2b00      	cmp	r3, #0
 80037da:	d102      	bne.n	80037e2 <xQueueGenericCreate+0x34>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 80037dc:	2300      	movs	r3, #0
 80037de:	61fb      	str	r3, [r7, #28]
 80037e0:	e004      	b.n	80037ec <xQueueGenericCreate+0x3e>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	68ba      	ldr	r2, [r7, #8]
 80037e6:	fb02 f303 	mul.w	r3, r2, r3
 80037ea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	3348      	adds	r3, #72	; 0x48
 80037f0:	4618      	mov	r0, r3
 80037f2:	f001 fe95 	bl	8005520 <pvPortMalloc>
 80037f6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 80037f8:	69bb      	ldr	r3, [r7, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d011      	beq.n	8003822 <xQueueGenericCreate+0x74>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 80037fe:	69bb      	ldr	r3, [r7, #24]
 8003800:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8003802:	697b      	ldr	r3, [r7, #20]
 8003804:	3348      	adds	r3, #72	; 0x48
 8003806:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8003808:	69bb      	ldr	r3, [r7, #24]
 800380a:	2200      	movs	r2, #0
 800380c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8003810:	79fa      	ldrb	r2, [r7, #7]
 8003812:	69bb      	ldr	r3, [r7, #24]
 8003814:	9300      	str	r3, [sp, #0]
 8003816:	4613      	mov	r3, r2
 8003818:	697a      	ldr	r2, [r7, #20]
 800381a:	68b9      	ldr	r1, [r7, #8]
 800381c:	68f8      	ldr	r0, [r7, #12]
 800381e:	f000 f805 	bl	800382c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8003822:	69bb      	ldr	r3, [r7, #24]
	}
 8003824:	4618      	mov	r0, r3
 8003826:	3720      	adds	r7, #32
 8003828:	46bd      	mov	sp, r7
 800382a:	bd80      	pop	{r7, pc}

0800382c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800382c:	b580      	push	{r7, lr}
 800382e:	b084      	sub	sp, #16
 8003830:	af00      	add	r7, sp, #0
 8003832:	60f8      	str	r0, [r7, #12]
 8003834:	60b9      	str	r1, [r7, #8]
 8003836:	607a      	str	r2, [r7, #4]
 8003838:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d103      	bne.n	8003848 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8003840:	69bb      	ldr	r3, [r7, #24]
 8003842:	69ba      	ldr	r2, [r7, #24]
 8003844:	601a      	str	r2, [r3, #0]
 8003846:	e002      	b.n	800384e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8003848:	69bb      	ldr	r3, [r7, #24]
 800384a:	687a      	ldr	r2, [r7, #4]
 800384c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800384e:	69bb      	ldr	r3, [r7, #24]
 8003850:	68fa      	ldr	r2, [r7, #12]
 8003852:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8003854:	69bb      	ldr	r3, [r7, #24]
 8003856:	68ba      	ldr	r2, [r7, #8]
 8003858:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800385a:	2101      	movs	r1, #1
 800385c:	69b8      	ldr	r0, [r7, #24]
 800385e:	f7ff fecb 	bl	80035f8 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8003862:	bf00      	nop
 8003864:	3710      	adds	r7, #16
 8003866:	46bd      	mov	sp, r7
 8003868:	bd80      	pop	{r7, pc}
	...

0800386c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800386c:	b580      	push	{r7, lr}
 800386e:	b08e      	sub	sp, #56	; 0x38
 8003870:	af00      	add	r7, sp, #0
 8003872:	60f8      	str	r0, [r7, #12]
 8003874:	60b9      	str	r1, [r7, #8]
 8003876:	607a      	str	r2, [r7, #4]
 8003878:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800387a:	2300      	movs	r3, #0
 800387c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003884:	2b00      	cmp	r3, #0
 8003886:	d109      	bne.n	800389c <xQueueGenericSend+0x30>
 8003888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800388c:	f383 8811 	msr	BASEPRI, r3
 8003890:	f3bf 8f6f 	isb	sy
 8003894:	f3bf 8f4f 	dsb	sy
 8003898:	62bb      	str	r3, [r7, #40]	; 0x28
 800389a:	e7fe      	b.n	800389a <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d103      	bne.n	80038aa <xQueueGenericSend+0x3e>
 80038a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d101      	bne.n	80038ae <xQueueGenericSend+0x42>
 80038aa:	2301      	movs	r3, #1
 80038ac:	e000      	b.n	80038b0 <xQueueGenericSend+0x44>
 80038ae:	2300      	movs	r3, #0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d109      	bne.n	80038c8 <xQueueGenericSend+0x5c>
 80038b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038b8:	f383 8811 	msr	BASEPRI, r3
 80038bc:	f3bf 8f6f 	isb	sy
 80038c0:	f3bf 8f4f 	dsb	sy
 80038c4:	627b      	str	r3, [r7, #36]	; 0x24
 80038c6:	e7fe      	b.n	80038c6 <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80038c8:	683b      	ldr	r3, [r7, #0]
 80038ca:	2b02      	cmp	r3, #2
 80038cc:	d103      	bne.n	80038d6 <xQueueGenericSend+0x6a>
 80038ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80038d2:	2b01      	cmp	r3, #1
 80038d4:	d101      	bne.n	80038da <xQueueGenericSend+0x6e>
 80038d6:	2301      	movs	r3, #1
 80038d8:	e000      	b.n	80038dc <xQueueGenericSend+0x70>
 80038da:	2300      	movs	r3, #0
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d109      	bne.n	80038f4 <xQueueGenericSend+0x88>
 80038e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80038e4:	f383 8811 	msr	BASEPRI, r3
 80038e8:	f3bf 8f6f 	isb	sy
 80038ec:	f3bf 8f4f 	dsb	sy
 80038f0:	623b      	str	r3, [r7, #32]
 80038f2:	e7fe      	b.n	80038f2 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80038f4:	f001 f9a2 	bl	8004c3c <xTaskGetSchedulerState>
 80038f8:	4603      	mov	r3, r0
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d102      	bne.n	8003904 <xQueueGenericSend+0x98>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	2b00      	cmp	r3, #0
 8003902:	d101      	bne.n	8003908 <xQueueGenericSend+0x9c>
 8003904:	2301      	movs	r3, #1
 8003906:	e000      	b.n	800390a <xQueueGenericSend+0x9e>
 8003908:	2300      	movs	r3, #0
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <xQueueGenericSend+0xb6>
 800390e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003912:	f383 8811 	msr	BASEPRI, r3
 8003916:	f3bf 8f6f 	isb	sy
 800391a:	f3bf 8f4f 	dsb	sy
 800391e:	61fb      	str	r3, [r7, #28]
 8003920:	e7fe      	b.n	8003920 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003922:	f001 fce3 	bl	80052ec <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8003926:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003928:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800392a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800392c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800392e:	429a      	cmp	r2, r3
 8003930:	d302      	bcc.n	8003938 <xQueueGenericSend+0xcc>
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	2b02      	cmp	r3, #2
 8003936:	d129      	bne.n	800398c <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8003938:	683a      	ldr	r2, [r7, #0]
 800393a:	68b9      	ldr	r1, [r7, #8]
 800393c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800393e:	f000 fab6 	bl	8003eae <prvCopyDataToQueue>
 8003942:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003944:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003946:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003948:	2b00      	cmp	r3, #0
 800394a:	d010      	beq.n	800396e <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800394c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800394e:	3324      	adds	r3, #36	; 0x24
 8003950:	4618      	mov	r0, r3
 8003952:	f000 ffbd 	bl	80048d0 <xTaskRemoveFromEventList>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d013      	beq.n	8003984 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800395c:	4b3f      	ldr	r3, [pc, #252]	; (8003a5c <xQueueGenericSend+0x1f0>)
 800395e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003962:	601a      	str	r2, [r3, #0]
 8003964:	f3bf 8f4f 	dsb	sy
 8003968:	f3bf 8f6f 	isb	sy
 800396c:	e00a      	b.n	8003984 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800396e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003970:	2b00      	cmp	r3, #0
 8003972:	d007      	beq.n	8003984 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8003974:	4b39      	ldr	r3, [pc, #228]	; (8003a5c <xQueueGenericSend+0x1f0>)
 8003976:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800397a:	601a      	str	r2, [r3, #0]
 800397c:	f3bf 8f4f 	dsb	sy
 8003980:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8003984:	f001 fce0 	bl	8005348 <vPortExitCritical>
				return pdPASS;
 8003988:	2301      	movs	r3, #1
 800398a:	e063      	b.n	8003a54 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	2b00      	cmp	r3, #0
 8003990:	d103      	bne.n	800399a <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8003992:	f001 fcd9 	bl	8005348 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8003996:	2300      	movs	r3, #0
 8003998:	e05c      	b.n	8003a54 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800399a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800399c:	2b00      	cmp	r3, #0
 800399e:	d106      	bne.n	80039ae <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80039a0:	f107 0314 	add.w	r3, r7, #20
 80039a4:	4618      	mov	r0, r3
 80039a6:	f000 fff5 	bl	8004994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80039aa:	2301      	movs	r3, #1
 80039ac:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80039ae:	f001 fccb 	bl	8005348 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80039b2:	f000 fdad 	bl	8004510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80039b6:	f001 fc99 	bl	80052ec <vPortEnterCritical>
 80039ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039bc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80039c0:	b25b      	sxtb	r3, r3
 80039c2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039c6:	d103      	bne.n	80039d0 <xQueueGenericSend+0x164>
 80039c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80039d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039d2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80039d6:	b25b      	sxtb	r3, r3
 80039d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80039dc:	d103      	bne.n	80039e6 <xQueueGenericSend+0x17a>
 80039de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039e0:	2200      	movs	r2, #0
 80039e2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80039e6:	f001 fcaf 	bl	8005348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80039ea:	1d3a      	adds	r2, r7, #4
 80039ec:	f107 0314 	add.w	r3, r7, #20
 80039f0:	4611      	mov	r1, r2
 80039f2:	4618      	mov	r0, r3
 80039f4:	f000 ffe4 	bl	80049c0 <xTaskCheckForTimeOut>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d124      	bne.n	8003a48 <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80039fe:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a00:	f000 fb4d 	bl	800409e <prvIsQueueFull>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d018      	beq.n	8003a3c <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8003a0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a0c:	3310      	adds	r3, #16
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	4611      	mov	r1, r2
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 ff38 	bl	8004888 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8003a18:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a1a:	f000 fad8 	bl	8003fce <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8003a1e:	f000 fd85 	bl	800452c <xTaskResumeAll>
 8003a22:	4603      	mov	r3, r0
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	f47f af7c 	bne.w	8003922 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 8003a2a:	4b0c      	ldr	r3, [pc, #48]	; (8003a5c <xQueueGenericSend+0x1f0>)
 8003a2c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003a30:	601a      	str	r2, [r3, #0]
 8003a32:	f3bf 8f4f 	dsb	sy
 8003a36:	f3bf 8f6f 	isb	sy
 8003a3a:	e772      	b.n	8003922 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8003a3c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a3e:	f000 fac6 	bl	8003fce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003a42:	f000 fd73 	bl	800452c <xTaskResumeAll>
 8003a46:	e76c      	b.n	8003922 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8003a48:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003a4a:	f000 fac0 	bl	8003fce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003a4e:	f000 fd6d 	bl	800452c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8003a52:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8003a54:	4618      	mov	r0, r3
 8003a56:	3738      	adds	r7, #56	; 0x38
 8003a58:	46bd      	mov	sp, r7
 8003a5a:	bd80      	pop	{r7, pc}
 8003a5c:	e000ed04 	.word	0xe000ed04

08003a60 <xQueueGiveFromISR>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b08e      	sub	sp, #56	; 0x38
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8003a6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <xQueueGiveFromISR+0x28>
 8003a74:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a78:	f383 8811 	msr	BASEPRI, r3
 8003a7c:	f3bf 8f6f 	isb	sy
 8003a80:	f3bf 8f4f 	dsb	sy
 8003a84:	623b      	str	r3, [r7, #32]
 8003a86:	e7fe      	b.n	8003a86 <xQueueGiveFromISR+0x26>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003a88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d009      	beq.n	8003aa4 <xQueueGiveFromISR+0x44>
 8003a90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003a94:	f383 8811 	msr	BASEPRI, r3
 8003a98:	f3bf 8f6f 	isb	sy
 8003a9c:	f3bf 8f4f 	dsb	sy
 8003aa0:	61fb      	str	r3, [r7, #28]
 8003aa2:	e7fe      	b.n	8003aa2 <xQueueGiveFromISR+0x42>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8003aa4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d103      	bne.n	8003ab4 <xQueueGiveFromISR+0x54>
 8003aac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d101      	bne.n	8003ab8 <xQueueGiveFromISR+0x58>
 8003ab4:	2301      	movs	r3, #1
 8003ab6:	e000      	b.n	8003aba <xQueueGiveFromISR+0x5a>
 8003ab8:	2300      	movs	r3, #0
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d109      	bne.n	8003ad2 <xQueueGiveFromISR+0x72>
 8003abe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ac2:	f383 8811 	msr	BASEPRI, r3
 8003ac6:	f3bf 8f6f 	isb	sy
 8003aca:	f3bf 8f4f 	dsb	sy
 8003ace:	61bb      	str	r3, [r7, #24]
 8003ad0:	e7fe      	b.n	8003ad0 <xQueueGiveFromISR+0x70>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003ad2:	f001 fce7 	bl	80054a4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8003ad6:	f3ef 8211 	mrs	r2, BASEPRI
 8003ada:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003ade:	f383 8811 	msr	BASEPRI, r3
 8003ae2:	f3bf 8f6f 	isb	sy
 8003ae6:	f3bf 8f4f 	dsb	sy
 8003aea:	617a      	str	r2, [r7, #20]
 8003aec:	613b      	str	r3, [r7, #16]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8003aee:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003af0:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003af2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8003af8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003afc:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8003afe:	429a      	cmp	r2, r3
 8003b00:	d22b      	bcs.n	8003b5a <xQueueGiveFromISR+0xfa>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8003b02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b04:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003b08:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003b0c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b12:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8003b14:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b1c:	d112      	bne.n	8003b44 <xQueueGiveFromISR+0xe4>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003b1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d016      	beq.n	8003b54 <xQueueGiveFromISR+0xf4>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003b26:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b28:	3324      	adds	r3, #36	; 0x24
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f000 fed0 	bl	80048d0 <xTaskRemoveFromEventList>
 8003b30:	4603      	mov	r3, r0
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d00e      	beq.n	8003b54 <xQueueGiveFromISR+0xf4>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8003b36:	683b      	ldr	r3, [r7, #0]
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d00b      	beq.n	8003b54 <xQueueGiveFromISR+0xf4>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8003b3c:	683b      	ldr	r3, [r7, #0]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	601a      	str	r2, [r3, #0]
 8003b42:	e007      	b.n	8003b54 <xQueueGiveFromISR+0xf4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8003b44:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003b48:	3301      	adds	r3, #1
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	b25a      	sxtb	r2, r3
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8003b54:	2301      	movs	r3, #1
 8003b56:	637b      	str	r3, [r7, #52]	; 0x34
 8003b58:	e001      	b.n	8003b5e <xQueueGiveFromISR+0xfe>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	637b      	str	r3, [r7, #52]	; 0x34
 8003b5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b60:	60fb      	str	r3, [r7, #12]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003b68:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	3738      	adds	r7, #56	; 0x38
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	bd80      	pop	{r7, pc}
	...

08003b74 <xQueueSemaphoreTake>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8003b74:	b580      	push	{r7, lr}
 8003b76:	b08e      	sub	sp, #56	; 0x38
 8003b78:	af00      	add	r7, sp, #0
 8003b7a:	6078      	str	r0, [r7, #4]
 8003b7c:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8003b7e:	2300      	movs	r3, #0
 8003b80:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8003b86:	2300      	movs	r3, #0
 8003b88:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8003b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d109      	bne.n	8003ba4 <xQueueSemaphoreTake+0x30>
	__asm volatile
 8003b90:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003b94:	f383 8811 	msr	BASEPRI, r3
 8003b98:	f3bf 8f6f 	isb	sy
 8003b9c:	f3bf 8f4f 	dsb	sy
 8003ba0:	623b      	str	r3, [r7, #32]
 8003ba2:	e7fe      	b.n	8003ba2 <xQueueSemaphoreTake+0x2e>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8003ba4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d009      	beq.n	8003bc0 <xQueueSemaphoreTake+0x4c>
 8003bac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bb0:	f383 8811 	msr	BASEPRI, r3
 8003bb4:	f3bf 8f6f 	isb	sy
 8003bb8:	f3bf 8f4f 	dsb	sy
 8003bbc:	61fb      	str	r3, [r7, #28]
 8003bbe:	e7fe      	b.n	8003bbe <xQueueSemaphoreTake+0x4a>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8003bc0:	f001 f83c 	bl	8004c3c <xTaskGetSchedulerState>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d102      	bne.n	8003bd0 <xQueueSemaphoreTake+0x5c>
 8003bca:	683b      	ldr	r3, [r7, #0]
 8003bcc:	2b00      	cmp	r3, #0
 8003bce:	d101      	bne.n	8003bd4 <xQueueSemaphoreTake+0x60>
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e000      	b.n	8003bd6 <xQueueSemaphoreTake+0x62>
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d109      	bne.n	8003bee <xQueueSemaphoreTake+0x7a>
 8003bda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003bde:	f383 8811 	msr	BASEPRI, r3
 8003be2:	f3bf 8f6f 	isb	sy
 8003be6:	f3bf 8f4f 	dsb	sy
 8003bea:	61bb      	str	r3, [r7, #24]
 8003bec:	e7fe      	b.n	8003bec <xQueueSemaphoreTake+0x78>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8003bee:	f001 fb7d 	bl	80052ec <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8003bf2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003bf4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003bf6:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8003bf8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d024      	beq.n	8003c48 <xQueueSemaphoreTake+0xd4>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8003bfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003c00:	1e5a      	subs	r2, r3, #1
 8003c02:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c04:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	2b00      	cmp	r3, #0
 8003c0c:	d104      	bne.n	8003c18 <xQueueSemaphoreTake+0xa4>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8003c0e:	f001 f9cf 	bl	8004fb0 <pvTaskIncrementMutexHeldCount>
 8003c12:	4602      	mov	r2, r0
 8003c14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c16:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003c18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	d00f      	beq.n	8003c40 <xQueueSemaphoreTake+0xcc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c22:	3310      	adds	r3, #16
 8003c24:	4618      	mov	r0, r3
 8003c26:	f000 fe53 	bl	80048d0 <xTaskRemoveFromEventList>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	2b00      	cmp	r3, #0
 8003c2e:	d007      	beq.n	8003c40 <xQueueSemaphoreTake+0xcc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8003c30:	4b53      	ldr	r3, [pc, #332]	; (8003d80 <xQueueSemaphoreTake+0x20c>)
 8003c32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003c36:	601a      	str	r2, [r3, #0]
 8003c38:	f3bf 8f4f 	dsb	sy
 8003c3c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8003c40:	f001 fb82 	bl	8005348 <vPortExitCritical>
				return pdPASS;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e096      	b.n	8003d76 <xQueueSemaphoreTake+0x202>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d110      	bne.n	8003c70 <xQueueSemaphoreTake+0xfc>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8003c4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003c50:	2b00      	cmp	r3, #0
 8003c52:	d009      	beq.n	8003c68 <xQueueSemaphoreTake+0xf4>
 8003c54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003c58:	f383 8811 	msr	BASEPRI, r3
 8003c5c:	f3bf 8f6f 	isb	sy
 8003c60:	f3bf 8f4f 	dsb	sy
 8003c64:	617b      	str	r3, [r7, #20]
 8003c66:	e7fe      	b.n	8003c66 <xQueueSemaphoreTake+0xf2>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8003c68:	f001 fb6e 	bl	8005348 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	e082      	b.n	8003d76 <xQueueSemaphoreTake+0x202>
				}
				else if( xEntryTimeSet == pdFALSE )
 8003c70:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d106      	bne.n	8003c84 <xQueueSemaphoreTake+0x110>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8003c76:	f107 030c 	add.w	r3, r7, #12
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f000 fe8a 	bl	8004994 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8003c80:	2301      	movs	r3, #1
 8003c82:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8003c84:	f001 fb60 	bl	8005348 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 8003c88:	f000 fc42 	bl	8004510 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8003c8c:	f001 fb2e 	bl	80052ec <vPortEnterCritical>
 8003c90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c92:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003c96:	b25b      	sxtb	r3, r3
 8003c98:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c9c:	d103      	bne.n	8003ca6 <xQueueSemaphoreTake+0x132>
 8003c9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca0:	2200      	movs	r2, #0
 8003ca2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003ca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ca8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003cac:	b25b      	sxtb	r3, r3
 8003cae:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003cb2:	d103      	bne.n	8003cbc <xQueueSemaphoreTake+0x148>
 8003cb4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cb6:	2200      	movs	r2, #0
 8003cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003cbc:	f001 fb44 	bl	8005348 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8003cc0:	463a      	mov	r2, r7
 8003cc2:	f107 030c 	add.w	r3, r7, #12
 8003cc6:	4611      	mov	r1, r2
 8003cc8:	4618      	mov	r0, r3
 8003cca:	f000 fe79 	bl	80049c0 <xTaskCheckForTimeOut>
 8003cce:	4603      	mov	r3, r0
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d132      	bne.n	8003d3a <xQueueSemaphoreTake+0x1c6>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003cd4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003cd6:	f000 f9cc 	bl	8004072 <prvIsQueueEmpty>
 8003cda:	4603      	mov	r3, r0
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d026      	beq.n	8003d2e <xQueueSemaphoreTake+0x1ba>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ce0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	2b00      	cmp	r3, #0
 8003ce6:	d109      	bne.n	8003cfc <xQueueSemaphoreTake+0x188>
					{
						taskENTER_CRITICAL();
 8003ce8:	f001 fb00 	bl	80052ec <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003cec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cee:	689b      	ldr	r3, [r3, #8]
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f000 ffc1 	bl	8004c78 <xTaskPriorityInherit>
 8003cf6:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 8003cf8:	f001 fb26 	bl	8005348 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8003cfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003cfe:	3324      	adds	r3, #36	; 0x24
 8003d00:	683a      	ldr	r2, [r7, #0]
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f000 fdbf 	bl	8004888 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8003d0a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d0c:	f000 f95f 	bl	8003fce <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8003d10:	f000 fc0c 	bl	800452c <xTaskResumeAll>
 8003d14:	4603      	mov	r3, r0
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	f47f af69 	bne.w	8003bee <xQueueSemaphoreTake+0x7a>
				{
					portYIELD_WITHIN_API();
 8003d1c:	4b18      	ldr	r3, [pc, #96]	; (8003d80 <xQueueSemaphoreTake+0x20c>)
 8003d1e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8003d22:	601a      	str	r2, [r3, #0]
 8003d24:	f3bf 8f4f 	dsb	sy
 8003d28:	f3bf 8f6f 	isb	sy
 8003d2c:	e75f      	b.n	8003bee <xQueueSemaphoreTake+0x7a>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 8003d2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d30:	f000 f94d 	bl	8003fce <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8003d34:	f000 fbfa 	bl	800452c <xTaskResumeAll>
 8003d38:	e759      	b.n	8003bee <xQueueSemaphoreTake+0x7a>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 8003d3a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d3c:	f000 f947 	bl	8003fce <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8003d40:	f000 fbf4 	bl	800452c <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8003d44:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d46:	f000 f994 	bl	8004072 <prvIsQueueEmpty>
 8003d4a:	4603      	mov	r3, r0
 8003d4c:	2b00      	cmp	r3, #0
 8003d4e:	f43f af4e 	beq.w	8003bee <xQueueSemaphoreTake+0x7a>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 8003d52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d00d      	beq.n	8003d74 <xQueueSemaphoreTake+0x200>
					{
						taskENTER_CRITICAL();
 8003d58:	f001 fac8 	bl	80052ec <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 8003d5c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8003d5e:	f000 f88e 	bl	8003e7e <prvGetDisinheritPriorityAfterTimeout>
 8003d62:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 8003d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	f001 f888 	bl	8004e80 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 8003d70:	f001 faea 	bl	8005348 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8003d74:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8003d76:	4618      	mov	r0, r3
 8003d78:	3738      	adds	r7, #56	; 0x38
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	e000ed04 	.word	0xe000ed04

08003d84 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	b08e      	sub	sp, #56	; 0x38
 8003d88:	af00      	add	r7, sp, #0
 8003d8a:	60f8      	str	r0, [r7, #12]
 8003d8c:	60b9      	str	r1, [r7, #8]
 8003d8e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8003d94:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	d109      	bne.n	8003dae <xQueueReceiveFromISR+0x2a>
 8003d9a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003d9e:	f383 8811 	msr	BASEPRI, r3
 8003da2:	f3bf 8f6f 	isb	sy
 8003da6:	f3bf 8f4f 	dsb	sy
 8003daa:	623b      	str	r3, [r7, #32]
 8003dac:	e7fe      	b.n	8003dac <xQueueReceiveFromISR+0x28>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8003dae:	68bb      	ldr	r3, [r7, #8]
 8003db0:	2b00      	cmp	r3, #0
 8003db2:	d103      	bne.n	8003dbc <xQueueReceiveFromISR+0x38>
 8003db4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d101      	bne.n	8003dc0 <xQueueReceiveFromISR+0x3c>
 8003dbc:	2301      	movs	r3, #1
 8003dbe:	e000      	b.n	8003dc2 <xQueueReceiveFromISR+0x3e>
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d109      	bne.n	8003dda <xQueueReceiveFromISR+0x56>
 8003dc6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003dca:	f383 8811 	msr	BASEPRI, r3
 8003dce:	f3bf 8f6f 	isb	sy
 8003dd2:	f3bf 8f4f 	dsb	sy
 8003dd6:	61fb      	str	r3, [r7, #28]
 8003dd8:	e7fe      	b.n	8003dd8 <xQueueReceiveFromISR+0x54>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8003dda:	f001 fb63 	bl	80054a4 <vPortValidateInterruptPriority>
	__asm volatile
 8003dde:	f3ef 8211 	mrs	r2, BASEPRI
 8003de2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8003de6:	f383 8811 	msr	BASEPRI, r3
 8003dea:	f3bf 8f6f 	isb	sy
 8003dee:	f3bf 8f4f 	dsb	sy
 8003df2:	61ba      	str	r2, [r7, #24]
 8003df4:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8003df6:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8003df8:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003dfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dfe:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003e00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d02f      	beq.n	8003e66 <xQueueReceiveFromISR+0xe2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8003e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e08:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8003e0c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8003e10:	68b9      	ldr	r1, [r7, #8]
 8003e12:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8003e14:	f000 f8b5 	bl	8003f82 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8003e18:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e1a:	1e5a      	subs	r2, r3, #1
 8003e1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e1e:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8003e20:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8003e24:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e28:	d112      	bne.n	8003e50 <xQueueReceiveFromISR+0xcc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8003e2a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d016      	beq.n	8003e60 <xQueueReceiveFromISR+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8003e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e34:	3310      	adds	r3, #16
 8003e36:	4618      	mov	r0, r3
 8003e38:	f000 fd4a 	bl	80048d0 <xTaskRemoveFromEventList>
 8003e3c:	4603      	mov	r3, r0
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d00e      	beq.n	8003e60 <xQueueReceiveFromISR+0xdc>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d00b      	beq.n	8003e60 <xQueueReceiveFromISR+0xdc>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2201      	movs	r2, #1
 8003e4c:	601a      	str	r2, [r3, #0]
 8003e4e:	e007      	b.n	8003e60 <xQueueReceiveFromISR+0xdc>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8003e50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8003e54:	3301      	adds	r3, #1
 8003e56:	b2db      	uxtb	r3, r3
 8003e58:	b25a      	sxtb	r2, r3
 8003e5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e5c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 8003e60:	2301      	movs	r3, #1
 8003e62:	637b      	str	r3, [r7, #52]	; 0x34
 8003e64:	e001      	b.n	8003e6a <xQueueReceiveFromISR+0xe6>
		}
		else
		{
			xReturn = pdFAIL;
 8003e66:	2300      	movs	r3, #0
 8003e68:	637b      	str	r3, [r7, #52]	; 0x34
 8003e6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003e6c:	613b      	str	r3, [r7, #16]
	__asm volatile
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	f383 8811 	msr	BASEPRI, r3
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8003e74:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8003e76:	4618      	mov	r0, r3
 8003e78:	3738      	adds	r7, #56	; 0x38
 8003e7a:	46bd      	mov	sp, r7
 8003e7c:	bd80      	pop	{r7, pc}

08003e7e <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8003e7e:	b480      	push	{r7}
 8003e80:	b085      	sub	sp, #20
 8003e82:	af00      	add	r7, sp, #0
 8003e84:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d006      	beq.n	8003e9c <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f1c3 0307 	rsb	r3, r3, #7
 8003e98:	60fb      	str	r3, [r7, #12]
 8003e9a:	e001      	b.n	8003ea0 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8003e9c:	2300      	movs	r3, #0
 8003e9e:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
	}
 8003ea2:	4618      	mov	r0, r3
 8003ea4:	3714      	adds	r7, #20
 8003ea6:	46bd      	mov	sp, r7
 8003ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eac:	4770      	bx	lr

08003eae <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8003eae:	b580      	push	{r7, lr}
 8003eb0:	b086      	sub	sp, #24
 8003eb2:	af00      	add	r7, sp, #0
 8003eb4:	60f8      	str	r0, [r7, #12]
 8003eb6:	60b9      	str	r1, [r7, #8]
 8003eb8:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8003eba:	2300      	movs	r3, #0
 8003ebc:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec2:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d10d      	bne.n	8003ee8 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d14d      	bne.n	8003f70 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f000 ff4d 	bl	8004d78 <xTaskPriorityDisinherit>
 8003ede:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2200      	movs	r2, #0
 8003ee4:	609a      	str	r2, [r3, #8]
 8003ee6:	e043      	b.n	8003f70 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d119      	bne.n	8003f22 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6858      	ldr	r0, [r3, #4]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef6:	461a      	mov	r2, r3
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	f001 fd0b 	bl	8005914 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	685a      	ldr	r2, [r3, #4]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	441a      	add	r2, r3
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	685a      	ldr	r2, [r3, #4]
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	689b      	ldr	r3, [r3, #8]
 8003f14:	429a      	cmp	r2, r3
 8003f16:	d32b      	bcc.n	8003f70 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681a      	ldr	r2, [r3, #0]
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	605a      	str	r2, [r3, #4]
 8003f20:	e026      	b.n	8003f70 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	68d8      	ldr	r0, [r3, #12]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f2a:	461a      	mov	r2, r3
 8003f2c:	68b9      	ldr	r1, [r7, #8]
 8003f2e:	f001 fcf1 	bl	8005914 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	68da      	ldr	r2, [r3, #12]
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3a:	425b      	negs	r3, r3
 8003f3c:	441a      	add	r2, r3
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	68da      	ldr	r2, [r3, #12]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	429a      	cmp	r2, r3
 8003f4c:	d207      	bcs.n	8003f5e <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	689a      	ldr	r2, [r3, #8]
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f56:	425b      	negs	r3, r3
 8003f58:	441a      	add	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b02      	cmp	r3, #2
 8003f62:	d105      	bne.n	8003f70 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8003f64:	693b      	ldr	r3, [r7, #16]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d002      	beq.n	8003f70 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	3b01      	subs	r3, #1
 8003f6e:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8003f70:	693b      	ldr	r3, [r7, #16]
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 8003f78:	697b      	ldr	r3, [r7, #20]
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3718      	adds	r7, #24
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	bd80      	pop	{r7, pc}

08003f82 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8003f82:	b580      	push	{r7, lr}
 8003f84:	b082      	sub	sp, #8
 8003f86:	af00      	add	r7, sp, #0
 8003f88:	6078      	str	r0, [r7, #4]
 8003f8a:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f90:	2b00      	cmp	r3, #0
 8003f92:	d018      	beq.n	8003fc6 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	68da      	ldr	r2, [r3, #12]
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9c:	441a      	add	r2, r3
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	68da      	ldr	r2, [r3, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	689b      	ldr	r3, [r3, #8]
 8003faa:	429a      	cmp	r2, r3
 8003fac:	d303      	bcc.n	8003fb6 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68d9      	ldr	r1, [r3, #12]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fbe:	461a      	mov	r2, r3
 8003fc0:	6838      	ldr	r0, [r7, #0]
 8003fc2:	f001 fca7 	bl	8005914 <memcpy>
	}
}
 8003fc6:	bf00      	nop
 8003fc8:	3708      	adds	r7, #8
 8003fca:	46bd      	mov	sp, r7
 8003fcc:	bd80      	pop	{r7, pc}

08003fce <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8003fce:	b580      	push	{r7, lr}
 8003fd0:	b084      	sub	sp, #16
 8003fd2:	af00      	add	r7, sp, #0
 8003fd4:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8003fd6:	f001 f989 	bl	80052ec <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003fe0:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8003fe2:	e011      	b.n	8004008 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d012      	beq.n	8004012 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	3324      	adds	r3, #36	; 0x24
 8003ff0:	4618      	mov	r0, r3
 8003ff2:	f000 fc6d 	bl	80048d0 <xTaskRemoveFromEventList>
 8003ff6:	4603      	mov	r3, r0
 8003ff8:	2b00      	cmp	r3, #0
 8003ffa:	d001      	beq.n	8004000 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8003ffc:	f000 fd40 	bl	8004a80 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8004000:	7bfb      	ldrb	r3, [r7, #15]
 8004002:	3b01      	subs	r3, #1
 8004004:	b2db      	uxtb	r3, r3
 8004006:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8004008:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800400c:	2b00      	cmp	r3, #0
 800400e:	dce9      	bgt.n	8003fe4 <prvUnlockQueue+0x16>
 8004010:	e000      	b.n	8004014 <prvUnlockQueue+0x46>
					break;
 8004012:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	22ff      	movs	r2, #255	; 0xff
 8004018:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800401c:	f001 f994 	bl	8005348 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8004020:	f001 f964 	bl	80052ec <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800402a:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800402c:	e011      	b.n	8004052 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	691b      	ldr	r3, [r3, #16]
 8004032:	2b00      	cmp	r3, #0
 8004034:	d012      	beq.n	800405c <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	3310      	adds	r3, #16
 800403a:	4618      	mov	r0, r3
 800403c:	f000 fc48 	bl	80048d0 <xTaskRemoveFromEventList>
 8004040:	4603      	mov	r3, r0
 8004042:	2b00      	cmp	r3, #0
 8004044:	d001      	beq.n	800404a <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8004046:	f000 fd1b 	bl	8004a80 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800404a:	7bbb      	ldrb	r3, [r7, #14]
 800404c:	3b01      	subs	r3, #1
 800404e:	b2db      	uxtb	r3, r3
 8004050:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8004052:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8004056:	2b00      	cmp	r3, #0
 8004058:	dce9      	bgt.n	800402e <prvUnlockQueue+0x60>
 800405a:	e000      	b.n	800405e <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800405c:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	22ff      	movs	r2, #255	; 0xff
 8004062:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8004066:	f001 f96f 	bl	8005348 <vPortExitCritical>
}
 800406a:	bf00      	nop
 800406c:	3710      	adds	r7, #16
 800406e:	46bd      	mov	sp, r7
 8004070:	bd80      	pop	{r7, pc}

08004072 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8004072:	b580      	push	{r7, lr}
 8004074:	b084      	sub	sp, #16
 8004076:	af00      	add	r7, sp, #0
 8004078:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800407a:	f001 f937 	bl	80052ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004082:	2b00      	cmp	r3, #0
 8004084:	d102      	bne.n	800408c <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8004086:	2301      	movs	r3, #1
 8004088:	60fb      	str	r3, [r7, #12]
 800408a:	e001      	b.n	8004090 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800408c:	2300      	movs	r3, #0
 800408e:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8004090:	f001 f95a 	bl	8005348 <vPortExitCritical>

	return xReturn;
 8004094:	68fb      	ldr	r3, [r7, #12]
}
 8004096:	4618      	mov	r0, r3
 8004098:	3710      	adds	r7, #16
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}

0800409e <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800409e:	b580      	push	{r7, lr}
 80040a0:	b084      	sub	sp, #16
 80040a2:	af00      	add	r7, sp, #0
 80040a4:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80040a6:	f001 f921 	bl	80052ec <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80040b2:	429a      	cmp	r2, r3
 80040b4:	d102      	bne.n	80040bc <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80040b6:	2301      	movs	r3, #1
 80040b8:	60fb      	str	r3, [r7, #12]
 80040ba:	e001      	b.n	80040c0 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80040bc:	2300      	movs	r3, #0
 80040be:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80040c0:	f001 f942 	bl	8005348 <vPortExitCritical>

	return xReturn;
 80040c4:	68fb      	ldr	r3, [r7, #12]
}
 80040c6:	4618      	mov	r0, r3
 80040c8:	3710      	adds	r7, #16
 80040ca:	46bd      	mov	sp, r7
 80040cc:	bd80      	pop	{r7, pc}

080040ce <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80040ce:	b580      	push	{r7, lr}
 80040d0:	b08e      	sub	sp, #56	; 0x38
 80040d2:	af04      	add	r7, sp, #16
 80040d4:	60f8      	str	r0, [r7, #12]
 80040d6:	60b9      	str	r1, [r7, #8]
 80040d8:	607a      	str	r2, [r7, #4]
 80040da:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80040dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80040de:	2b00      	cmp	r3, #0
 80040e0:	d109      	bne.n	80040f6 <xTaskCreateStatic+0x28>
	__asm volatile
 80040e2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80040e6:	f383 8811 	msr	BASEPRI, r3
 80040ea:	f3bf 8f6f 	isb	sy
 80040ee:	f3bf 8f4f 	dsb	sy
 80040f2:	623b      	str	r3, [r7, #32]
 80040f4:	e7fe      	b.n	80040f4 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 80040f6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d109      	bne.n	8004110 <xTaskCreateStatic+0x42>
 80040fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004100:	f383 8811 	msr	BASEPRI, r3
 8004104:	f3bf 8f6f 	isb	sy
 8004108:	f3bf 8f4f 	dsb	sy
 800410c:	61fb      	str	r3, [r7, #28]
 800410e:	e7fe      	b.n	800410e <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8004110:	2354      	movs	r3, #84	; 0x54
 8004112:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8004114:	693b      	ldr	r3, [r7, #16]
 8004116:	2b54      	cmp	r3, #84	; 0x54
 8004118:	d009      	beq.n	800412e <xTaskCreateStatic+0x60>
 800411a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800411e:	f383 8811 	msr	BASEPRI, r3
 8004122:	f3bf 8f6f 	isb	sy
 8004126:	f3bf 8f4f 	dsb	sy
 800412a:	61bb      	str	r3, [r7, #24]
 800412c:	e7fe      	b.n	800412c <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800412e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8004130:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004132:	2b00      	cmp	r3, #0
 8004134:	d01e      	beq.n	8004174 <xTaskCreateStatic+0xa6>
 8004136:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004138:	2b00      	cmp	r3, #0
 800413a:	d01b      	beq.n	8004174 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800413c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800413e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8004140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004142:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8004144:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8004146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004148:	2202      	movs	r2, #2
 800414a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800414e:	2300      	movs	r3, #0
 8004150:	9303      	str	r3, [sp, #12]
 8004152:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004154:	9302      	str	r3, [sp, #8]
 8004156:	f107 0314 	add.w	r3, r7, #20
 800415a:	9301      	str	r3, [sp, #4]
 800415c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800415e:	9300      	str	r3, [sp, #0]
 8004160:	683b      	ldr	r3, [r7, #0]
 8004162:	687a      	ldr	r2, [r7, #4]
 8004164:	68b9      	ldr	r1, [r7, #8]
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 f850 	bl	800420c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800416c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800416e:	f000 f8d3 	bl	8004318 <prvAddNewTaskToReadyList>
 8004172:	e001      	b.n	8004178 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 8004174:	2300      	movs	r3, #0
 8004176:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8004178:	697b      	ldr	r3, [r7, #20]
	}
 800417a:	4618      	mov	r0, r3
 800417c:	3728      	adds	r7, #40	; 0x28
 800417e:	46bd      	mov	sp, r7
 8004180:	bd80      	pop	{r7, pc}

08004182 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8004182:	b580      	push	{r7, lr}
 8004184:	b08c      	sub	sp, #48	; 0x30
 8004186:	af04      	add	r7, sp, #16
 8004188:	60f8      	str	r0, [r7, #12]
 800418a:	60b9      	str	r1, [r7, #8]
 800418c:	603b      	str	r3, [r7, #0]
 800418e:	4613      	mov	r3, r2
 8004190:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8004192:	88fb      	ldrh	r3, [r7, #6]
 8004194:	009b      	lsls	r3, r3, #2
 8004196:	4618      	mov	r0, r3
 8004198:	f001 f9c2 	bl	8005520 <pvPortMalloc>
 800419c:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800419e:	697b      	ldr	r3, [r7, #20]
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d00e      	beq.n	80041c2 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80041a4:	2054      	movs	r0, #84	; 0x54
 80041a6:	f001 f9bb 	bl	8005520 <pvPortMalloc>
 80041aa:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80041ac:	69fb      	ldr	r3, [r7, #28]
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d003      	beq.n	80041ba <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	697a      	ldr	r2, [r7, #20]
 80041b6:	631a      	str	r2, [r3, #48]	; 0x30
 80041b8:	e005      	b.n	80041c6 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80041ba:	6978      	ldr	r0, [r7, #20]
 80041bc:	f001 fa72 	bl	80056a4 <vPortFree>
 80041c0:	e001      	b.n	80041c6 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80041c2:	2300      	movs	r3, #0
 80041c4:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80041c6:	69fb      	ldr	r3, [r7, #28]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d017      	beq.n	80041fc <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80041cc:	69fb      	ldr	r3, [r7, #28]
 80041ce:	2200      	movs	r2, #0
 80041d0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80041d4:	88fa      	ldrh	r2, [r7, #6]
 80041d6:	2300      	movs	r3, #0
 80041d8:	9303      	str	r3, [sp, #12]
 80041da:	69fb      	ldr	r3, [r7, #28]
 80041dc:	9302      	str	r3, [sp, #8]
 80041de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80041e0:	9301      	str	r3, [sp, #4]
 80041e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80041e4:	9300      	str	r3, [sp, #0]
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	68f8      	ldr	r0, [r7, #12]
 80041ec:	f000 f80e 	bl	800420c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80041f0:	69f8      	ldr	r0, [r7, #28]
 80041f2:	f000 f891 	bl	8004318 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80041f6:	2301      	movs	r3, #1
 80041f8:	61bb      	str	r3, [r7, #24]
 80041fa:	e002      	b.n	8004202 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80041fc:	f04f 33ff 	mov.w	r3, #4294967295
 8004200:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8004202:	69bb      	ldr	r3, [r7, #24]
	}
 8004204:	4618      	mov	r0, r3
 8004206:	3720      	adds	r7, #32
 8004208:	46bd      	mov	sp, r7
 800420a:	bd80      	pop	{r7, pc}

0800420c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b088      	sub	sp, #32
 8004210:	af00      	add	r7, sp, #0
 8004212:	60f8      	str	r0, [r7, #12]
 8004214:	60b9      	str	r1, [r7, #8]
 8004216:	607a      	str	r2, [r7, #4]
 8004218:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800421a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800421c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8004224:	3b01      	subs	r3, #1
 8004226:	009b      	lsls	r3, r3, #2
 8004228:	4413      	add	r3, r2
 800422a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800422c:	69bb      	ldr	r3, [r7, #24]
 800422e:	f023 0307 	bic.w	r3, r3, #7
 8004232:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8004234:	69bb      	ldr	r3, [r7, #24]
 8004236:	f003 0307 	and.w	r3, r3, #7
 800423a:	2b00      	cmp	r3, #0
 800423c:	d009      	beq.n	8004252 <prvInitialiseNewTask+0x46>
 800423e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004242:	f383 8811 	msr	BASEPRI, r3
 8004246:	f3bf 8f6f 	isb	sy
 800424a:	f3bf 8f4f 	dsb	sy
 800424e:	617b      	str	r3, [r7, #20]
 8004250:	e7fe      	b.n	8004250 <prvInitialiseNewTask+0x44>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	2b00      	cmp	r3, #0
 8004256:	d01f      	beq.n	8004298 <prvInitialiseNewTask+0x8c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8004258:	2300      	movs	r3, #0
 800425a:	61fb      	str	r3, [r7, #28]
 800425c:	e012      	b.n	8004284 <prvInitialiseNewTask+0x78>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800425e:	68ba      	ldr	r2, [r7, #8]
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	4413      	add	r3, r2
 8004264:	7819      	ldrb	r1, [r3, #0]
 8004266:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004268:	69fb      	ldr	r3, [r7, #28]
 800426a:	4413      	add	r3, r2
 800426c:	3334      	adds	r3, #52	; 0x34
 800426e:	460a      	mov	r2, r1
 8004270:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8004272:	68ba      	ldr	r2, [r7, #8]
 8004274:	69fb      	ldr	r3, [r7, #28]
 8004276:	4413      	add	r3, r2
 8004278:	781b      	ldrb	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d006      	beq.n	800428c <prvInitialiseNewTask+0x80>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	3301      	adds	r3, #1
 8004282:	61fb      	str	r3, [r7, #28]
 8004284:	69fb      	ldr	r3, [r7, #28]
 8004286:	2b0f      	cmp	r3, #15
 8004288:	d9e9      	bls.n	800425e <prvInitialiseNewTask+0x52>
 800428a:	e000      	b.n	800428e <prvInitialiseNewTask+0x82>
			{
				break;
 800428c:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800428e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004290:	2200      	movs	r2, #0
 8004292:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004296:	e003      	b.n	80042a0 <prvInitialiseNewTask+0x94>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8004298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80042a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042a2:	2b06      	cmp	r3, #6
 80042a4:	d901      	bls.n	80042aa <prvInitialiseNewTask+0x9e>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80042a6:	2306      	movs	r3, #6
 80042a8:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80042aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ac:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042ae:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80042b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80042b4:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80042b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b8:	2200      	movs	r2, #0
 80042ba:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80042bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042be:	3304      	adds	r3, #4
 80042c0:	4618      	mov	r0, r3
 80042c2:	f7ff f905 	bl	80034d0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80042c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042c8:	3318      	adds	r3, #24
 80042ca:	4618      	mov	r0, r3
 80042cc:	f7ff f900 	bl	80034d0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80042d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042d2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042d4:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80042d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d8:	f1c3 0207 	rsb	r2, r3, #7
 80042dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042de:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80042e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80042e4:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80042e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042e8:	2200      	movs	r2, #0
 80042ea:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80042ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042ee:	2200      	movs	r2, #0
 80042f0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80042f4:	683a      	ldr	r2, [r7, #0]
 80042f6:	68f9      	ldr	r1, [r7, #12]
 80042f8:	69b8      	ldr	r0, [r7, #24]
 80042fa:	f000 fed3 	bl	80050a4 <pxPortInitialiseStack>
 80042fe:	4602      	mov	r2, r0
 8004300:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004302:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8004304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <prvInitialiseNewTask+0x104>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800430a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800430c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800430e:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8004310:	bf00      	nop
 8004312:	3720      	adds	r7, #32
 8004314:	46bd      	mov	sp, r7
 8004316:	bd80      	pop	{r7, pc}

08004318 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
 800431e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8004320:	f000 ffe4 	bl	80052ec <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8004324:	4b2a      	ldr	r3, [pc, #168]	; (80043d0 <prvAddNewTaskToReadyList+0xb8>)
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	3301      	adds	r3, #1
 800432a:	4a29      	ldr	r2, [pc, #164]	; (80043d0 <prvAddNewTaskToReadyList+0xb8>)
 800432c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800432e:	4b29      	ldr	r3, [pc, #164]	; (80043d4 <prvAddNewTaskToReadyList+0xbc>)
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	2b00      	cmp	r3, #0
 8004334:	d109      	bne.n	800434a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8004336:	4a27      	ldr	r2, [pc, #156]	; (80043d4 <prvAddNewTaskToReadyList+0xbc>)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800433c:	4b24      	ldr	r3, [pc, #144]	; (80043d0 <prvAddNewTaskToReadyList+0xb8>)
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	2b01      	cmp	r3, #1
 8004342:	d110      	bne.n	8004366 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8004344:	f000 fbc0 	bl	8004ac8 <prvInitialiseTaskLists>
 8004348:	e00d      	b.n	8004366 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800434a:	4b23      	ldr	r3, [pc, #140]	; (80043d8 <prvAddNewTaskToReadyList+0xc0>)
 800434c:	681b      	ldr	r3, [r3, #0]
 800434e:	2b00      	cmp	r3, #0
 8004350:	d109      	bne.n	8004366 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8004352:	4b20      	ldr	r3, [pc, #128]	; (80043d4 <prvAddNewTaskToReadyList+0xbc>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	429a      	cmp	r2, r3
 800435e:	d802      	bhi.n	8004366 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8004360:	4a1c      	ldr	r2, [pc, #112]	; (80043d4 <prvAddNewTaskToReadyList+0xbc>)
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8004366:	4b1d      	ldr	r3, [pc, #116]	; (80043dc <prvAddNewTaskToReadyList+0xc4>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	3301      	adds	r3, #1
 800436c:	4a1b      	ldr	r2, [pc, #108]	; (80043dc <prvAddNewTaskToReadyList+0xc4>)
 800436e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004374:	2201      	movs	r2, #1
 8004376:	409a      	lsls	r2, r3
 8004378:	4b19      	ldr	r3, [pc, #100]	; (80043e0 <prvAddNewTaskToReadyList+0xc8>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	4313      	orrs	r3, r2
 800437e:	4a18      	ldr	r2, [pc, #96]	; (80043e0 <prvAddNewTaskToReadyList+0xc8>)
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004386:	4613      	mov	r3, r2
 8004388:	009b      	lsls	r3, r3, #2
 800438a:	4413      	add	r3, r2
 800438c:	009b      	lsls	r3, r3, #2
 800438e:	4a15      	ldr	r2, [pc, #84]	; (80043e4 <prvAddNewTaskToReadyList+0xcc>)
 8004390:	441a      	add	r2, r3
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	3304      	adds	r3, #4
 8004396:	4619      	mov	r1, r3
 8004398:	4610      	mov	r0, r2
 800439a:	f7ff f8a6 	bl	80034ea <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800439e:	f000 ffd3 	bl	8005348 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80043a2:	4b0d      	ldr	r3, [pc, #52]	; (80043d8 <prvAddNewTaskToReadyList+0xc0>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d00e      	beq.n	80043c8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80043aa:	4b0a      	ldr	r3, [pc, #40]	; (80043d4 <prvAddNewTaskToReadyList+0xbc>)
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d207      	bcs.n	80043c8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80043b8:	4b0b      	ldr	r3, [pc, #44]	; (80043e8 <prvAddNewTaskToReadyList+0xd0>)
 80043ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80043be:	601a      	str	r2, [r3, #0]
 80043c0:	f3bf 8f4f 	dsb	sy
 80043c4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80043c8:	bf00      	nop
 80043ca:	3708      	adds	r7, #8
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	20000398 	.word	0x20000398
 80043d4:	20000298 	.word	0x20000298
 80043d8:	200003a4 	.word	0x200003a4
 80043dc:	200003b4 	.word	0x200003b4
 80043e0:	200003a0 	.word	0x200003a0
 80043e4:	2000029c 	.word	0x2000029c
 80043e8:	e000ed04 	.word	0xe000ed04

080043ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b084      	sub	sp, #16
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80043f4:	2300      	movs	r3, #0
 80043f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	2b00      	cmp	r3, #0
 80043fc:	d016      	beq.n	800442c <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80043fe:	4b13      	ldr	r3, [pc, #76]	; (800444c <vTaskDelay+0x60>)
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d009      	beq.n	800441a <vTaskDelay+0x2e>
 8004406:	f04f 0350 	mov.w	r3, #80	; 0x50
 800440a:	f383 8811 	msr	BASEPRI, r3
 800440e:	f3bf 8f6f 	isb	sy
 8004412:	f3bf 8f4f 	dsb	sy
 8004416:	60bb      	str	r3, [r7, #8]
 8004418:	e7fe      	b.n	8004418 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800441a:	f000 f879 	bl	8004510 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800441e:	2100      	movs	r1, #0
 8004420:	6878      	ldr	r0, [r7, #4]
 8004422:	f000 fdd9 	bl	8004fd8 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8004426:	f000 f881 	bl	800452c <xTaskResumeAll>
 800442a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d107      	bne.n	8004442 <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 8004432:	4b07      	ldr	r3, [pc, #28]	; (8004450 <vTaskDelay+0x64>)
 8004434:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004438:	601a      	str	r2, [r3, #0]
 800443a:	f3bf 8f4f 	dsb	sy
 800443e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004442:	bf00      	nop
 8004444:	3710      	adds	r7, #16
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	200003c0 	.word	0x200003c0
 8004450:	e000ed04 	.word	0xe000ed04

08004454 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b08a      	sub	sp, #40	; 0x28
 8004458:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800445a:	2300      	movs	r3, #0
 800445c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800445e:	2300      	movs	r3, #0
 8004460:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8004462:	463a      	mov	r2, r7
 8004464:	1d39      	adds	r1, r7, #4
 8004466:	f107 0308 	add.w	r3, r7, #8
 800446a:	4618      	mov	r0, r3
 800446c:	f7fc f830 	bl	80004d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8004470:	6839      	ldr	r1, [r7, #0]
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	68ba      	ldr	r2, [r7, #8]
 8004476:	9202      	str	r2, [sp, #8]
 8004478:	9301      	str	r3, [sp, #4]
 800447a:	2300      	movs	r3, #0
 800447c:	9300      	str	r3, [sp, #0]
 800447e:	2300      	movs	r3, #0
 8004480:	460a      	mov	r2, r1
 8004482:	491d      	ldr	r1, [pc, #116]	; (80044f8 <vTaskStartScheduler+0xa4>)
 8004484:	481d      	ldr	r0, [pc, #116]	; (80044fc <vTaskStartScheduler+0xa8>)
 8004486:	f7ff fe22 	bl	80040ce <xTaskCreateStatic>
 800448a:	4602      	mov	r2, r0
 800448c:	4b1c      	ldr	r3, [pc, #112]	; (8004500 <vTaskStartScheduler+0xac>)
 800448e:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8004490:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <vTaskStartScheduler+0xac>)
 8004492:	681b      	ldr	r3, [r3, #0]
 8004494:	2b00      	cmp	r3, #0
 8004496:	d002      	beq.n	800449e <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8004498:	2301      	movs	r3, #1
 800449a:	617b      	str	r3, [r7, #20]
 800449c:	e001      	b.n	80044a2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800449e:	2300      	movs	r3, #0
 80044a0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2b01      	cmp	r3, #1
 80044a6:	d115      	bne.n	80044d4 <vTaskStartScheduler+0x80>
 80044a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044ac:	f383 8811 	msr	BASEPRI, r3
 80044b0:	f3bf 8f6f 	isb	sy
 80044b4:	f3bf 8f4f 	dsb	sy
 80044b8:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80044ba:	4b12      	ldr	r3, [pc, #72]	; (8004504 <vTaskStartScheduler+0xb0>)
 80044bc:	f04f 32ff 	mov.w	r2, #4294967295
 80044c0:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80044c2:	4b11      	ldr	r3, [pc, #68]	; (8004508 <vTaskStartScheduler+0xb4>)
 80044c4:	2201      	movs	r2, #1
 80044c6:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80044c8:	4b10      	ldr	r3, [pc, #64]	; (800450c <vTaskStartScheduler+0xb8>)
 80044ca:	2200      	movs	r2, #0
 80044cc:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80044ce:	f000 fe6f 	bl	80051b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80044d2:	e00d      	b.n	80044f0 <vTaskStartScheduler+0x9c>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80044d4:	697b      	ldr	r3, [r7, #20]
 80044d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044da:	d109      	bne.n	80044f0 <vTaskStartScheduler+0x9c>
 80044dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80044e0:	f383 8811 	msr	BASEPRI, r3
 80044e4:	f3bf 8f6f 	isb	sy
 80044e8:	f3bf 8f4f 	dsb	sy
 80044ec:	60fb      	str	r3, [r7, #12]
 80044ee:	e7fe      	b.n	80044ee <vTaskStartScheduler+0x9a>
}
 80044f0:	bf00      	nop
 80044f2:	3718      	adds	r7, #24
 80044f4:	46bd      	mov	sp, r7
 80044f6:	bd80      	pop	{r7, pc}
 80044f8:	080059a4 	.word	0x080059a4
 80044fc:	08004a99 	.word	0x08004a99
 8004500:	200003bc 	.word	0x200003bc
 8004504:	200003b8 	.word	0x200003b8
 8004508:	200003a4 	.word	0x200003a4
 800450c:	2000039c 	.word	0x2000039c

08004510 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8004510:	b480      	push	{r7}
 8004512:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8004514:	4b04      	ldr	r3, [pc, #16]	; (8004528 <vTaskSuspendAll+0x18>)
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	3301      	adds	r3, #1
 800451a:	4a03      	ldr	r2, [pc, #12]	; (8004528 <vTaskSuspendAll+0x18>)
 800451c:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800451e:	bf00      	nop
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr
 8004528:	200003c0 	.word	0x200003c0

0800452c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800452c:	b580      	push	{r7, lr}
 800452e:	b084      	sub	sp, #16
 8004530:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8004532:	2300      	movs	r3, #0
 8004534:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8004536:	2300      	movs	r3, #0
 8004538:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800453a:	4b41      	ldr	r3, [pc, #260]	; (8004640 <xTaskResumeAll+0x114>)
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	2b00      	cmp	r3, #0
 8004540:	d109      	bne.n	8004556 <xTaskResumeAll+0x2a>
 8004542:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004546:	f383 8811 	msr	BASEPRI, r3
 800454a:	f3bf 8f6f 	isb	sy
 800454e:	f3bf 8f4f 	dsb	sy
 8004552:	603b      	str	r3, [r7, #0]
 8004554:	e7fe      	b.n	8004554 <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8004556:	f000 fec9 	bl	80052ec <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800455a:	4b39      	ldr	r3, [pc, #228]	; (8004640 <xTaskResumeAll+0x114>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	3b01      	subs	r3, #1
 8004560:	4a37      	ldr	r2, [pc, #220]	; (8004640 <xTaskResumeAll+0x114>)
 8004562:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004564:	4b36      	ldr	r3, [pc, #216]	; (8004640 <xTaskResumeAll+0x114>)
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	2b00      	cmp	r3, #0
 800456a:	d161      	bne.n	8004630 <xTaskResumeAll+0x104>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800456c:	4b35      	ldr	r3, [pc, #212]	; (8004644 <xTaskResumeAll+0x118>)
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	2b00      	cmp	r3, #0
 8004572:	d05d      	beq.n	8004630 <xTaskResumeAll+0x104>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8004574:	e02e      	b.n	80045d4 <xTaskResumeAll+0xa8>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004576:	4b34      	ldr	r3, [pc, #208]	; (8004648 <xTaskResumeAll+0x11c>)
 8004578:	68db      	ldr	r3, [r3, #12]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	3318      	adds	r3, #24
 8004582:	4618      	mov	r0, r3
 8004584:	f7ff f80e 	bl	80035a4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	3304      	adds	r3, #4
 800458c:	4618      	mov	r0, r3
 800458e:	f7ff f809 	bl	80035a4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004596:	2201      	movs	r2, #1
 8004598:	409a      	lsls	r2, r3
 800459a:	4b2c      	ldr	r3, [pc, #176]	; (800464c <xTaskResumeAll+0x120>)
 800459c:	681b      	ldr	r3, [r3, #0]
 800459e:	4313      	orrs	r3, r2
 80045a0:	4a2a      	ldr	r2, [pc, #168]	; (800464c <xTaskResumeAll+0x120>)
 80045a2:	6013      	str	r3, [r2, #0]
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045a8:	4613      	mov	r3, r2
 80045aa:	009b      	lsls	r3, r3, #2
 80045ac:	4413      	add	r3, r2
 80045ae:	009b      	lsls	r3, r3, #2
 80045b0:	4a27      	ldr	r2, [pc, #156]	; (8004650 <xTaskResumeAll+0x124>)
 80045b2:	441a      	add	r2, r3
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	3304      	adds	r3, #4
 80045b8:	4619      	mov	r1, r3
 80045ba:	4610      	mov	r0, r2
 80045bc:	f7fe ff95 	bl	80034ea <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80045c4:	4b23      	ldr	r3, [pc, #140]	; (8004654 <xTaskResumeAll+0x128>)
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045ca:	429a      	cmp	r2, r3
 80045cc:	d302      	bcc.n	80045d4 <xTaskResumeAll+0xa8>
					{
						xYieldPending = pdTRUE;
 80045ce:	4b22      	ldr	r3, [pc, #136]	; (8004658 <xTaskResumeAll+0x12c>)
 80045d0:	2201      	movs	r2, #1
 80045d2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80045d4:	4b1c      	ldr	r3, [pc, #112]	; (8004648 <xTaskResumeAll+0x11c>)
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d1cc      	bne.n	8004576 <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <xTaskResumeAll+0xba>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80045e2:	f000 fb0b 	bl	8004bfc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80045e6:	4b1d      	ldr	r3, [pc, #116]	; (800465c <xTaskResumeAll+0x130>)
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d010      	beq.n	8004614 <xTaskResumeAll+0xe8>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80045f2:	f000 f837 	bl	8004664 <xTaskIncrementTick>
 80045f6:	4603      	mov	r3, r0
 80045f8:	2b00      	cmp	r3, #0
 80045fa:	d002      	beq.n	8004602 <xTaskResumeAll+0xd6>
							{
								xYieldPending = pdTRUE;
 80045fc:	4b16      	ldr	r3, [pc, #88]	; (8004658 <xTaskResumeAll+0x12c>)
 80045fe:	2201      	movs	r2, #1
 8004600:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	3b01      	subs	r3, #1
 8004606:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2b00      	cmp	r3, #0
 800460c:	d1f1      	bne.n	80045f2 <xTaskResumeAll+0xc6>

						uxPendedTicks = 0;
 800460e:	4b13      	ldr	r3, [pc, #76]	; (800465c <xTaskResumeAll+0x130>)
 8004610:	2200      	movs	r2, #0
 8004612:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8004614:	4b10      	ldr	r3, [pc, #64]	; (8004658 <xTaskResumeAll+0x12c>)
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	2b00      	cmp	r3, #0
 800461a:	d009      	beq.n	8004630 <xTaskResumeAll+0x104>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800461c:	2301      	movs	r3, #1
 800461e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8004620:	4b0f      	ldr	r3, [pc, #60]	; (8004660 <xTaskResumeAll+0x134>)
 8004622:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004626:	601a      	str	r2, [r3, #0]
 8004628:	f3bf 8f4f 	dsb	sy
 800462c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8004630:	f000 fe8a 	bl	8005348 <vPortExitCritical>

	return xAlreadyYielded;
 8004634:	68bb      	ldr	r3, [r7, #8]
}
 8004636:	4618      	mov	r0, r3
 8004638:	3710      	adds	r7, #16
 800463a:	46bd      	mov	sp, r7
 800463c:	bd80      	pop	{r7, pc}
 800463e:	bf00      	nop
 8004640:	200003c0 	.word	0x200003c0
 8004644:	20000398 	.word	0x20000398
 8004648:	20000358 	.word	0x20000358
 800464c:	200003a0 	.word	0x200003a0
 8004650:	2000029c 	.word	0x2000029c
 8004654:	20000298 	.word	0x20000298
 8004658:	200003ac 	.word	0x200003ac
 800465c:	200003a8 	.word	0x200003a8
 8004660:	e000ed04 	.word	0xe000ed04

08004664 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8004664:	b580      	push	{r7, lr}
 8004666:	b086      	sub	sp, #24
 8004668:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800466a:	2300      	movs	r3, #0
 800466c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800466e:	4b4e      	ldr	r3, [pc, #312]	; (80047a8 <xTaskIncrementTick+0x144>)
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	2b00      	cmp	r3, #0
 8004674:	f040 8087 	bne.w	8004786 <xTaskIncrementTick+0x122>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8004678:	4b4c      	ldr	r3, [pc, #304]	; (80047ac <xTaskIncrementTick+0x148>)
 800467a:	681b      	ldr	r3, [r3, #0]
 800467c:	3301      	adds	r3, #1
 800467e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8004680:	4a4a      	ldr	r2, [pc, #296]	; (80047ac <xTaskIncrementTick+0x148>)
 8004682:	693b      	ldr	r3, [r7, #16]
 8004684:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d11f      	bne.n	80046cc <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800468c:	4b48      	ldr	r3, [pc, #288]	; (80047b0 <xTaskIncrementTick+0x14c>)
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	2b00      	cmp	r3, #0
 8004694:	d009      	beq.n	80046aa <xTaskIncrementTick+0x46>
 8004696:	f04f 0350 	mov.w	r3, #80	; 0x50
 800469a:	f383 8811 	msr	BASEPRI, r3
 800469e:	f3bf 8f6f 	isb	sy
 80046a2:	f3bf 8f4f 	dsb	sy
 80046a6:	603b      	str	r3, [r7, #0]
 80046a8:	e7fe      	b.n	80046a8 <xTaskIncrementTick+0x44>
 80046aa:	4b41      	ldr	r3, [pc, #260]	; (80047b0 <xTaskIncrementTick+0x14c>)
 80046ac:	681b      	ldr	r3, [r3, #0]
 80046ae:	60fb      	str	r3, [r7, #12]
 80046b0:	4b40      	ldr	r3, [pc, #256]	; (80047b4 <xTaskIncrementTick+0x150>)
 80046b2:	681b      	ldr	r3, [r3, #0]
 80046b4:	4a3e      	ldr	r2, [pc, #248]	; (80047b0 <xTaskIncrementTick+0x14c>)
 80046b6:	6013      	str	r3, [r2, #0]
 80046b8:	4a3e      	ldr	r2, [pc, #248]	; (80047b4 <xTaskIncrementTick+0x150>)
 80046ba:	68fb      	ldr	r3, [r7, #12]
 80046bc:	6013      	str	r3, [r2, #0]
 80046be:	4b3e      	ldr	r3, [pc, #248]	; (80047b8 <xTaskIncrementTick+0x154>)
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	3301      	adds	r3, #1
 80046c4:	4a3c      	ldr	r2, [pc, #240]	; (80047b8 <xTaskIncrementTick+0x154>)
 80046c6:	6013      	str	r3, [r2, #0]
 80046c8:	f000 fa98 	bl	8004bfc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80046cc:	4b3b      	ldr	r3, [pc, #236]	; (80047bc <xTaskIncrementTick+0x158>)
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	693a      	ldr	r2, [r7, #16]
 80046d2:	429a      	cmp	r2, r3
 80046d4:	d348      	bcc.n	8004768 <xTaskIncrementTick+0x104>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80046d6:	4b36      	ldr	r3, [pc, #216]	; (80047b0 <xTaskIncrementTick+0x14c>)
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681b      	ldr	r3, [r3, #0]
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d104      	bne.n	80046ea <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80046e0:	4b36      	ldr	r3, [pc, #216]	; (80047bc <xTaskIncrementTick+0x158>)
 80046e2:	f04f 32ff 	mov.w	r2, #4294967295
 80046e6:	601a      	str	r2, [r3, #0]
					break;
 80046e8:	e03e      	b.n	8004768 <xTaskIncrementTick+0x104>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80046ea:	4b31      	ldr	r3, [pc, #196]	; (80047b0 <xTaskIncrementTick+0x14c>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	68db      	ldr	r3, [r3, #12]
 80046f0:	68db      	ldr	r3, [r3, #12]
 80046f2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80046f4:	68bb      	ldr	r3, [r7, #8]
 80046f6:	685b      	ldr	r3, [r3, #4]
 80046f8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80046fa:	693a      	ldr	r2, [r7, #16]
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	429a      	cmp	r2, r3
 8004700:	d203      	bcs.n	800470a <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8004702:	4a2e      	ldr	r2, [pc, #184]	; (80047bc <xTaskIncrementTick+0x158>)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8004708:	e02e      	b.n	8004768 <xTaskIncrementTick+0x104>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800470a:	68bb      	ldr	r3, [r7, #8]
 800470c:	3304      	adds	r3, #4
 800470e:	4618      	mov	r0, r3
 8004710:	f7fe ff48 	bl	80035a4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	2b00      	cmp	r3, #0
 800471a:	d004      	beq.n	8004726 <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	3318      	adds	r3, #24
 8004720:	4618      	mov	r0, r3
 8004722:	f7fe ff3f 	bl	80035a4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800472a:	2201      	movs	r2, #1
 800472c:	409a      	lsls	r2, r3
 800472e:	4b24      	ldr	r3, [pc, #144]	; (80047c0 <xTaskIncrementTick+0x15c>)
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4313      	orrs	r3, r2
 8004734:	4a22      	ldr	r2, [pc, #136]	; (80047c0 <xTaskIncrementTick+0x15c>)
 8004736:	6013      	str	r3, [r2, #0]
 8004738:	68bb      	ldr	r3, [r7, #8]
 800473a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800473c:	4613      	mov	r3, r2
 800473e:	009b      	lsls	r3, r3, #2
 8004740:	4413      	add	r3, r2
 8004742:	009b      	lsls	r3, r3, #2
 8004744:	4a1f      	ldr	r2, [pc, #124]	; (80047c4 <xTaskIncrementTick+0x160>)
 8004746:	441a      	add	r2, r3
 8004748:	68bb      	ldr	r3, [r7, #8]
 800474a:	3304      	adds	r3, #4
 800474c:	4619      	mov	r1, r3
 800474e:	4610      	mov	r0, r2
 8004750:	f7fe fecb 	bl	80034ea <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004758:	4b1b      	ldr	r3, [pc, #108]	; (80047c8 <xTaskIncrementTick+0x164>)
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800475e:	429a      	cmp	r2, r3
 8004760:	d3b9      	bcc.n	80046d6 <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 8004762:	2301      	movs	r3, #1
 8004764:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004766:	e7b6      	b.n	80046d6 <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8004768:	4b17      	ldr	r3, [pc, #92]	; (80047c8 <xTaskIncrementTick+0x164>)
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800476e:	4915      	ldr	r1, [pc, #84]	; (80047c4 <xTaskIncrementTick+0x160>)
 8004770:	4613      	mov	r3, r2
 8004772:	009b      	lsls	r3, r3, #2
 8004774:	4413      	add	r3, r2
 8004776:	009b      	lsls	r3, r3, #2
 8004778:	440b      	add	r3, r1
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	2b01      	cmp	r3, #1
 800477e:	d907      	bls.n	8004790 <xTaskIncrementTick+0x12c>
			{
				xSwitchRequired = pdTRUE;
 8004780:	2301      	movs	r3, #1
 8004782:	617b      	str	r3, [r7, #20]
 8004784:	e004      	b.n	8004790 <xTaskIncrementTick+0x12c>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8004786:	4b11      	ldr	r3, [pc, #68]	; (80047cc <xTaskIncrementTick+0x168>)
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	3301      	adds	r3, #1
 800478c:	4a0f      	ldr	r2, [pc, #60]	; (80047cc <xTaskIncrementTick+0x168>)
 800478e:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8004790:	4b0f      	ldr	r3, [pc, #60]	; (80047d0 <xTaskIncrementTick+0x16c>)
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d001      	beq.n	800479c <xTaskIncrementTick+0x138>
		{
			xSwitchRequired = pdTRUE;
 8004798:	2301      	movs	r3, #1
 800479a:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800479c:	697b      	ldr	r3, [r7, #20]
}
 800479e:	4618      	mov	r0, r3
 80047a0:	3718      	adds	r7, #24
 80047a2:	46bd      	mov	sp, r7
 80047a4:	bd80      	pop	{r7, pc}
 80047a6:	bf00      	nop
 80047a8:	200003c0 	.word	0x200003c0
 80047ac:	2000039c 	.word	0x2000039c
 80047b0:	20000350 	.word	0x20000350
 80047b4:	20000354 	.word	0x20000354
 80047b8:	200003b0 	.word	0x200003b0
 80047bc:	200003b8 	.word	0x200003b8
 80047c0:	200003a0 	.word	0x200003a0
 80047c4:	2000029c 	.word	0x2000029c
 80047c8:	20000298 	.word	0x20000298
 80047cc:	200003a8 	.word	0x200003a8
 80047d0:	200003ac 	.word	0x200003ac

080047d4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80047d4:	b480      	push	{r7}
 80047d6:	b087      	sub	sp, #28
 80047d8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80047da:	4b26      	ldr	r3, [pc, #152]	; (8004874 <vTaskSwitchContext+0xa0>)
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d003      	beq.n	80047ea <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80047e2:	4b25      	ldr	r3, [pc, #148]	; (8004878 <vTaskSwitchContext+0xa4>)
 80047e4:	2201      	movs	r2, #1
 80047e6:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80047e8:	e03e      	b.n	8004868 <vTaskSwitchContext+0x94>
		xYieldPending = pdFALSE;
 80047ea:	4b23      	ldr	r3, [pc, #140]	; (8004878 <vTaskSwitchContext+0xa4>)
 80047ec:	2200      	movs	r2, #0
 80047ee:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80047f0:	4b22      	ldr	r3, [pc, #136]	; (800487c <vTaskSwitchContext+0xa8>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	fab3 f383 	clz	r3, r3
 80047fc:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80047fe:	7afb      	ldrb	r3, [r7, #11]
 8004800:	f1c3 031f 	rsb	r3, r3, #31
 8004804:	617b      	str	r3, [r7, #20]
 8004806:	491e      	ldr	r1, [pc, #120]	; (8004880 <vTaskSwitchContext+0xac>)
 8004808:	697a      	ldr	r2, [r7, #20]
 800480a:	4613      	mov	r3, r2
 800480c:	009b      	lsls	r3, r3, #2
 800480e:	4413      	add	r3, r2
 8004810:	009b      	lsls	r3, r3, #2
 8004812:	440b      	add	r3, r1
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	2b00      	cmp	r3, #0
 8004818:	d109      	bne.n	800482e <vTaskSwitchContext+0x5a>
	__asm volatile
 800481a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800481e:	f383 8811 	msr	BASEPRI, r3
 8004822:	f3bf 8f6f 	isb	sy
 8004826:	f3bf 8f4f 	dsb	sy
 800482a:	607b      	str	r3, [r7, #4]
 800482c:	e7fe      	b.n	800482c <vTaskSwitchContext+0x58>
 800482e:	697a      	ldr	r2, [r7, #20]
 8004830:	4613      	mov	r3, r2
 8004832:	009b      	lsls	r3, r3, #2
 8004834:	4413      	add	r3, r2
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4a11      	ldr	r2, [pc, #68]	; (8004880 <vTaskSwitchContext+0xac>)
 800483a:	4413      	add	r3, r2
 800483c:	613b      	str	r3, [r7, #16]
 800483e:	693b      	ldr	r3, [r7, #16]
 8004840:	685b      	ldr	r3, [r3, #4]
 8004842:	685a      	ldr	r2, [r3, #4]
 8004844:	693b      	ldr	r3, [r7, #16]
 8004846:	605a      	str	r2, [r3, #4]
 8004848:	693b      	ldr	r3, [r7, #16]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	693b      	ldr	r3, [r7, #16]
 800484e:	3308      	adds	r3, #8
 8004850:	429a      	cmp	r2, r3
 8004852:	d104      	bne.n	800485e <vTaskSwitchContext+0x8a>
 8004854:	693b      	ldr	r3, [r7, #16]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	693b      	ldr	r3, [r7, #16]
 800485c:	605a      	str	r2, [r3, #4]
 800485e:	693b      	ldr	r3, [r7, #16]
 8004860:	685b      	ldr	r3, [r3, #4]
 8004862:	68db      	ldr	r3, [r3, #12]
 8004864:	4a07      	ldr	r2, [pc, #28]	; (8004884 <vTaskSwitchContext+0xb0>)
 8004866:	6013      	str	r3, [r2, #0]
}
 8004868:	bf00      	nop
 800486a:	371c      	adds	r7, #28
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr
 8004874:	200003c0 	.word	0x200003c0
 8004878:	200003ac 	.word	0x200003ac
 800487c:	200003a0 	.word	0x200003a0
 8004880:	2000029c 	.word	0x2000029c
 8004884:	20000298 	.word	0x20000298

08004888 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b084      	sub	sp, #16
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
 8004890:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d109      	bne.n	80048ac <vTaskPlaceOnEventList+0x24>
 8004898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800489c:	f383 8811 	msr	BASEPRI, r3
 80048a0:	f3bf 8f6f 	isb	sy
 80048a4:	f3bf 8f4f 	dsb	sy
 80048a8:	60fb      	str	r3, [r7, #12]
 80048aa:	e7fe      	b.n	80048aa <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80048ac:	4b07      	ldr	r3, [pc, #28]	; (80048cc <vTaskPlaceOnEventList+0x44>)
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	3318      	adds	r3, #24
 80048b2:	4619      	mov	r1, r3
 80048b4:	6878      	ldr	r0, [r7, #4]
 80048b6:	f7fe fe3c 	bl	8003532 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80048ba:	2101      	movs	r1, #1
 80048bc:	6838      	ldr	r0, [r7, #0]
 80048be:	f000 fb8b 	bl	8004fd8 <prvAddCurrentTaskToDelayedList>
}
 80048c2:	bf00      	nop
 80048c4:	3710      	adds	r7, #16
 80048c6:	46bd      	mov	sp, r7
 80048c8:	bd80      	pop	{r7, pc}
 80048ca:	bf00      	nop
 80048cc:	20000298 	.word	0x20000298

080048d0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b086      	sub	sp, #24
 80048d4:	af00      	add	r7, sp, #0
 80048d6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	68db      	ldr	r3, [r3, #12]
 80048de:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80048e0:	693b      	ldr	r3, [r7, #16]
 80048e2:	2b00      	cmp	r3, #0
 80048e4:	d109      	bne.n	80048fa <xTaskRemoveFromEventList+0x2a>
 80048e6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80048ea:	f383 8811 	msr	BASEPRI, r3
 80048ee:	f3bf 8f6f 	isb	sy
 80048f2:	f3bf 8f4f 	dsb	sy
 80048f6:	60fb      	str	r3, [r7, #12]
 80048f8:	e7fe      	b.n	80048f8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80048fa:	693b      	ldr	r3, [r7, #16]
 80048fc:	3318      	adds	r3, #24
 80048fe:	4618      	mov	r0, r3
 8004900:	f7fe fe50 	bl	80035a4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004904:	4b1d      	ldr	r3, [pc, #116]	; (800497c <xTaskRemoveFromEventList+0xac>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	2b00      	cmp	r3, #0
 800490a:	d11c      	bne.n	8004946 <xTaskRemoveFromEventList+0x76>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800490c:	693b      	ldr	r3, [r7, #16]
 800490e:	3304      	adds	r3, #4
 8004910:	4618      	mov	r0, r3
 8004912:	f7fe fe47 	bl	80035a4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8004916:	693b      	ldr	r3, [r7, #16]
 8004918:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800491a:	2201      	movs	r2, #1
 800491c:	409a      	lsls	r2, r3
 800491e:	4b18      	ldr	r3, [pc, #96]	; (8004980 <xTaskRemoveFromEventList+0xb0>)
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	4313      	orrs	r3, r2
 8004924:	4a16      	ldr	r2, [pc, #88]	; (8004980 <xTaskRemoveFromEventList+0xb0>)
 8004926:	6013      	str	r3, [r2, #0]
 8004928:	693b      	ldr	r3, [r7, #16]
 800492a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800492c:	4613      	mov	r3, r2
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	4413      	add	r3, r2
 8004932:	009b      	lsls	r3, r3, #2
 8004934:	4a13      	ldr	r2, [pc, #76]	; (8004984 <xTaskRemoveFromEventList+0xb4>)
 8004936:	441a      	add	r2, r3
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	3304      	adds	r3, #4
 800493c:	4619      	mov	r1, r3
 800493e:	4610      	mov	r0, r2
 8004940:	f7fe fdd3 	bl	80034ea <vListInsertEnd>
 8004944:	e005      	b.n	8004952 <xTaskRemoveFromEventList+0x82>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	3318      	adds	r3, #24
 800494a:	4619      	mov	r1, r3
 800494c:	480e      	ldr	r0, [pc, #56]	; (8004988 <xTaskRemoveFromEventList+0xb8>)
 800494e:	f7fe fdcc 	bl	80034ea <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8004952:	693b      	ldr	r3, [r7, #16]
 8004954:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004956:	4b0d      	ldr	r3, [pc, #52]	; (800498c <xTaskRemoveFromEventList+0xbc>)
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800495c:	429a      	cmp	r2, r3
 800495e:	d905      	bls.n	800496c <xTaskRemoveFromEventList+0x9c>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8004960:	2301      	movs	r3, #1
 8004962:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8004964:	4b0a      	ldr	r3, [pc, #40]	; (8004990 <xTaskRemoveFromEventList+0xc0>)
 8004966:	2201      	movs	r2, #1
 8004968:	601a      	str	r2, [r3, #0]
 800496a:	e001      	b.n	8004970 <xTaskRemoveFromEventList+0xa0>
	}
	else
	{
		xReturn = pdFALSE;
 800496c:	2300      	movs	r3, #0
 800496e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8004970:	697b      	ldr	r3, [r7, #20]
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}
 800497a:	bf00      	nop
 800497c:	200003c0 	.word	0x200003c0
 8004980:	200003a0 	.word	0x200003a0
 8004984:	2000029c 	.word	0x2000029c
 8004988:	20000358 	.word	0x20000358
 800498c:	20000298 	.word	0x20000298
 8004990:	200003ac 	.word	0x200003ac

08004994 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8004994:	b480      	push	{r7}
 8004996:	b083      	sub	sp, #12
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800499c:	4b06      	ldr	r3, [pc, #24]	; (80049b8 <vTaskInternalSetTimeOutState+0x24>)
 800499e:	681a      	ldr	r2, [r3, #0]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80049a4:	4b05      	ldr	r3, [pc, #20]	; (80049bc <vTaskInternalSetTimeOutState+0x28>)
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	605a      	str	r2, [r3, #4]
}
 80049ac:	bf00      	nop
 80049ae:	370c      	adds	r7, #12
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	200003b0 	.word	0x200003b0
 80049bc:	2000039c 	.word	0x2000039c

080049c0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80049c0:	b580      	push	{r7, lr}
 80049c2:	b088      	sub	sp, #32
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2b00      	cmp	r3, #0
 80049ce:	d109      	bne.n	80049e4 <xTaskCheckForTimeOut+0x24>
 80049d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049d4:	f383 8811 	msr	BASEPRI, r3
 80049d8:	f3bf 8f6f 	isb	sy
 80049dc:	f3bf 8f4f 	dsb	sy
 80049e0:	613b      	str	r3, [r7, #16]
 80049e2:	e7fe      	b.n	80049e2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 80049e4:	683b      	ldr	r3, [r7, #0]
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d109      	bne.n	80049fe <xTaskCheckForTimeOut+0x3e>
 80049ea:	f04f 0350 	mov.w	r3, #80	; 0x50
 80049ee:	f383 8811 	msr	BASEPRI, r3
 80049f2:	f3bf 8f6f 	isb	sy
 80049f6:	f3bf 8f4f 	dsb	sy
 80049fa:	60fb      	str	r3, [r7, #12]
 80049fc:	e7fe      	b.n	80049fc <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 80049fe:	f000 fc75 	bl	80052ec <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8004a02:	4b1d      	ldr	r3, [pc, #116]	; (8004a78 <xTaskCheckForTimeOut+0xb8>)
 8004a04:	681b      	ldr	r3, [r3, #0]
 8004a06:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	69ba      	ldr	r2, [r7, #24]
 8004a0e:	1ad3      	subs	r3, r2, r3
 8004a10:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004a1a:	d102      	bne.n	8004a22 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	61fb      	str	r3, [r7, #28]
 8004a20:	e023      	b.n	8004a6a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681a      	ldr	r2, [r3, #0]
 8004a26:	4b15      	ldr	r3, [pc, #84]	; (8004a7c <xTaskCheckForTimeOut+0xbc>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	429a      	cmp	r2, r3
 8004a2c:	d007      	beq.n	8004a3e <xTaskCheckForTimeOut+0x7e>
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	685b      	ldr	r3, [r3, #4]
 8004a32:	69ba      	ldr	r2, [r7, #24]
 8004a34:	429a      	cmp	r2, r3
 8004a36:	d302      	bcc.n	8004a3e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8004a38:	2301      	movs	r3, #1
 8004a3a:	61fb      	str	r3, [r7, #28]
 8004a3c:	e015      	b.n	8004a6a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8004a3e:	683b      	ldr	r3, [r7, #0]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	697a      	ldr	r2, [r7, #20]
 8004a44:	429a      	cmp	r2, r3
 8004a46:	d20b      	bcs.n	8004a60 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	681a      	ldr	r2, [r3, #0]
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	1ad2      	subs	r2, r2, r3
 8004a50:	683b      	ldr	r3, [r7, #0]
 8004a52:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8004a54:	6878      	ldr	r0, [r7, #4]
 8004a56:	f7ff ff9d 	bl	8004994 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8004a5a:	2300      	movs	r3, #0
 8004a5c:	61fb      	str	r3, [r7, #28]
 8004a5e:	e004      	b.n	8004a6a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	2200      	movs	r2, #0
 8004a64:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8004a66:	2301      	movs	r3, #1
 8004a68:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8004a6a:	f000 fc6d 	bl	8005348 <vPortExitCritical>

	return xReturn;
 8004a6e:	69fb      	ldr	r3, [r7, #28]
}
 8004a70:	4618      	mov	r0, r3
 8004a72:	3720      	adds	r7, #32
 8004a74:	46bd      	mov	sp, r7
 8004a76:	bd80      	pop	{r7, pc}
 8004a78:	2000039c 	.word	0x2000039c
 8004a7c:	200003b0 	.word	0x200003b0

08004a80 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8004a80:	b480      	push	{r7}
 8004a82:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8004a84:	4b03      	ldr	r3, [pc, #12]	; (8004a94 <vTaskMissedYield+0x14>)
 8004a86:	2201      	movs	r2, #1
 8004a88:	601a      	str	r2, [r3, #0]
}
 8004a8a:	bf00      	nop
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a92:	4770      	bx	lr
 8004a94:	200003ac 	.word	0x200003ac

08004a98 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8004aa0:	f000 f852 	bl	8004b48 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8004aa4:	4b06      	ldr	r3, [pc, #24]	; (8004ac0 <prvIdleTask+0x28>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d9f9      	bls.n	8004aa0 <prvIdleTask+0x8>
			{
				taskYIELD();
 8004aac:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <prvIdleTask+0x2c>)
 8004aae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8004ab2:	601a      	str	r2, [r3, #0]
 8004ab4:	f3bf 8f4f 	dsb	sy
 8004ab8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8004abc:	e7f0      	b.n	8004aa0 <prvIdleTask+0x8>
 8004abe:	bf00      	nop
 8004ac0:	2000029c 	.word	0x2000029c
 8004ac4:	e000ed04 	.word	0xe000ed04

08004ac8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ace:	2300      	movs	r3, #0
 8004ad0:	607b      	str	r3, [r7, #4]
 8004ad2:	e00c      	b.n	8004aee <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8004ad4:	687a      	ldr	r2, [r7, #4]
 8004ad6:	4613      	mov	r3, r2
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	4413      	add	r3, r2
 8004adc:	009b      	lsls	r3, r3, #2
 8004ade:	4a12      	ldr	r2, [pc, #72]	; (8004b28 <prvInitialiseTaskLists+0x60>)
 8004ae0:	4413      	add	r3, r2
 8004ae2:	4618      	mov	r0, r3
 8004ae4:	f7fe fcd4 	bl	8003490 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3301      	adds	r3, #1
 8004aec:	607b      	str	r3, [r7, #4]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	2b06      	cmp	r3, #6
 8004af2:	d9ef      	bls.n	8004ad4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8004af4:	480d      	ldr	r0, [pc, #52]	; (8004b2c <prvInitialiseTaskLists+0x64>)
 8004af6:	f7fe fccb 	bl	8003490 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8004afa:	480d      	ldr	r0, [pc, #52]	; (8004b30 <prvInitialiseTaskLists+0x68>)
 8004afc:	f7fe fcc8 	bl	8003490 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8004b00:	480c      	ldr	r0, [pc, #48]	; (8004b34 <prvInitialiseTaskLists+0x6c>)
 8004b02:	f7fe fcc5 	bl	8003490 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8004b06:	480c      	ldr	r0, [pc, #48]	; (8004b38 <prvInitialiseTaskLists+0x70>)
 8004b08:	f7fe fcc2 	bl	8003490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8004b0c:	480b      	ldr	r0, [pc, #44]	; (8004b3c <prvInitialiseTaskLists+0x74>)
 8004b0e:	f7fe fcbf 	bl	8003490 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8004b12:	4b0b      	ldr	r3, [pc, #44]	; (8004b40 <prvInitialiseTaskLists+0x78>)
 8004b14:	4a05      	ldr	r2, [pc, #20]	; (8004b2c <prvInitialiseTaskLists+0x64>)
 8004b16:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8004b18:	4b0a      	ldr	r3, [pc, #40]	; (8004b44 <prvInitialiseTaskLists+0x7c>)
 8004b1a:	4a05      	ldr	r2, [pc, #20]	; (8004b30 <prvInitialiseTaskLists+0x68>)
 8004b1c:	601a      	str	r2, [r3, #0]
}
 8004b1e:	bf00      	nop
 8004b20:	3708      	adds	r7, #8
 8004b22:	46bd      	mov	sp, r7
 8004b24:	bd80      	pop	{r7, pc}
 8004b26:	bf00      	nop
 8004b28:	2000029c 	.word	0x2000029c
 8004b2c:	20000328 	.word	0x20000328
 8004b30:	2000033c 	.word	0x2000033c
 8004b34:	20000358 	.word	0x20000358
 8004b38:	2000036c 	.word	0x2000036c
 8004b3c:	20000384 	.word	0x20000384
 8004b40:	20000350 	.word	0x20000350
 8004b44:	20000354 	.word	0x20000354

08004b48 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8004b48:	b580      	push	{r7, lr}
 8004b4a:	b082      	sub	sp, #8
 8004b4c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b4e:	e019      	b.n	8004b84 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8004b50:	f000 fbcc 	bl	80052ec <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004b54:	4b0f      	ldr	r3, [pc, #60]	; (8004b94 <prvCheckTasksWaitingTermination+0x4c>)
 8004b56:	68db      	ldr	r3, [r3, #12]
 8004b58:	68db      	ldr	r3, [r3, #12]
 8004b5a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	3304      	adds	r3, #4
 8004b60:	4618      	mov	r0, r3
 8004b62:	f7fe fd1f 	bl	80035a4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8004b66:	4b0c      	ldr	r3, [pc, #48]	; (8004b98 <prvCheckTasksWaitingTermination+0x50>)
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	3b01      	subs	r3, #1
 8004b6c:	4a0a      	ldr	r2, [pc, #40]	; (8004b98 <prvCheckTasksWaitingTermination+0x50>)
 8004b6e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8004b70:	4b0a      	ldr	r3, [pc, #40]	; (8004b9c <prvCheckTasksWaitingTermination+0x54>)
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	3b01      	subs	r3, #1
 8004b76:	4a09      	ldr	r2, [pc, #36]	; (8004b9c <prvCheckTasksWaitingTermination+0x54>)
 8004b78:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8004b7a:	f000 fbe5 	bl	8005348 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8004b7e:	6878      	ldr	r0, [r7, #4]
 8004b80:	f000 f80e 	bl	8004ba0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8004b84:	4b05      	ldr	r3, [pc, #20]	; (8004b9c <prvCheckTasksWaitingTermination+0x54>)
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d1e1      	bne.n	8004b50 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8004b8c:	bf00      	nop
 8004b8e:	3708      	adds	r7, #8
 8004b90:	46bd      	mov	sp, r7
 8004b92:	bd80      	pop	{r7, pc}
 8004b94:	2000036c 	.word	0x2000036c
 8004b98:	20000398 	.word	0x20000398
 8004b9c:	20000380 	.word	0x20000380

08004ba0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8004ba0:	b580      	push	{r7, lr}
 8004ba2:	b084      	sub	sp, #16
 8004ba4:	af00      	add	r7, sp, #0
 8004ba6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d108      	bne.n	8004bc4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bb6:	4618      	mov	r0, r3
 8004bb8:	f000 fd74 	bl	80056a4 <vPortFree>
				vPortFree( pxTCB );
 8004bbc:	6878      	ldr	r0, [r7, #4]
 8004bbe:	f000 fd71 	bl	80056a4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8004bc2:	e017      	b.n	8004bf4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bca:	2b01      	cmp	r3, #1
 8004bcc:	d103      	bne.n	8004bd6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 8004bce:	6878      	ldr	r0, [r7, #4]
 8004bd0:	f000 fd68 	bl	80056a4 <vPortFree>
	}
 8004bd4:	e00e      	b.n	8004bf4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004bdc:	2b02      	cmp	r3, #2
 8004bde:	d009      	beq.n	8004bf4 <prvDeleteTCB+0x54>
 8004be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004be4:	f383 8811 	msr	BASEPRI, r3
 8004be8:	f3bf 8f6f 	isb	sy
 8004bec:	f3bf 8f4f 	dsb	sy
 8004bf0:	60fb      	str	r3, [r7, #12]
 8004bf2:	e7fe      	b.n	8004bf2 <prvDeleteTCB+0x52>
	}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}

08004bfc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8004bfc:	b480      	push	{r7}
 8004bfe:	b083      	sub	sp, #12
 8004c00:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8004c02:	4b0c      	ldr	r3, [pc, #48]	; (8004c34 <prvResetNextTaskUnblockTime+0x38>)
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d104      	bne.n	8004c16 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8004c0c:	4b0a      	ldr	r3, [pc, #40]	; (8004c38 <prvResetNextTaskUnblockTime+0x3c>)
 8004c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8004c12:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8004c14:	e008      	b.n	8004c28 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8004c16:	4b07      	ldr	r3, [pc, #28]	; (8004c34 <prvResetNextTaskUnblockTime+0x38>)
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	68db      	ldr	r3, [r3, #12]
 8004c1c:	68db      	ldr	r3, [r3, #12]
 8004c1e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	685b      	ldr	r3, [r3, #4]
 8004c24:	4a04      	ldr	r2, [pc, #16]	; (8004c38 <prvResetNextTaskUnblockTime+0x3c>)
 8004c26:	6013      	str	r3, [r2, #0]
}
 8004c28:	bf00      	nop
 8004c2a:	370c      	adds	r7, #12
 8004c2c:	46bd      	mov	sp, r7
 8004c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c32:	4770      	bx	lr
 8004c34:	20000350 	.word	0x20000350
 8004c38:	200003b8 	.word	0x200003b8

08004c3c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8004c3c:	b480      	push	{r7}
 8004c3e:	b083      	sub	sp, #12
 8004c40:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8004c42:	4b0b      	ldr	r3, [pc, #44]	; (8004c70 <xTaskGetSchedulerState+0x34>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d102      	bne.n	8004c50 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	607b      	str	r3, [r7, #4]
 8004c4e:	e008      	b.n	8004c62 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8004c50:	4b08      	ldr	r3, [pc, #32]	; (8004c74 <xTaskGetSchedulerState+0x38>)
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d102      	bne.n	8004c5e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8004c58:	2302      	movs	r3, #2
 8004c5a:	607b      	str	r3, [r7, #4]
 8004c5c:	e001      	b.n	8004c62 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8004c5e:	2300      	movs	r3, #0
 8004c60:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8004c62:	687b      	ldr	r3, [r7, #4]
	}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr
 8004c70:	200003a4 	.word	0x200003a4
 8004c74:	200003c0 	.word	0x200003c0

08004c78 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8004c78:	b580      	push	{r7, lr}
 8004c7a:	b084      	sub	sp, #16
 8004c7c:	af00      	add	r7, sp, #0
 8004c7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8004c84:	2300      	movs	r3, #0
 8004c86:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d069      	beq.n	8004d62 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8004c8e:	68bb      	ldr	r3, [r7, #8]
 8004c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c92:	4b36      	ldr	r3, [pc, #216]	; (8004d6c <xTaskPriorityInherit+0xf4>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004c98:	429a      	cmp	r2, r3
 8004c9a:	d259      	bcs.n	8004d50 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004c9c:	68bb      	ldr	r3, [r7, #8]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	db06      	blt.n	8004cb2 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004ca4:	4b31      	ldr	r3, [pc, #196]	; (8004d6c <xTaskPriorityInherit+0xf4>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004caa:	f1c3 0207 	rsb	r2, r3, #7
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8004cb2:	68bb      	ldr	r3, [r7, #8]
 8004cb4:	6959      	ldr	r1, [r3, #20]
 8004cb6:	68bb      	ldr	r3, [r7, #8]
 8004cb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cba:	4613      	mov	r3, r2
 8004cbc:	009b      	lsls	r3, r3, #2
 8004cbe:	4413      	add	r3, r2
 8004cc0:	009b      	lsls	r3, r3, #2
 8004cc2:	4a2b      	ldr	r2, [pc, #172]	; (8004d70 <xTaskPriorityInherit+0xf8>)
 8004cc4:	4413      	add	r3, r2
 8004cc6:	4299      	cmp	r1, r3
 8004cc8:	d13a      	bne.n	8004d40 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004cca:	68bb      	ldr	r3, [r7, #8]
 8004ccc:	3304      	adds	r3, #4
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f7fe fc68 	bl	80035a4 <uxListRemove>
 8004cd4:	4603      	mov	r3, r0
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d115      	bne.n	8004d06 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004cde:	4924      	ldr	r1, [pc, #144]	; (8004d70 <xTaskPriorityInherit+0xf8>)
 8004ce0:	4613      	mov	r3, r2
 8004ce2:	009b      	lsls	r3, r3, #2
 8004ce4:	4413      	add	r3, r2
 8004ce6:	009b      	lsls	r3, r3, #2
 8004ce8:	440b      	add	r3, r1
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d10a      	bne.n	8004d06 <xTaskPriorityInherit+0x8e>
 8004cf0:	68bb      	ldr	r3, [r7, #8]
 8004cf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cf4:	2201      	movs	r2, #1
 8004cf6:	fa02 f303 	lsl.w	r3, r2, r3
 8004cfa:	43da      	mvns	r2, r3
 8004cfc:	4b1d      	ldr	r3, [pc, #116]	; (8004d74 <xTaskPriorityInherit+0xfc>)
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	4013      	ands	r3, r2
 8004d02:	4a1c      	ldr	r2, [pc, #112]	; (8004d74 <xTaskPriorityInherit+0xfc>)
 8004d04:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d06:	4b19      	ldr	r3, [pc, #100]	; (8004d6c <xTaskPriorityInherit+0xf4>)
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d0c:	68bb      	ldr	r3, [r7, #8]
 8004d0e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8004d10:	68bb      	ldr	r3, [r7, #8]
 8004d12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d14:	2201      	movs	r2, #1
 8004d16:	409a      	lsls	r2, r3
 8004d18:	4b16      	ldr	r3, [pc, #88]	; (8004d74 <xTaskPriorityInherit+0xfc>)
 8004d1a:	681b      	ldr	r3, [r3, #0]
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	4a15      	ldr	r2, [pc, #84]	; (8004d74 <xTaskPriorityInherit+0xfc>)
 8004d20:	6013      	str	r3, [r2, #0]
 8004d22:	68bb      	ldr	r3, [r7, #8]
 8004d24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d26:	4613      	mov	r3, r2
 8004d28:	009b      	lsls	r3, r3, #2
 8004d2a:	4413      	add	r3, r2
 8004d2c:	009b      	lsls	r3, r3, #2
 8004d2e:	4a10      	ldr	r2, [pc, #64]	; (8004d70 <xTaskPriorityInherit+0xf8>)
 8004d30:	441a      	add	r2, r3
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	3304      	adds	r3, #4
 8004d36:	4619      	mov	r1, r3
 8004d38:	4610      	mov	r0, r2
 8004d3a:	f7fe fbd6 	bl	80034ea <vListInsertEnd>
 8004d3e:	e004      	b.n	8004d4a <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8004d40:	4b0a      	ldr	r3, [pc, #40]	; (8004d6c <xTaskPriorityInherit+0xf4>)
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8004d4a:	2301      	movs	r3, #1
 8004d4c:	60fb      	str	r3, [r7, #12]
 8004d4e:	e008      	b.n	8004d62 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8004d50:	68bb      	ldr	r3, [r7, #8]
 8004d52:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d54:	4b05      	ldr	r3, [pc, #20]	; (8004d6c <xTaskPriorityInherit+0xf4>)
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d201      	bcs.n	8004d62 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8004d5e:	2301      	movs	r3, #1
 8004d60:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004d62:	68fb      	ldr	r3, [r7, #12]
	}
 8004d64:	4618      	mov	r0, r3
 8004d66:	3710      	adds	r7, #16
 8004d68:	46bd      	mov	sp, r7
 8004d6a:	bd80      	pop	{r7, pc}
 8004d6c:	20000298 	.word	0x20000298
 8004d70:	2000029c 	.word	0x2000029c
 8004d74:	200003a0 	.word	0x200003a0

08004d78 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b086      	sub	sp, #24
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8004d84:	2300      	movs	r3, #0
 8004d86:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d06c      	beq.n	8004e68 <xTaskPriorityDisinherit+0xf0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8004d8e:	4b39      	ldr	r3, [pc, #228]	; (8004e74 <xTaskPriorityDisinherit+0xfc>)
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	693a      	ldr	r2, [r7, #16]
 8004d94:	429a      	cmp	r2, r3
 8004d96:	d009      	beq.n	8004dac <xTaskPriorityDisinherit+0x34>
 8004d98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004d9c:	f383 8811 	msr	BASEPRI, r3
 8004da0:	f3bf 8f6f 	isb	sy
 8004da4:	f3bf 8f4f 	dsb	sy
 8004da8:	60fb      	str	r3, [r7, #12]
 8004daa:	e7fe      	b.n	8004daa <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 8004dac:	693b      	ldr	r3, [r7, #16]
 8004dae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d109      	bne.n	8004dc8 <xTaskPriorityDisinherit+0x50>
 8004db4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004db8:	f383 8811 	msr	BASEPRI, r3
 8004dbc:	f3bf 8f6f 	isb	sy
 8004dc0:	f3bf 8f4f 	dsb	sy
 8004dc4:	60bb      	str	r3, [r7, #8]
 8004dc6:	e7fe      	b.n	8004dc6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004dcc:	1e5a      	subs	r2, r3, #1
 8004dce:	693b      	ldr	r3, [r7, #16]
 8004dd0:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dd6:	693b      	ldr	r3, [r7, #16]
 8004dd8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004dda:	429a      	cmp	r2, r3
 8004ddc:	d044      	beq.n	8004e68 <xTaskPriorityDisinherit+0xf0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8004dde:	693b      	ldr	r3, [r7, #16]
 8004de0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d140      	bne.n	8004e68 <xTaskPriorityDisinherit+0xf0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004de6:	693b      	ldr	r3, [r7, #16]
 8004de8:	3304      	adds	r3, #4
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fe fbda 	bl	80035a4 <uxListRemove>
 8004df0:	4603      	mov	r3, r0
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d115      	bne.n	8004e22 <xTaskPriorityDisinherit+0xaa>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004dfa:	491f      	ldr	r1, [pc, #124]	; (8004e78 <xTaskPriorityDisinherit+0x100>)
 8004dfc:	4613      	mov	r3, r2
 8004dfe:	009b      	lsls	r3, r3, #2
 8004e00:	4413      	add	r3, r2
 8004e02:	009b      	lsls	r3, r3, #2
 8004e04:	440b      	add	r3, r1
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d10a      	bne.n	8004e22 <xTaskPriorityDisinherit+0xaa>
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	2201      	movs	r2, #1
 8004e12:	fa02 f303 	lsl.w	r3, r2, r3
 8004e16:	43da      	mvns	r2, r3
 8004e18:	4b18      	ldr	r3, [pc, #96]	; (8004e7c <xTaskPriorityDisinherit+0x104>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	4013      	ands	r3, r2
 8004e1e:	4a17      	ldr	r2, [pc, #92]	; (8004e7c <xTaskPriorityDisinherit+0x104>)
 8004e20:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8004e22:	693b      	ldr	r3, [r7, #16]
 8004e24:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004e2a:	693b      	ldr	r3, [r7, #16]
 8004e2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e2e:	f1c3 0207 	rsb	r2, r3, #7
 8004e32:	693b      	ldr	r3, [r7, #16]
 8004e34:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8004e36:	693b      	ldr	r3, [r7, #16]
 8004e38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3a:	2201      	movs	r2, #1
 8004e3c:	409a      	lsls	r2, r3
 8004e3e:	4b0f      	ldr	r3, [pc, #60]	; (8004e7c <xTaskPriorityDisinherit+0x104>)
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4313      	orrs	r3, r2
 8004e44:	4a0d      	ldr	r2, [pc, #52]	; (8004e7c <xTaskPriorityDisinherit+0x104>)
 8004e46:	6013      	str	r3, [r2, #0]
 8004e48:	693b      	ldr	r3, [r7, #16]
 8004e4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	009b      	lsls	r3, r3, #2
 8004e50:	4413      	add	r3, r2
 8004e52:	009b      	lsls	r3, r3, #2
 8004e54:	4a08      	ldr	r2, [pc, #32]	; (8004e78 <xTaskPriorityDisinherit+0x100>)
 8004e56:	441a      	add	r2, r3
 8004e58:	693b      	ldr	r3, [r7, #16]
 8004e5a:	3304      	adds	r3, #4
 8004e5c:	4619      	mov	r1, r3
 8004e5e:	4610      	mov	r0, r2
 8004e60:	f7fe fb43 	bl	80034ea <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8004e64:	2301      	movs	r3, #1
 8004e66:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8004e68:	697b      	ldr	r3, [r7, #20]
	}
 8004e6a:	4618      	mov	r0, r3
 8004e6c:	3718      	adds	r7, #24
 8004e6e:	46bd      	mov	sp, r7
 8004e70:	bd80      	pop	{r7, pc}
 8004e72:	bf00      	nop
 8004e74:	20000298 	.word	0x20000298
 8004e78:	2000029c 	.word	0x2000029c
 8004e7c:	200003a0 	.word	0x200003a0

08004e80 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8004e80:	b580      	push	{r7, lr}
 8004e82:	b088      	sub	sp, #32
 8004e84:	af00      	add	r7, sp, #0
 8004e86:	6078      	str	r0, [r7, #4]
 8004e88:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8004e8e:	2301      	movs	r3, #1
 8004e90:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 8081 	beq.w	8004f9c <vTaskPriorityDisinheritAfterTimeout+0x11c>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8004e9a:	69bb      	ldr	r3, [r7, #24]
 8004e9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d109      	bne.n	8004eb6 <vTaskPriorityDisinheritAfterTimeout+0x36>
 8004ea2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004ea6:	f383 8811 	msr	BASEPRI, r3
 8004eaa:	f3bf 8f6f 	isb	sy
 8004eae:	f3bf 8f4f 	dsb	sy
 8004eb2:	60fb      	str	r3, [r7, #12]
 8004eb4:	e7fe      	b.n	8004eb4 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eba:	683a      	ldr	r2, [r7, #0]
 8004ebc:	429a      	cmp	r2, r3
 8004ebe:	d902      	bls.n	8004ec6 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	61fb      	str	r3, [r7, #28]
 8004ec4:	e002      	b.n	8004ecc <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eca:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8004ecc:	69bb      	ldr	r3, [r7, #24]
 8004ece:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004ed0:	69fa      	ldr	r2, [r7, #28]
 8004ed2:	429a      	cmp	r2, r3
 8004ed4:	d062      	beq.n	8004f9c <vTaskPriorityDisinheritAfterTimeout+0x11c>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004eda:	697a      	ldr	r2, [r7, #20]
 8004edc:	429a      	cmp	r2, r3
 8004ede:	d15d      	bne.n	8004f9c <vTaskPriorityDisinheritAfterTimeout+0x11c>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8004ee0:	4b30      	ldr	r3, [pc, #192]	; (8004fa4 <vTaskPriorityDisinheritAfterTimeout+0x124>)
 8004ee2:	681b      	ldr	r3, [r3, #0]
 8004ee4:	69ba      	ldr	r2, [r7, #24]
 8004ee6:	429a      	cmp	r2, r3
 8004ee8:	d109      	bne.n	8004efe <vTaskPriorityDisinheritAfterTimeout+0x7e>
 8004eea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8004eee:	f383 8811 	msr	BASEPRI, r3
 8004ef2:	f3bf 8f6f 	isb	sy
 8004ef6:	f3bf 8f4f 	dsb	sy
 8004efa:	60bb      	str	r3, [r7, #8]
 8004efc:	e7fe      	b.n	8004efc <vTaskPriorityDisinheritAfterTimeout+0x7c>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8004efe:	69bb      	ldr	r3, [r7, #24]
 8004f00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f02:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8004f04:	69bb      	ldr	r3, [r7, #24]
 8004f06:	69fa      	ldr	r2, [r7, #28]
 8004f08:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8004f0a:	69bb      	ldr	r3, [r7, #24]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	db04      	blt.n	8004f1c <vTaskPriorityDisinheritAfterTimeout+0x9c>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004f12:	69fb      	ldr	r3, [r7, #28]
 8004f14:	f1c3 0207 	rsb	r2, r3, #7
 8004f18:	69bb      	ldr	r3, [r7, #24]
 8004f1a:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8004f1c:	69bb      	ldr	r3, [r7, #24]
 8004f1e:	6959      	ldr	r1, [r3, #20]
 8004f20:	693a      	ldr	r2, [r7, #16]
 8004f22:	4613      	mov	r3, r2
 8004f24:	009b      	lsls	r3, r3, #2
 8004f26:	4413      	add	r3, r2
 8004f28:	009b      	lsls	r3, r3, #2
 8004f2a:	4a1f      	ldr	r2, [pc, #124]	; (8004fa8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004f2c:	4413      	add	r3, r2
 8004f2e:	4299      	cmp	r1, r3
 8004f30:	d134      	bne.n	8004f9c <vTaskPriorityDisinheritAfterTimeout+0x11c>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004f32:	69bb      	ldr	r3, [r7, #24]
 8004f34:	3304      	adds	r3, #4
 8004f36:	4618      	mov	r0, r3
 8004f38:	f7fe fb34 	bl	80035a4 <uxListRemove>
 8004f3c:	4603      	mov	r3, r0
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d115      	bne.n	8004f6e <vTaskPriorityDisinheritAfterTimeout+0xee>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8004f42:	69bb      	ldr	r3, [r7, #24]
 8004f44:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f46:	4918      	ldr	r1, [pc, #96]	; (8004fa8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004f48:	4613      	mov	r3, r2
 8004f4a:	009b      	lsls	r3, r3, #2
 8004f4c:	4413      	add	r3, r2
 8004f4e:	009b      	lsls	r3, r3, #2
 8004f50:	440b      	add	r3, r1
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d10a      	bne.n	8004f6e <vTaskPriorityDisinheritAfterTimeout+0xee>
 8004f58:	69bb      	ldr	r3, [r7, #24]
 8004f5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f5c:	2201      	movs	r2, #1
 8004f5e:	fa02 f303 	lsl.w	r3, r2, r3
 8004f62:	43da      	mvns	r2, r3
 8004f64:	4b11      	ldr	r3, [pc, #68]	; (8004fac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4013      	ands	r3, r2
 8004f6a:	4a10      	ldr	r2, [pc, #64]	; (8004fac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004f6c:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8004f6e:	69bb      	ldr	r3, [r7, #24]
 8004f70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f72:	2201      	movs	r2, #1
 8004f74:	409a      	lsls	r2, r3
 8004f76:	4b0d      	ldr	r3, [pc, #52]	; (8004fac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	4313      	orrs	r3, r2
 8004f7c:	4a0b      	ldr	r2, [pc, #44]	; (8004fac <vTaskPriorityDisinheritAfterTimeout+0x12c>)
 8004f7e:	6013      	str	r3, [r2, #0]
 8004f80:	69bb      	ldr	r3, [r7, #24]
 8004f82:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004f84:	4613      	mov	r3, r2
 8004f86:	009b      	lsls	r3, r3, #2
 8004f88:	4413      	add	r3, r2
 8004f8a:	009b      	lsls	r3, r3, #2
 8004f8c:	4a06      	ldr	r2, [pc, #24]	; (8004fa8 <vTaskPriorityDisinheritAfterTimeout+0x128>)
 8004f8e:	441a      	add	r2, r3
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	3304      	adds	r3, #4
 8004f94:	4619      	mov	r1, r3
 8004f96:	4610      	mov	r0, r2
 8004f98:	f7fe faa7 	bl	80034ea <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8004f9c:	bf00      	nop
 8004f9e:	3720      	adds	r7, #32
 8004fa0:	46bd      	mov	sp, r7
 8004fa2:	bd80      	pop	{r7, pc}
 8004fa4:	20000298 	.word	0x20000298
 8004fa8:	2000029c 	.word	0x2000029c
 8004fac:	200003a0 	.word	0x200003a0

08004fb0 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8004fb0:	b480      	push	{r7}
 8004fb2:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8004fb4:	4b07      	ldr	r3, [pc, #28]	; (8004fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d004      	beq.n	8004fc6 <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8004fbc:	4b05      	ldr	r3, [pc, #20]	; (8004fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004fc2:	3201      	adds	r2, #1
 8004fc4:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 8004fc6:	4b03      	ldr	r3, [pc, #12]	; (8004fd4 <pvTaskIncrementMutexHeldCount+0x24>)
 8004fc8:	681b      	ldr	r3, [r3, #0]
	}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	46bd      	mov	sp, r7
 8004fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fd2:	4770      	bx	lr
 8004fd4:	20000298 	.word	0x20000298

08004fd8 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8004fd8:	b580      	push	{r7, lr}
 8004fda:	b084      	sub	sp, #16
 8004fdc:	af00      	add	r7, sp, #0
 8004fde:	6078      	str	r0, [r7, #4]
 8004fe0:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8004fe2:	4b29      	ldr	r3, [pc, #164]	; (8005088 <prvAddCurrentTaskToDelayedList+0xb0>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8004fe8:	4b28      	ldr	r3, [pc, #160]	; (800508c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	3304      	adds	r3, #4
 8004fee:	4618      	mov	r0, r3
 8004ff0:	f7fe fad8 	bl	80035a4 <uxListRemove>
 8004ff4:	4603      	mov	r3, r0
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d10b      	bne.n	8005012 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8004ffa:	4b24      	ldr	r3, [pc, #144]	; (800508c <prvAddCurrentTaskToDelayedList+0xb4>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005000:	2201      	movs	r2, #1
 8005002:	fa02 f303 	lsl.w	r3, r2, r3
 8005006:	43da      	mvns	r2, r3
 8005008:	4b21      	ldr	r3, [pc, #132]	; (8005090 <prvAddCurrentTaskToDelayedList+0xb8>)
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	4013      	ands	r3, r2
 800500e:	4a20      	ldr	r2, [pc, #128]	; (8005090 <prvAddCurrentTaskToDelayedList+0xb8>)
 8005010:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005018:	d10a      	bne.n	8005030 <prvAddCurrentTaskToDelayedList+0x58>
 800501a:	683b      	ldr	r3, [r7, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d007      	beq.n	8005030 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005020:	4b1a      	ldr	r3, [pc, #104]	; (800508c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	3304      	adds	r3, #4
 8005026:	4619      	mov	r1, r3
 8005028:	481a      	ldr	r0, [pc, #104]	; (8005094 <prvAddCurrentTaskToDelayedList+0xbc>)
 800502a:	f7fe fa5e 	bl	80034ea <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800502e:	e026      	b.n	800507e <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8005030:	68fa      	ldr	r2, [r7, #12]
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	4413      	add	r3, r2
 8005036:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8005038:	4b14      	ldr	r3, [pc, #80]	; (800508c <prvAddCurrentTaskToDelayedList+0xb4>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	68ba      	ldr	r2, [r7, #8]
 800503e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8005040:	68ba      	ldr	r2, [r7, #8]
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	429a      	cmp	r2, r3
 8005046:	d209      	bcs.n	800505c <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8005048:	4b13      	ldr	r3, [pc, #76]	; (8005098 <prvAddCurrentTaskToDelayedList+0xc0>)
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	4b0f      	ldr	r3, [pc, #60]	; (800508c <prvAddCurrentTaskToDelayedList+0xb4>)
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	3304      	adds	r3, #4
 8005052:	4619      	mov	r1, r3
 8005054:	4610      	mov	r0, r2
 8005056:	f7fe fa6c 	bl	8003532 <vListInsert>
}
 800505a:	e010      	b.n	800507e <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800505c:	4b0f      	ldr	r3, [pc, #60]	; (800509c <prvAddCurrentTaskToDelayedList+0xc4>)
 800505e:	681a      	ldr	r2, [r3, #0]
 8005060:	4b0a      	ldr	r3, [pc, #40]	; (800508c <prvAddCurrentTaskToDelayedList+0xb4>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	3304      	adds	r3, #4
 8005066:	4619      	mov	r1, r3
 8005068:	4610      	mov	r0, r2
 800506a:	f7fe fa62 	bl	8003532 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800506e:	4b0c      	ldr	r3, [pc, #48]	; (80050a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	68ba      	ldr	r2, [r7, #8]
 8005074:	429a      	cmp	r2, r3
 8005076:	d202      	bcs.n	800507e <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8005078:	4a09      	ldr	r2, [pc, #36]	; (80050a0 <prvAddCurrentTaskToDelayedList+0xc8>)
 800507a:	68bb      	ldr	r3, [r7, #8]
 800507c:	6013      	str	r3, [r2, #0]
}
 800507e:	bf00      	nop
 8005080:	3710      	adds	r7, #16
 8005082:	46bd      	mov	sp, r7
 8005084:	bd80      	pop	{r7, pc}
 8005086:	bf00      	nop
 8005088:	2000039c 	.word	0x2000039c
 800508c:	20000298 	.word	0x20000298
 8005090:	200003a0 	.word	0x200003a0
 8005094:	20000384 	.word	0x20000384
 8005098:	20000354 	.word	0x20000354
 800509c:	20000350 	.word	0x20000350
 80050a0:	200003b8 	.word	0x200003b8

080050a4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80050a4:	b480      	push	{r7}
 80050a6:	b085      	sub	sp, #20
 80050a8:	af00      	add	r7, sp, #0
 80050aa:	60f8      	str	r0, [r7, #12]
 80050ac:	60b9      	str	r1, [r7, #8]
 80050ae:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	3b04      	subs	r3, #4
 80050b4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 80050bc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	3b04      	subs	r3, #4
 80050c2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80050c4:	68bb      	ldr	r3, [r7, #8]
 80050c6:	f023 0201 	bic.w	r2, r3, #1
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	3b04      	subs	r3, #4
 80050d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80050d4:	4a0c      	ldr	r2, [pc, #48]	; (8005108 <pxPortInitialiseStack+0x64>)
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	3b14      	subs	r3, #20
 80050de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80050e0:	687a      	ldr	r2, [r7, #4]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	3b04      	subs	r3, #4
 80050ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f06f 0202 	mvn.w	r2, #2
 80050f2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	3b20      	subs	r3, #32
 80050f8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80050fa:	68fb      	ldr	r3, [r7, #12]
}
 80050fc:	4618      	mov	r0, r3
 80050fe:	3714      	adds	r7, #20
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr
 8005108:	0800510d 	.word	0x0800510d

0800510c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800510c:	b480      	push	{r7}
 800510e:	b085      	sub	sp, #20
 8005110:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8005112:	2300      	movs	r3, #0
 8005114:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8005116:	4b11      	ldr	r3, [pc, #68]	; (800515c <prvTaskExitError+0x50>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800511e:	d009      	beq.n	8005134 <prvTaskExitError+0x28>
 8005120:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005124:	f383 8811 	msr	BASEPRI, r3
 8005128:	f3bf 8f6f 	isb	sy
 800512c:	f3bf 8f4f 	dsb	sy
 8005130:	60fb      	str	r3, [r7, #12]
 8005132:	e7fe      	b.n	8005132 <prvTaskExitError+0x26>
 8005134:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8005146:	bf00      	nop
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d0fc      	beq.n	8005148 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800514e:	bf00      	nop
 8005150:	3714      	adds	r7, #20
 8005152:	46bd      	mov	sp, r7
 8005154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005158:	4770      	bx	lr
 800515a:	bf00      	nop
 800515c:	20000010 	.word	0x20000010

08005160 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8005160:	4b07      	ldr	r3, [pc, #28]	; (8005180 <pxCurrentTCBConst2>)
 8005162:	6819      	ldr	r1, [r3, #0]
 8005164:	6808      	ldr	r0, [r1, #0]
 8005166:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800516a:	f380 8809 	msr	PSP, r0
 800516e:	f3bf 8f6f 	isb	sy
 8005172:	f04f 0000 	mov.w	r0, #0
 8005176:	f380 8811 	msr	BASEPRI, r0
 800517a:	4770      	bx	lr
 800517c:	f3af 8000 	nop.w

08005180 <pxCurrentTCBConst2>:
 8005180:	20000298 	.word	0x20000298
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8005184:	bf00      	nop
 8005186:	bf00      	nop

08005188 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8005188:	4808      	ldr	r0, [pc, #32]	; (80051ac <prvPortStartFirstTask+0x24>)
 800518a:	6800      	ldr	r0, [r0, #0]
 800518c:	6800      	ldr	r0, [r0, #0]
 800518e:	f380 8808 	msr	MSP, r0
 8005192:	f04f 0000 	mov.w	r0, #0
 8005196:	f380 8814 	msr	CONTROL, r0
 800519a:	b662      	cpsie	i
 800519c:	b661      	cpsie	f
 800519e:	f3bf 8f4f 	dsb	sy
 80051a2:	f3bf 8f6f 	isb	sy
 80051a6:	df00      	svc	0
 80051a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80051aa:	bf00      	nop
 80051ac:	e000ed08 	.word	0xe000ed08

080051b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80051b0:	b580      	push	{r7, lr}
 80051b2:	b086      	sub	sp, #24
 80051b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80051b6:	4b44      	ldr	r3, [pc, #272]	; (80052c8 <xPortStartScheduler+0x118>)
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	4a44      	ldr	r2, [pc, #272]	; (80052cc <xPortStartScheduler+0x11c>)
 80051bc:	4293      	cmp	r3, r2
 80051be:	d109      	bne.n	80051d4 <xPortStartScheduler+0x24>
 80051c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051c4:	f383 8811 	msr	BASEPRI, r3
 80051c8:	f3bf 8f6f 	isb	sy
 80051cc:	f3bf 8f4f 	dsb	sy
 80051d0:	613b      	str	r3, [r7, #16]
 80051d2:	e7fe      	b.n	80051d2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80051d4:	4b3c      	ldr	r3, [pc, #240]	; (80052c8 <xPortStartScheduler+0x118>)
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	4a3d      	ldr	r2, [pc, #244]	; (80052d0 <xPortStartScheduler+0x120>)
 80051da:	4293      	cmp	r3, r2
 80051dc:	d109      	bne.n	80051f2 <xPortStartScheduler+0x42>
 80051de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80051e2:	f383 8811 	msr	BASEPRI, r3
 80051e6:	f3bf 8f6f 	isb	sy
 80051ea:	f3bf 8f4f 	dsb	sy
 80051ee:	60fb      	str	r3, [r7, #12]
 80051f0:	e7fe      	b.n	80051f0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80051f2:	4b38      	ldr	r3, [pc, #224]	; (80052d4 <xPortStartScheduler+0x124>)
 80051f4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80051f6:	697b      	ldr	r3, [r7, #20]
 80051f8:	781b      	ldrb	r3, [r3, #0]
 80051fa:	b2db      	uxtb	r3, r3
 80051fc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	22ff      	movs	r2, #255	; 0xff
 8005202:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	781b      	ldrb	r3, [r3, #0]
 8005208:	b2db      	uxtb	r3, r3
 800520a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800520c:	78fb      	ldrb	r3, [r7, #3]
 800520e:	b2db      	uxtb	r3, r3
 8005210:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8005214:	b2da      	uxtb	r2, r3
 8005216:	4b30      	ldr	r3, [pc, #192]	; (80052d8 <xPortStartScheduler+0x128>)
 8005218:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800521a:	4b30      	ldr	r3, [pc, #192]	; (80052dc <xPortStartScheduler+0x12c>)
 800521c:	2207      	movs	r2, #7
 800521e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005220:	e009      	b.n	8005236 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 8005222:	4b2e      	ldr	r3, [pc, #184]	; (80052dc <xPortStartScheduler+0x12c>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	3b01      	subs	r3, #1
 8005228:	4a2c      	ldr	r2, [pc, #176]	; (80052dc <xPortStartScheduler+0x12c>)
 800522a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800522c:	78fb      	ldrb	r3, [r7, #3]
 800522e:	b2db      	uxtb	r3, r3
 8005230:	005b      	lsls	r3, r3, #1
 8005232:	b2db      	uxtb	r3, r3
 8005234:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8005236:	78fb      	ldrb	r3, [r7, #3]
 8005238:	b2db      	uxtb	r3, r3
 800523a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800523e:	2b80      	cmp	r3, #128	; 0x80
 8005240:	d0ef      	beq.n	8005222 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8005242:	4b26      	ldr	r3, [pc, #152]	; (80052dc <xPortStartScheduler+0x12c>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	f1c3 0307 	rsb	r3, r3, #7
 800524a:	2b04      	cmp	r3, #4
 800524c:	d009      	beq.n	8005262 <xPortStartScheduler+0xb2>
 800524e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005252:	f383 8811 	msr	BASEPRI, r3
 8005256:	f3bf 8f6f 	isb	sy
 800525a:	f3bf 8f4f 	dsb	sy
 800525e:	60bb      	str	r3, [r7, #8]
 8005260:	e7fe      	b.n	8005260 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8005262:	4b1e      	ldr	r3, [pc, #120]	; (80052dc <xPortStartScheduler+0x12c>)
 8005264:	681b      	ldr	r3, [r3, #0]
 8005266:	021b      	lsls	r3, r3, #8
 8005268:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <xPortStartScheduler+0x12c>)
 800526a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800526c:	4b1b      	ldr	r3, [pc, #108]	; (80052dc <xPortStartScheduler+0x12c>)
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8005274:	4a19      	ldr	r2, [pc, #100]	; (80052dc <xPortStartScheduler+0x12c>)
 8005276:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	b2da      	uxtb	r2, r3
 800527c:	697b      	ldr	r3, [r7, #20]
 800527e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8005280:	4b17      	ldr	r3, [pc, #92]	; (80052e0 <xPortStartScheduler+0x130>)
 8005282:	681b      	ldr	r3, [r3, #0]
 8005284:	4a16      	ldr	r2, [pc, #88]	; (80052e0 <xPortStartScheduler+0x130>)
 8005286:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800528a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800528c:	4b14      	ldr	r3, [pc, #80]	; (80052e0 <xPortStartScheduler+0x130>)
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	4a13      	ldr	r2, [pc, #76]	; (80052e0 <xPortStartScheduler+0x130>)
 8005292:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8005296:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8005298:	f000 f8d6 	bl	8005448 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800529c:	4b11      	ldr	r3, [pc, #68]	; (80052e4 <xPortStartScheduler+0x134>)
 800529e:	2200      	movs	r2, #0
 80052a0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80052a2:	f000 f8f5 	bl	8005490 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80052a6:	4b10      	ldr	r3, [pc, #64]	; (80052e8 <xPortStartScheduler+0x138>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	4a0f      	ldr	r2, [pc, #60]	; (80052e8 <xPortStartScheduler+0x138>)
 80052ac:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80052b0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80052b2:	f7ff ff69 	bl	8005188 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80052b6:	f7ff fa8d 	bl	80047d4 <vTaskSwitchContext>
	prvTaskExitError();
 80052ba:	f7ff ff27 	bl	800510c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80052be:	2300      	movs	r3, #0
}
 80052c0:	4618      	mov	r0, r3
 80052c2:	3718      	adds	r7, #24
 80052c4:	46bd      	mov	sp, r7
 80052c6:	bd80      	pop	{r7, pc}
 80052c8:	e000ed00 	.word	0xe000ed00
 80052cc:	410fc271 	.word	0x410fc271
 80052d0:	410fc270 	.word	0x410fc270
 80052d4:	e000e400 	.word	0xe000e400
 80052d8:	200003c4 	.word	0x200003c4
 80052dc:	200003c8 	.word	0x200003c8
 80052e0:	e000ed20 	.word	0xe000ed20
 80052e4:	20000010 	.word	0x20000010
 80052e8:	e000ef34 	.word	0xe000ef34

080052ec <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80052ec:	b480      	push	{r7}
 80052ee:	b083      	sub	sp, #12
 80052f0:	af00      	add	r7, sp, #0
 80052f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80052f6:	f383 8811 	msr	BASEPRI, r3
 80052fa:	f3bf 8f6f 	isb	sy
 80052fe:	f3bf 8f4f 	dsb	sy
 8005302:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8005304:	4b0e      	ldr	r3, [pc, #56]	; (8005340 <vPortEnterCritical+0x54>)
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	3301      	adds	r3, #1
 800530a:	4a0d      	ldr	r2, [pc, #52]	; (8005340 <vPortEnterCritical+0x54>)
 800530c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800530e:	4b0c      	ldr	r3, [pc, #48]	; (8005340 <vPortEnterCritical+0x54>)
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	2b01      	cmp	r3, #1
 8005314:	d10e      	bne.n	8005334 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8005316:	4b0b      	ldr	r3, [pc, #44]	; (8005344 <vPortEnterCritical+0x58>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d009      	beq.n	8005334 <vPortEnterCritical+0x48>
 8005320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005324:	f383 8811 	msr	BASEPRI, r3
 8005328:	f3bf 8f6f 	isb	sy
 800532c:	f3bf 8f4f 	dsb	sy
 8005330:	603b      	str	r3, [r7, #0]
 8005332:	e7fe      	b.n	8005332 <vPortEnterCritical+0x46>
	}
}
 8005334:	bf00      	nop
 8005336:	370c      	adds	r7, #12
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr
 8005340:	20000010 	.word	0x20000010
 8005344:	e000ed04 	.word	0xe000ed04

08005348 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8005348:	b480      	push	{r7}
 800534a:	b083      	sub	sp, #12
 800534c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800534e:	4b11      	ldr	r3, [pc, #68]	; (8005394 <vPortExitCritical+0x4c>)
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d109      	bne.n	800536a <vPortExitCritical+0x22>
 8005356:	f04f 0350 	mov.w	r3, #80	; 0x50
 800535a:	f383 8811 	msr	BASEPRI, r3
 800535e:	f3bf 8f6f 	isb	sy
 8005362:	f3bf 8f4f 	dsb	sy
 8005366:	607b      	str	r3, [r7, #4]
 8005368:	e7fe      	b.n	8005368 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800536a:	4b0a      	ldr	r3, [pc, #40]	; (8005394 <vPortExitCritical+0x4c>)
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	3b01      	subs	r3, #1
 8005370:	4a08      	ldr	r2, [pc, #32]	; (8005394 <vPortExitCritical+0x4c>)
 8005372:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8005374:	4b07      	ldr	r3, [pc, #28]	; (8005394 <vPortExitCritical+0x4c>)
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d104      	bne.n	8005386 <vPortExitCritical+0x3e>
 800537c:	2300      	movs	r3, #0
 800537e:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005380:	683b      	ldr	r3, [r7, #0]
 8005382:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 8005386:	bf00      	nop
 8005388:	370c      	adds	r7, #12
 800538a:	46bd      	mov	sp, r7
 800538c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005390:	4770      	bx	lr
 8005392:	bf00      	nop
 8005394:	20000010 	.word	0x20000010
	...

080053a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80053a0:	f3ef 8009 	mrs	r0, PSP
 80053a4:	f3bf 8f6f 	isb	sy
 80053a8:	4b15      	ldr	r3, [pc, #84]	; (8005400 <pxCurrentTCBConst>)
 80053aa:	681a      	ldr	r2, [r3, #0]
 80053ac:	f01e 0f10 	tst.w	lr, #16
 80053b0:	bf08      	it	eq
 80053b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80053b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053ba:	6010      	str	r0, [r2, #0]
 80053bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80053c0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80053c4:	f380 8811 	msr	BASEPRI, r0
 80053c8:	f3bf 8f4f 	dsb	sy
 80053cc:	f3bf 8f6f 	isb	sy
 80053d0:	f7ff fa00 	bl	80047d4 <vTaskSwitchContext>
 80053d4:	f04f 0000 	mov.w	r0, #0
 80053d8:	f380 8811 	msr	BASEPRI, r0
 80053dc:	bc09      	pop	{r0, r3}
 80053de:	6819      	ldr	r1, [r3, #0]
 80053e0:	6808      	ldr	r0, [r1, #0]
 80053e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80053e6:	f01e 0f10 	tst.w	lr, #16
 80053ea:	bf08      	it	eq
 80053ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80053f0:	f380 8809 	msr	PSP, r0
 80053f4:	f3bf 8f6f 	isb	sy
 80053f8:	4770      	bx	lr
 80053fa:	bf00      	nop
 80053fc:	f3af 8000 	nop.w

08005400 <pxCurrentTCBConst>:
 8005400:	20000298 	.word	0x20000298
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8005404:	bf00      	nop
 8005406:	bf00      	nop

08005408 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8005408:	b580      	push	{r7, lr}
 800540a:	b082      	sub	sp, #8
 800540c:	af00      	add	r7, sp, #0
	__asm volatile
 800540e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005412:	f383 8811 	msr	BASEPRI, r3
 8005416:	f3bf 8f6f 	isb	sy
 800541a:	f3bf 8f4f 	dsb	sy
 800541e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8005420:	f7ff f920 	bl	8004664 <xTaskIncrementTick>
 8005424:	4603      	mov	r3, r0
 8005426:	2b00      	cmp	r3, #0
 8005428:	d003      	beq.n	8005432 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800542a:	4b06      	ldr	r3, [pc, #24]	; (8005444 <SysTick_Handler+0x3c>)
 800542c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005430:	601a      	str	r2, [r3, #0]
 8005432:	2300      	movs	r3, #0
 8005434:	603b      	str	r3, [r7, #0]
	__asm volatile
 8005436:	683b      	ldr	r3, [r7, #0]
 8005438:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800543c:	bf00      	nop
 800543e:	3708      	adds	r7, #8
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	e000ed04 	.word	0xe000ed04

08005448 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8005448:	b480      	push	{r7}
 800544a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800544c:	4b0b      	ldr	r3, [pc, #44]	; (800547c <vPortSetupTimerInterrupt+0x34>)
 800544e:	2200      	movs	r2, #0
 8005450:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8005452:	4b0b      	ldr	r3, [pc, #44]	; (8005480 <vPortSetupTimerInterrupt+0x38>)
 8005454:	2200      	movs	r2, #0
 8005456:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8005458:	4b0a      	ldr	r3, [pc, #40]	; (8005484 <vPortSetupTimerInterrupt+0x3c>)
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a0a      	ldr	r2, [pc, #40]	; (8005488 <vPortSetupTimerInterrupt+0x40>)
 800545e:	fba2 2303 	umull	r2, r3, r2, r3
 8005462:	099b      	lsrs	r3, r3, #6
 8005464:	4a09      	ldr	r2, [pc, #36]	; (800548c <vPortSetupTimerInterrupt+0x44>)
 8005466:	3b01      	subs	r3, #1
 8005468:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800546a:	4b04      	ldr	r3, [pc, #16]	; (800547c <vPortSetupTimerInterrupt+0x34>)
 800546c:	2207      	movs	r2, #7
 800546e:	601a      	str	r2, [r3, #0]
}
 8005470:	bf00      	nop
 8005472:	46bd      	mov	sp, r7
 8005474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005478:	4770      	bx	lr
 800547a:	bf00      	nop
 800547c:	e000e010 	.word	0xe000e010
 8005480:	e000e018 	.word	0xe000e018
 8005484:	20000004 	.word	0x20000004
 8005488:	10624dd3 	.word	0x10624dd3
 800548c:	e000e014 	.word	0xe000e014

08005490 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8005490:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80054a0 <vPortEnableVFP+0x10>
 8005494:	6801      	ldr	r1, [r0, #0]
 8005496:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800549a:	6001      	str	r1, [r0, #0]
 800549c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800549e:	bf00      	nop
 80054a0:	e000ed88 	.word	0xe000ed88

080054a4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80054a4:	b480      	push	{r7}
 80054a6:	b085      	sub	sp, #20
 80054a8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80054aa:	f3ef 8305 	mrs	r3, IPSR
 80054ae:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	2b0f      	cmp	r3, #15
 80054b4:	d913      	bls.n	80054de <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80054b6:	4a16      	ldr	r2, [pc, #88]	; (8005510 <vPortValidateInterruptPriority+0x6c>)
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	4413      	add	r3, r2
 80054bc:	781b      	ldrb	r3, [r3, #0]
 80054be:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80054c0:	4b14      	ldr	r3, [pc, #80]	; (8005514 <vPortValidateInterruptPriority+0x70>)
 80054c2:	781b      	ldrb	r3, [r3, #0]
 80054c4:	7afa      	ldrb	r2, [r7, #11]
 80054c6:	429a      	cmp	r2, r3
 80054c8:	d209      	bcs.n	80054de <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 80054ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054ce:	f383 8811 	msr	BASEPRI, r3
 80054d2:	f3bf 8f6f 	isb	sy
 80054d6:	f3bf 8f4f 	dsb	sy
 80054da:	607b      	str	r3, [r7, #4]
 80054dc:	e7fe      	b.n	80054dc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80054de:	4b0e      	ldr	r3, [pc, #56]	; (8005518 <vPortValidateInterruptPriority+0x74>)
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80054e6:	4b0d      	ldr	r3, [pc, #52]	; (800551c <vPortValidateInterruptPriority+0x78>)
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d909      	bls.n	8005502 <vPortValidateInterruptPriority+0x5e>
 80054ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054f2:	f383 8811 	msr	BASEPRI, r3
 80054f6:	f3bf 8f6f 	isb	sy
 80054fa:	f3bf 8f4f 	dsb	sy
 80054fe:	603b      	str	r3, [r7, #0]
 8005500:	e7fe      	b.n	8005500 <vPortValidateInterruptPriority+0x5c>
	}
 8005502:	bf00      	nop
 8005504:	3714      	adds	r7, #20
 8005506:	46bd      	mov	sp, r7
 8005508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800550c:	4770      	bx	lr
 800550e:	bf00      	nop
 8005510:	e000e3f0 	.word	0xe000e3f0
 8005514:	200003c4 	.word	0x200003c4
 8005518:	e000ed0c 	.word	0xe000ed0c
 800551c:	200003c8 	.word	0x200003c8

08005520 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b08a      	sub	sp, #40	; 0x28
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8005528:	2300      	movs	r3, #0
 800552a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800552c:	f7fe fff0 	bl	8004510 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8005530:	4b57      	ldr	r3, [pc, #348]	; (8005690 <pvPortMalloc+0x170>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	2b00      	cmp	r3, #0
 8005536:	d101      	bne.n	800553c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8005538:	f000 f90c 	bl	8005754 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800553c:	4b55      	ldr	r3, [pc, #340]	; (8005694 <pvPortMalloc+0x174>)
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	4013      	ands	r3, r2
 8005544:	2b00      	cmp	r3, #0
 8005546:	f040 808c 	bne.w	8005662 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d01c      	beq.n	800558a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 8005550:	2208      	movs	r2, #8
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	4413      	add	r3, r2
 8005556:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f003 0307 	and.w	r3, r3, #7
 800555e:	2b00      	cmp	r3, #0
 8005560:	d013      	beq.n	800558a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	f023 0307 	bic.w	r3, r3, #7
 8005568:	3308      	adds	r3, #8
 800556a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	2b00      	cmp	r3, #0
 8005574:	d009      	beq.n	800558a <pvPortMalloc+0x6a>
 8005576:	f04f 0350 	mov.w	r3, #80	; 0x50
 800557a:	f383 8811 	msr	BASEPRI, r3
 800557e:	f3bf 8f6f 	isb	sy
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	617b      	str	r3, [r7, #20]
 8005588:	e7fe      	b.n	8005588 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	2b00      	cmp	r3, #0
 800558e:	d068      	beq.n	8005662 <pvPortMalloc+0x142>
 8005590:	4b41      	ldr	r3, [pc, #260]	; (8005698 <pvPortMalloc+0x178>)
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	687a      	ldr	r2, [r7, #4]
 8005596:	429a      	cmp	r2, r3
 8005598:	d863      	bhi.n	8005662 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800559a:	4b40      	ldr	r3, [pc, #256]	; (800569c <pvPortMalloc+0x17c>)
 800559c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800559e:	4b3f      	ldr	r3, [pc, #252]	; (800569c <pvPortMalloc+0x17c>)
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055a4:	e004      	b.n	80055b0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 80055a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055a8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80055b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b2:	685b      	ldr	r3, [r3, #4]
 80055b4:	687a      	ldr	r2, [r7, #4]
 80055b6:	429a      	cmp	r2, r3
 80055b8:	d903      	bls.n	80055c2 <pvPortMalloc+0xa2>
 80055ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d1f1      	bne.n	80055a6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80055c2:	4b33      	ldr	r3, [pc, #204]	; (8005690 <pvPortMalloc+0x170>)
 80055c4:	681b      	ldr	r3, [r3, #0]
 80055c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055c8:	429a      	cmp	r2, r3
 80055ca:	d04a      	beq.n	8005662 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80055cc:	6a3b      	ldr	r3, [r7, #32]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	2208      	movs	r2, #8
 80055d2:	4413      	add	r3, r2
 80055d4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80055d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055d8:	681a      	ldr	r2, [r3, #0]
 80055da:	6a3b      	ldr	r3, [r7, #32]
 80055dc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80055de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055e0:	685a      	ldr	r2, [r3, #4]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	1ad2      	subs	r2, r2, r3
 80055e6:	2308      	movs	r3, #8
 80055e8:	005b      	lsls	r3, r3, #1
 80055ea:	429a      	cmp	r2, r3
 80055ec:	d91e      	bls.n	800562c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80055ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	4413      	add	r3, r2
 80055f4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80055f6:	69bb      	ldr	r3, [r7, #24]
 80055f8:	f003 0307 	and.w	r3, r3, #7
 80055fc:	2b00      	cmp	r3, #0
 80055fe:	d009      	beq.n	8005614 <pvPortMalloc+0xf4>
 8005600:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005604:	f383 8811 	msr	BASEPRI, r3
 8005608:	f3bf 8f6f 	isb	sy
 800560c:	f3bf 8f4f 	dsb	sy
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	e7fe      	b.n	8005612 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8005614:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	1ad2      	subs	r2, r2, r3
 800561c:	69bb      	ldr	r3, [r7, #24]
 800561e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8005620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005622:	687a      	ldr	r2, [r7, #4]
 8005624:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8005626:	69b8      	ldr	r0, [r7, #24]
 8005628:	f000 f8f6 	bl	8005818 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800562c:	4b1a      	ldr	r3, [pc, #104]	; (8005698 <pvPortMalloc+0x178>)
 800562e:	681a      	ldr	r2, [r3, #0]
 8005630:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005632:	685b      	ldr	r3, [r3, #4]
 8005634:	1ad3      	subs	r3, r2, r3
 8005636:	4a18      	ldr	r2, [pc, #96]	; (8005698 <pvPortMalloc+0x178>)
 8005638:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800563a:	4b17      	ldr	r3, [pc, #92]	; (8005698 <pvPortMalloc+0x178>)
 800563c:	681a      	ldr	r2, [r3, #0]
 800563e:	4b18      	ldr	r3, [pc, #96]	; (80056a0 <pvPortMalloc+0x180>)
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	429a      	cmp	r2, r3
 8005644:	d203      	bcs.n	800564e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8005646:	4b14      	ldr	r3, [pc, #80]	; (8005698 <pvPortMalloc+0x178>)
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	4a15      	ldr	r2, [pc, #84]	; (80056a0 <pvPortMalloc+0x180>)
 800564c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800564e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005650:	685a      	ldr	r2, [r3, #4]
 8005652:	4b10      	ldr	r3, [pc, #64]	; (8005694 <pvPortMalloc+0x174>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	431a      	orrs	r2, r3
 8005658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800565c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800565e:	2200      	movs	r2, #0
 8005660:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8005662:	f7fe ff63 	bl	800452c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8005666:	69fb      	ldr	r3, [r7, #28]
 8005668:	f003 0307 	and.w	r3, r3, #7
 800566c:	2b00      	cmp	r3, #0
 800566e:	d009      	beq.n	8005684 <pvPortMalloc+0x164>
 8005670:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005674:	f383 8811 	msr	BASEPRI, r3
 8005678:	f3bf 8f6f 	isb	sy
 800567c:	f3bf 8f4f 	dsb	sy
 8005680:	60fb      	str	r3, [r7, #12]
 8005682:	e7fe      	b.n	8005682 <pvPortMalloc+0x162>
	return pvReturn;
 8005684:	69fb      	ldr	r3, [r7, #28]
}
 8005686:	4618      	mov	r0, r3
 8005688:	3728      	adds	r7, #40	; 0x28
 800568a:	46bd      	mov	sp, r7
 800568c:	bd80      	pop	{r7, pc}
 800568e:	bf00      	nop
 8005690:	20003fd4 	.word	0x20003fd4
 8005694:	20003fe0 	.word	0x20003fe0
 8005698:	20003fd8 	.word	0x20003fd8
 800569c:	20003fcc 	.word	0x20003fcc
 80056a0:	20003fdc 	.word	0x20003fdc

080056a4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80056a4:	b580      	push	{r7, lr}
 80056a6:	b086      	sub	sp, #24
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d046      	beq.n	8005744 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80056b6:	2308      	movs	r3, #8
 80056b8:	425b      	negs	r3, r3
 80056ba:	697a      	ldr	r2, [r7, #20]
 80056bc:	4413      	add	r3, r2
 80056be:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80056c0:	697b      	ldr	r3, [r7, #20]
 80056c2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80056c4:	693b      	ldr	r3, [r7, #16]
 80056c6:	685a      	ldr	r2, [r3, #4]
 80056c8:	4b20      	ldr	r3, [pc, #128]	; (800574c <vPortFree+0xa8>)
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	4013      	ands	r3, r2
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	d109      	bne.n	80056e6 <vPortFree+0x42>
 80056d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056d6:	f383 8811 	msr	BASEPRI, r3
 80056da:	f3bf 8f6f 	isb	sy
 80056de:	f3bf 8f4f 	dsb	sy
 80056e2:	60fb      	str	r3, [r7, #12]
 80056e4:	e7fe      	b.n	80056e4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d009      	beq.n	8005702 <vPortFree+0x5e>
 80056ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056f2:	f383 8811 	msr	BASEPRI, r3
 80056f6:	f3bf 8f6f 	isb	sy
 80056fa:	f3bf 8f4f 	dsb	sy
 80056fe:	60bb      	str	r3, [r7, #8]
 8005700:	e7fe      	b.n	8005700 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8005702:	693b      	ldr	r3, [r7, #16]
 8005704:	685a      	ldr	r2, [r3, #4]
 8005706:	4b11      	ldr	r3, [pc, #68]	; (800574c <vPortFree+0xa8>)
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	4013      	ands	r3, r2
 800570c:	2b00      	cmp	r3, #0
 800570e:	d019      	beq.n	8005744 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8005710:	693b      	ldr	r3, [r7, #16]
 8005712:	681b      	ldr	r3, [r3, #0]
 8005714:	2b00      	cmp	r3, #0
 8005716:	d115      	bne.n	8005744 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	685a      	ldr	r2, [r3, #4]
 800571c:	4b0b      	ldr	r3, [pc, #44]	; (800574c <vPortFree+0xa8>)
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	43db      	mvns	r3, r3
 8005722:	401a      	ands	r2, r3
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8005728:	f7fe fef2 	bl	8004510 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800572c:	693b      	ldr	r3, [r7, #16]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	4b07      	ldr	r3, [pc, #28]	; (8005750 <vPortFree+0xac>)
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	4413      	add	r3, r2
 8005736:	4a06      	ldr	r2, [pc, #24]	; (8005750 <vPortFree+0xac>)
 8005738:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800573a:	6938      	ldr	r0, [r7, #16]
 800573c:	f000 f86c 	bl	8005818 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8005740:	f7fe fef4 	bl	800452c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8005744:	bf00      	nop
 8005746:	3718      	adds	r7, #24
 8005748:	46bd      	mov	sp, r7
 800574a:	bd80      	pop	{r7, pc}
 800574c:	20003fe0 	.word	0x20003fe0
 8005750:	20003fd8 	.word	0x20003fd8

08005754 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800575a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800575e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8005760:	4b27      	ldr	r3, [pc, #156]	; (8005800 <prvHeapInit+0xac>)
 8005762:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f003 0307 	and.w	r3, r3, #7
 800576a:	2b00      	cmp	r3, #0
 800576c:	d00c      	beq.n	8005788 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	3307      	adds	r3, #7
 8005772:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	f023 0307 	bic.w	r3, r3, #7
 800577a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800577c:	68ba      	ldr	r2, [r7, #8]
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	1ad3      	subs	r3, r2, r3
 8005782:	4a1f      	ldr	r2, [pc, #124]	; (8005800 <prvHeapInit+0xac>)
 8005784:	4413      	add	r3, r2
 8005786:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800578c:	4a1d      	ldr	r2, [pc, #116]	; (8005804 <prvHeapInit+0xb0>)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8005792:	4b1c      	ldr	r3, [pc, #112]	; (8005804 <prvHeapInit+0xb0>)
 8005794:	2200      	movs	r2, #0
 8005796:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	68ba      	ldr	r2, [r7, #8]
 800579c:	4413      	add	r3, r2
 800579e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80057a0:	2208      	movs	r2, #8
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	1a9b      	subs	r3, r3, r2
 80057a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	f023 0307 	bic.w	r3, r3, #7
 80057ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	4a15      	ldr	r2, [pc, #84]	; (8005808 <prvHeapInit+0xb4>)
 80057b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80057b6:	4b14      	ldr	r3, [pc, #80]	; (8005808 <prvHeapInit+0xb4>)
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	2200      	movs	r2, #0
 80057bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80057be:	4b12      	ldr	r3, [pc, #72]	; (8005808 <prvHeapInit+0xb4>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	2200      	movs	r2, #0
 80057c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	68fa      	ldr	r2, [r7, #12]
 80057ce:	1ad2      	subs	r2, r2, r3
 80057d0:	683b      	ldr	r3, [r7, #0]
 80057d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80057d4:	4b0c      	ldr	r3, [pc, #48]	; (8005808 <prvHeapInit+0xb4>)
 80057d6:	681a      	ldr	r2, [r3, #0]
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	685b      	ldr	r3, [r3, #4]
 80057e0:	4a0a      	ldr	r2, [pc, #40]	; (800580c <prvHeapInit+0xb8>)
 80057e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	685b      	ldr	r3, [r3, #4]
 80057e8:	4a09      	ldr	r2, [pc, #36]	; (8005810 <prvHeapInit+0xbc>)
 80057ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80057ec:	4b09      	ldr	r3, [pc, #36]	; (8005814 <prvHeapInit+0xc0>)
 80057ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80057f2:	601a      	str	r2, [r3, #0]
}
 80057f4:	bf00      	nop
 80057f6:	3714      	adds	r7, #20
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr
 8005800:	200003cc 	.word	0x200003cc
 8005804:	20003fcc 	.word	0x20003fcc
 8005808:	20003fd4 	.word	0x20003fd4
 800580c:	20003fdc 	.word	0x20003fdc
 8005810:	20003fd8 	.word	0x20003fd8
 8005814:	20003fe0 	.word	0x20003fe0

08005818 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8005818:	b480      	push	{r7}
 800581a:	b085      	sub	sp, #20
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8005820:	4b28      	ldr	r3, [pc, #160]	; (80058c4 <prvInsertBlockIntoFreeList+0xac>)
 8005822:	60fb      	str	r3, [r7, #12]
 8005824:	e002      	b.n	800582c <prvInsertBlockIntoFreeList+0x14>
 8005826:	68fb      	ldr	r3, [r7, #12]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	60fb      	str	r3, [r7, #12]
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	687a      	ldr	r2, [r7, #4]
 8005832:	429a      	cmp	r2, r3
 8005834:	d8f7      	bhi.n	8005826 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8005836:	68fb      	ldr	r3, [r7, #12]
 8005838:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	685b      	ldr	r3, [r3, #4]
 800583e:	68ba      	ldr	r2, [r7, #8]
 8005840:	4413      	add	r3, r2
 8005842:	687a      	ldr	r2, [r7, #4]
 8005844:	429a      	cmp	r2, r3
 8005846:	d108      	bne.n	800585a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8005848:	68fb      	ldr	r3, [r7, #12]
 800584a:	685a      	ldr	r2, [r3, #4]
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	685b      	ldr	r3, [r3, #4]
 8005850:	441a      	add	r2, r3
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	685b      	ldr	r3, [r3, #4]
 8005862:	68ba      	ldr	r2, [r7, #8]
 8005864:	441a      	add	r2, r3
 8005866:	68fb      	ldr	r3, [r7, #12]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	429a      	cmp	r2, r3
 800586c:	d118      	bne.n	80058a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	681a      	ldr	r2, [r3, #0]
 8005872:	4b15      	ldr	r3, [pc, #84]	; (80058c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	429a      	cmp	r2, r3
 8005878:	d00d      	beq.n	8005896 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	685a      	ldr	r2, [r3, #4]
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	681b      	ldr	r3, [r3, #0]
 8005882:	685b      	ldr	r3, [r3, #4]
 8005884:	441a      	add	r2, r3
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	601a      	str	r2, [r3, #0]
 8005894:	e008      	b.n	80058a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8005896:	4b0c      	ldr	r3, [pc, #48]	; (80058c8 <prvInsertBlockIntoFreeList+0xb0>)
 8005898:	681a      	ldr	r2, [r3, #0]
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	601a      	str	r2, [r3, #0]
 800589e:	e003      	b.n	80058a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681a      	ldr	r2, [r3, #0]
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80058a8:	68fa      	ldr	r2, [r7, #12]
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	429a      	cmp	r2, r3
 80058ae:	d002      	beq.n	80058b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	687a      	ldr	r2, [r7, #4]
 80058b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80058b6:	bf00      	nop
 80058b8:	3714      	adds	r7, #20
 80058ba:	46bd      	mov	sp, r7
 80058bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058c0:	4770      	bx	lr
 80058c2:	bf00      	nop
 80058c4:	20003fcc 	.word	0x20003fcc
 80058c8:	20003fd4 	.word	0x20003fd4

080058cc <__libc_init_array>:
 80058cc:	b570      	push	{r4, r5, r6, lr}
 80058ce:	4e0d      	ldr	r6, [pc, #52]	; (8005904 <__libc_init_array+0x38>)
 80058d0:	4c0d      	ldr	r4, [pc, #52]	; (8005908 <__libc_init_array+0x3c>)
 80058d2:	1ba4      	subs	r4, r4, r6
 80058d4:	10a4      	asrs	r4, r4, #2
 80058d6:	2500      	movs	r5, #0
 80058d8:	42a5      	cmp	r5, r4
 80058da:	d109      	bne.n	80058f0 <__libc_init_array+0x24>
 80058dc:	4e0b      	ldr	r6, [pc, #44]	; (800590c <__libc_init_array+0x40>)
 80058de:	4c0c      	ldr	r4, [pc, #48]	; (8005910 <__libc_init_array+0x44>)
 80058e0:	f000 f82c 	bl	800593c <_init>
 80058e4:	1ba4      	subs	r4, r4, r6
 80058e6:	10a4      	asrs	r4, r4, #2
 80058e8:	2500      	movs	r5, #0
 80058ea:	42a5      	cmp	r5, r4
 80058ec:	d105      	bne.n	80058fa <__libc_init_array+0x2e>
 80058ee:	bd70      	pop	{r4, r5, r6, pc}
 80058f0:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058f4:	4798      	blx	r3
 80058f6:	3501      	adds	r5, #1
 80058f8:	e7ee      	b.n	80058d8 <__libc_init_array+0xc>
 80058fa:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 80058fe:	4798      	blx	r3
 8005900:	3501      	adds	r5, #1
 8005902:	e7f2      	b.n	80058ea <__libc_init_array+0x1e>
 8005904:	080059cc 	.word	0x080059cc
 8005908:	080059cc 	.word	0x080059cc
 800590c:	080059cc 	.word	0x080059cc
 8005910:	080059d0 	.word	0x080059d0

08005914 <memcpy>:
 8005914:	b510      	push	{r4, lr}
 8005916:	1e43      	subs	r3, r0, #1
 8005918:	440a      	add	r2, r1
 800591a:	4291      	cmp	r1, r2
 800591c:	d100      	bne.n	8005920 <memcpy+0xc>
 800591e:	bd10      	pop	{r4, pc}
 8005920:	f811 4b01 	ldrb.w	r4, [r1], #1
 8005924:	f803 4f01 	strb.w	r4, [r3, #1]!
 8005928:	e7f7      	b.n	800591a <memcpy+0x6>

0800592a <memset>:
 800592a:	4402      	add	r2, r0
 800592c:	4603      	mov	r3, r0
 800592e:	4293      	cmp	r3, r2
 8005930:	d100      	bne.n	8005934 <memset+0xa>
 8005932:	4770      	bx	lr
 8005934:	f803 1b01 	strb.w	r1, [r3], #1
 8005938:	e7f9      	b.n	800592e <memset+0x4>
	...

0800593c <_init>:
 800593c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800593e:	bf00      	nop
 8005940:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005942:	bc08      	pop	{r3}
 8005944:	469e      	mov	lr, r3
 8005946:	4770      	bx	lr

08005948 <_fini>:
 8005948:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800594a:	bf00      	nop
 800594c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800594e:	bc08      	pop	{r3}
 8005950:	469e      	mov	lr, r3
 8005952:	4770      	bx	lr
